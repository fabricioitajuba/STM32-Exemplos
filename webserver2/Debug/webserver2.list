
webserver2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b44  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  08004c50  08004c50  00014c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005128  08005128  00020200  2**0
                  CONTENTS
  4 .ARM          00000000  08005128  08005128  00020200  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005128  08005128  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005128  08005128  00015128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800512c  0800512c  0001512c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  08005130  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000038c  20000200  08005330  00020200  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000058c  08005330  0002058c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000baae  00000000  00000000  00020229  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000021a3  00000000  00000000  0002bcd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b80  00000000  00000000  0002de80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a78  00000000  00000000  0002ea00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016201  00000000  00000000  0002f478  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008c43  00000000  00000000  00045679  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006e38a  00000000  00000000  0004e2bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bc646  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032c4  00000000  00000000  000bc6c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000200 	.word	0x20000200
 8000128:	00000000 	.word	0x00000000
 800012c:	08004c38 	.word	0x08004c38

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000204 	.word	0x20000204
 8000148:	08004c38 	.word	0x08004c38

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000160:	4b08      	ldr	r3, [pc, #32]	; (8000184 <HAL_Init+0x28>)
 8000162:	681b      	ldr	r3, [r3, #0]
 8000164:	4a07      	ldr	r2, [pc, #28]	; (8000184 <HAL_Init+0x28>)
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800016c:	2003      	movs	r0, #3
 800016e:	f000 f929 	bl	80003c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000172:	2000      	movs	r0, #0
 8000174:	f000 f808 	bl	8000188 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000178:	f003 feb2 	bl	8003ee0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800017c:	2300      	movs	r3, #0
}
 800017e:	4618      	mov	r0, r3
 8000180:	bd80      	pop	{r7, pc}
 8000182:	bf00      	nop
 8000184:	40022000 	.word	0x40022000

08000188 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b082      	sub	sp, #8
 800018c:	af00      	add	r7, sp, #0
 800018e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000190:	4b12      	ldr	r3, [pc, #72]	; (80001dc <HAL_InitTick+0x54>)
 8000192:	681a      	ldr	r2, [r3, #0]
 8000194:	4b12      	ldr	r3, [pc, #72]	; (80001e0 <HAL_InitTick+0x58>)
 8000196:	781b      	ldrb	r3, [r3, #0]
 8000198:	4619      	mov	r1, r3
 800019a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800019e:	fbb3 f3f1 	udiv	r3, r3, r1
 80001a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80001a6:	4618      	mov	r0, r3
 80001a8:	f000 f933 	bl	8000412 <HAL_SYSTICK_Config>
 80001ac:	4603      	mov	r3, r0
 80001ae:	2b00      	cmp	r3, #0
 80001b0:	d001      	beq.n	80001b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001b2:	2301      	movs	r3, #1
 80001b4:	e00e      	b.n	80001d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	2b0f      	cmp	r3, #15
 80001ba:	d80a      	bhi.n	80001d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001bc:	2200      	movs	r2, #0
 80001be:	6879      	ldr	r1, [r7, #4]
 80001c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80001c4:	f000 f909 	bl	80003da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001c8:	4a06      	ldr	r2, [pc, #24]	; (80001e4 <HAL_InitTick+0x5c>)
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001ce:	2300      	movs	r3, #0
 80001d0:	e000      	b.n	80001d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001d2:	2301      	movs	r3, #1
}
 80001d4:	4618      	mov	r0, r3
 80001d6:	3708      	adds	r7, #8
 80001d8:	46bd      	mov	sp, r7
 80001da:	bd80      	pop	{r7, pc}
 80001dc:	2000002c 	.word	0x2000002c
 80001e0:	20000004 	.word	0x20000004
 80001e4:	20000000 	.word	0x20000000

080001e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001ec:	4b05      	ldr	r3, [pc, #20]	; (8000204 <HAL_IncTick+0x1c>)
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	461a      	mov	r2, r3
 80001f2:	4b05      	ldr	r3, [pc, #20]	; (8000208 <HAL_IncTick+0x20>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4413      	add	r3, r2
 80001f8:	4a03      	ldr	r2, [pc, #12]	; (8000208 <HAL_IncTick+0x20>)
 80001fa:	6013      	str	r3, [r2, #0]
}
 80001fc:	bf00      	nop
 80001fe:	46bd      	mov	sp, r7
 8000200:	bc80      	pop	{r7}
 8000202:	4770      	bx	lr
 8000204:	20000004 	.word	0x20000004
 8000208:	200004bc 	.word	0x200004bc

0800020c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800020c:	b480      	push	{r7}
 800020e:	af00      	add	r7, sp, #0
  return uwTick;
 8000210:	4b02      	ldr	r3, [pc, #8]	; (800021c <HAL_GetTick+0x10>)
 8000212:	681b      	ldr	r3, [r3, #0]
}
 8000214:	4618      	mov	r0, r3
 8000216:	46bd      	mov	sp, r7
 8000218:	bc80      	pop	{r7}
 800021a:	4770      	bx	lr
 800021c:	200004bc 	.word	0x200004bc

08000220 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000228:	f7ff fff0 	bl	800020c <HAL_GetTick>
 800022c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000238:	d005      	beq.n	8000246 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800023a:	4b09      	ldr	r3, [pc, #36]	; (8000260 <HAL_Delay+0x40>)
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	461a      	mov	r2, r3
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	4413      	add	r3, r2
 8000244:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000246:	bf00      	nop
 8000248:	f7ff ffe0 	bl	800020c <HAL_GetTick>
 800024c:	4602      	mov	r2, r0
 800024e:	68bb      	ldr	r3, [r7, #8]
 8000250:	1ad3      	subs	r3, r2, r3
 8000252:	68fa      	ldr	r2, [r7, #12]
 8000254:	429a      	cmp	r2, r3
 8000256:	d8f7      	bhi.n	8000248 <HAL_Delay+0x28>
  {
  }
}
 8000258:	bf00      	nop
 800025a:	3710      	adds	r7, #16
 800025c:	46bd      	mov	sp, r7
 800025e:	bd80      	pop	{r7, pc}
 8000260:	20000004 	.word	0x20000004

08000264 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000264:	b480      	push	{r7}
 8000266:	b085      	sub	sp, #20
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f003 0307 	and.w	r3, r3, #7
 8000272:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000274:	4b0c      	ldr	r3, [pc, #48]	; (80002a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000276:	68db      	ldr	r3, [r3, #12]
 8000278:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800027a:	68ba      	ldr	r2, [r7, #8]
 800027c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000280:	4013      	ands	r3, r2
 8000282:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800028c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000290:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000294:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000296:	4a04      	ldr	r2, [pc, #16]	; (80002a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000298:	68bb      	ldr	r3, [r7, #8]
 800029a:	60d3      	str	r3, [r2, #12]
}
 800029c:	bf00      	nop
 800029e:	3714      	adds	r7, #20
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bc80      	pop	{r7}
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	e000ed00 	.word	0xe000ed00

080002ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002b0:	4b04      	ldr	r3, [pc, #16]	; (80002c4 <__NVIC_GetPriorityGrouping+0x18>)
 80002b2:	68db      	ldr	r3, [r3, #12]
 80002b4:	0a1b      	lsrs	r3, r3, #8
 80002b6:	f003 0307 	and.w	r3, r3, #7
}
 80002ba:	4618      	mov	r0, r3
 80002bc:	46bd      	mov	sp, r7
 80002be:	bc80      	pop	{r7}
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	e000ed00 	.word	0xe000ed00

080002c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002c8:	b480      	push	{r7}
 80002ca:	b083      	sub	sp, #12
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	4603      	mov	r3, r0
 80002d0:	6039      	str	r1, [r7, #0]
 80002d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	db0a      	blt.n	80002f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002dc:	683b      	ldr	r3, [r7, #0]
 80002de:	b2da      	uxtb	r2, r3
 80002e0:	490c      	ldr	r1, [pc, #48]	; (8000314 <__NVIC_SetPriority+0x4c>)
 80002e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002e6:	0112      	lsls	r2, r2, #4
 80002e8:	b2d2      	uxtb	r2, r2
 80002ea:	440b      	add	r3, r1
 80002ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002f0:	e00a      	b.n	8000308 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f2:	683b      	ldr	r3, [r7, #0]
 80002f4:	b2da      	uxtb	r2, r3
 80002f6:	4908      	ldr	r1, [pc, #32]	; (8000318 <__NVIC_SetPriority+0x50>)
 80002f8:	79fb      	ldrb	r3, [r7, #7]
 80002fa:	f003 030f 	and.w	r3, r3, #15
 80002fe:	3b04      	subs	r3, #4
 8000300:	0112      	lsls	r2, r2, #4
 8000302:	b2d2      	uxtb	r2, r2
 8000304:	440b      	add	r3, r1
 8000306:	761a      	strb	r2, [r3, #24]
}
 8000308:	bf00      	nop
 800030a:	370c      	adds	r7, #12
 800030c:	46bd      	mov	sp, r7
 800030e:	bc80      	pop	{r7}
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	e000e100 	.word	0xe000e100
 8000318:	e000ed00 	.word	0xe000ed00

0800031c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800031c:	b480      	push	{r7}
 800031e:	b089      	sub	sp, #36	; 0x24
 8000320:	af00      	add	r7, sp, #0
 8000322:	60f8      	str	r0, [r7, #12]
 8000324:	60b9      	str	r1, [r7, #8]
 8000326:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	f003 0307 	and.w	r3, r3, #7
 800032e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000330:	69fb      	ldr	r3, [r7, #28]
 8000332:	f1c3 0307 	rsb	r3, r3, #7
 8000336:	2b04      	cmp	r3, #4
 8000338:	bf28      	it	cs
 800033a:	2304      	movcs	r3, #4
 800033c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800033e:	69fb      	ldr	r3, [r7, #28]
 8000340:	3304      	adds	r3, #4
 8000342:	2b06      	cmp	r3, #6
 8000344:	d902      	bls.n	800034c <NVIC_EncodePriority+0x30>
 8000346:	69fb      	ldr	r3, [r7, #28]
 8000348:	3b03      	subs	r3, #3
 800034a:	e000      	b.n	800034e <NVIC_EncodePriority+0x32>
 800034c:	2300      	movs	r3, #0
 800034e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000350:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000354:	69bb      	ldr	r3, [r7, #24]
 8000356:	fa02 f303 	lsl.w	r3, r2, r3
 800035a:	43da      	mvns	r2, r3
 800035c:	68bb      	ldr	r3, [r7, #8]
 800035e:	401a      	ands	r2, r3
 8000360:	697b      	ldr	r3, [r7, #20]
 8000362:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000364:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000368:	697b      	ldr	r3, [r7, #20]
 800036a:	fa01 f303 	lsl.w	r3, r1, r3
 800036e:	43d9      	mvns	r1, r3
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000374:	4313      	orrs	r3, r2
         );
}
 8000376:	4618      	mov	r0, r3
 8000378:	3724      	adds	r7, #36	; 0x24
 800037a:	46bd      	mov	sp, r7
 800037c:	bc80      	pop	{r7}
 800037e:	4770      	bx	lr

08000380 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	3b01      	subs	r3, #1
 800038c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000390:	d301      	bcc.n	8000396 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000392:	2301      	movs	r3, #1
 8000394:	e00f      	b.n	80003b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000396:	4a0a      	ldr	r2, [pc, #40]	; (80003c0 <SysTick_Config+0x40>)
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	3b01      	subs	r3, #1
 800039c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800039e:	210f      	movs	r1, #15
 80003a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80003a4:	f7ff ff90 	bl	80002c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003a8:	4b05      	ldr	r3, [pc, #20]	; (80003c0 <SysTick_Config+0x40>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003ae:	4b04      	ldr	r3, [pc, #16]	; (80003c0 <SysTick_Config+0x40>)
 80003b0:	2207      	movs	r2, #7
 80003b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003b4:	2300      	movs	r3, #0
}
 80003b6:	4618      	mov	r0, r3
 80003b8:	3708      	adds	r7, #8
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	e000e010 	.word	0xe000e010

080003c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003cc:	6878      	ldr	r0, [r7, #4]
 80003ce:	f7ff ff49 	bl	8000264 <__NVIC_SetPriorityGrouping>
}
 80003d2:	bf00      	nop
 80003d4:	3708      	adds	r7, #8
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}

080003da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003da:	b580      	push	{r7, lr}
 80003dc:	b086      	sub	sp, #24
 80003de:	af00      	add	r7, sp, #0
 80003e0:	4603      	mov	r3, r0
 80003e2:	60b9      	str	r1, [r7, #8]
 80003e4:	607a      	str	r2, [r7, #4]
 80003e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80003e8:	2300      	movs	r3, #0
 80003ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80003ec:	f7ff ff5e 	bl	80002ac <__NVIC_GetPriorityGrouping>
 80003f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80003f2:	687a      	ldr	r2, [r7, #4]
 80003f4:	68b9      	ldr	r1, [r7, #8]
 80003f6:	6978      	ldr	r0, [r7, #20]
 80003f8:	f7ff ff90 	bl	800031c <NVIC_EncodePriority>
 80003fc:	4602      	mov	r2, r0
 80003fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000402:	4611      	mov	r1, r2
 8000404:	4618      	mov	r0, r3
 8000406:	f7ff ff5f 	bl	80002c8 <__NVIC_SetPriority>
}
 800040a:	bf00      	nop
 800040c:	3718      	adds	r7, #24
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}

08000412 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000412:	b580      	push	{r7, lr}
 8000414:	b082      	sub	sp, #8
 8000416:	af00      	add	r7, sp, #0
 8000418:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800041a:	6878      	ldr	r0, [r7, #4]
 800041c:	f7ff ffb0 	bl	8000380 <SysTick_Config>
 8000420:	4603      	mov	r3, r0
}
 8000422:	4618      	mov	r0, r3
 8000424:	3708      	adds	r7, #8
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
	...

0800042c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800042c:	b480      	push	{r7}
 800042e:	b08b      	sub	sp, #44	; 0x2c
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
 8000434:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000436:	2300      	movs	r3, #0
 8000438:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800043a:	2300      	movs	r3, #0
 800043c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800043e:	e127      	b.n	8000690 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000440:	2201      	movs	r2, #1
 8000442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000444:	fa02 f303 	lsl.w	r3, r2, r3
 8000448:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800044a:	683b      	ldr	r3, [r7, #0]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	69fa      	ldr	r2, [r7, #28]
 8000450:	4013      	ands	r3, r2
 8000452:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000454:	69ba      	ldr	r2, [r7, #24]
 8000456:	69fb      	ldr	r3, [r7, #28]
 8000458:	429a      	cmp	r2, r3
 800045a:	f040 8116 	bne.w	800068a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800045e:	683b      	ldr	r3, [r7, #0]
 8000460:	685b      	ldr	r3, [r3, #4]
 8000462:	2b12      	cmp	r3, #18
 8000464:	d034      	beq.n	80004d0 <HAL_GPIO_Init+0xa4>
 8000466:	2b12      	cmp	r3, #18
 8000468:	d80d      	bhi.n	8000486 <HAL_GPIO_Init+0x5a>
 800046a:	2b02      	cmp	r3, #2
 800046c:	d02b      	beq.n	80004c6 <HAL_GPIO_Init+0x9a>
 800046e:	2b02      	cmp	r3, #2
 8000470:	d804      	bhi.n	800047c <HAL_GPIO_Init+0x50>
 8000472:	2b00      	cmp	r3, #0
 8000474:	d031      	beq.n	80004da <HAL_GPIO_Init+0xae>
 8000476:	2b01      	cmp	r3, #1
 8000478:	d01c      	beq.n	80004b4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800047a:	e048      	b.n	800050e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800047c:	2b03      	cmp	r3, #3
 800047e:	d043      	beq.n	8000508 <HAL_GPIO_Init+0xdc>
 8000480:	2b11      	cmp	r3, #17
 8000482:	d01b      	beq.n	80004bc <HAL_GPIO_Init+0x90>
          break;
 8000484:	e043      	b.n	800050e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000486:	4a89      	ldr	r2, [pc, #548]	; (80006ac <HAL_GPIO_Init+0x280>)
 8000488:	4293      	cmp	r3, r2
 800048a:	d026      	beq.n	80004da <HAL_GPIO_Init+0xae>
 800048c:	4a87      	ldr	r2, [pc, #540]	; (80006ac <HAL_GPIO_Init+0x280>)
 800048e:	4293      	cmp	r3, r2
 8000490:	d806      	bhi.n	80004a0 <HAL_GPIO_Init+0x74>
 8000492:	4a87      	ldr	r2, [pc, #540]	; (80006b0 <HAL_GPIO_Init+0x284>)
 8000494:	4293      	cmp	r3, r2
 8000496:	d020      	beq.n	80004da <HAL_GPIO_Init+0xae>
 8000498:	4a86      	ldr	r2, [pc, #536]	; (80006b4 <HAL_GPIO_Init+0x288>)
 800049a:	4293      	cmp	r3, r2
 800049c:	d01d      	beq.n	80004da <HAL_GPIO_Init+0xae>
          break;
 800049e:	e036      	b.n	800050e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80004a0:	4a85      	ldr	r2, [pc, #532]	; (80006b8 <HAL_GPIO_Init+0x28c>)
 80004a2:	4293      	cmp	r3, r2
 80004a4:	d019      	beq.n	80004da <HAL_GPIO_Init+0xae>
 80004a6:	4a85      	ldr	r2, [pc, #532]	; (80006bc <HAL_GPIO_Init+0x290>)
 80004a8:	4293      	cmp	r3, r2
 80004aa:	d016      	beq.n	80004da <HAL_GPIO_Init+0xae>
 80004ac:	4a84      	ldr	r2, [pc, #528]	; (80006c0 <HAL_GPIO_Init+0x294>)
 80004ae:	4293      	cmp	r3, r2
 80004b0:	d013      	beq.n	80004da <HAL_GPIO_Init+0xae>
          break;
 80004b2:	e02c      	b.n	800050e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	68db      	ldr	r3, [r3, #12]
 80004b8:	623b      	str	r3, [r7, #32]
          break;
 80004ba:	e028      	b.n	800050e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	68db      	ldr	r3, [r3, #12]
 80004c0:	3304      	adds	r3, #4
 80004c2:	623b      	str	r3, [r7, #32]
          break;
 80004c4:	e023      	b.n	800050e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80004c6:	683b      	ldr	r3, [r7, #0]
 80004c8:	68db      	ldr	r3, [r3, #12]
 80004ca:	3308      	adds	r3, #8
 80004cc:	623b      	str	r3, [r7, #32]
          break;
 80004ce:	e01e      	b.n	800050e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80004d0:	683b      	ldr	r3, [r7, #0]
 80004d2:	68db      	ldr	r3, [r3, #12]
 80004d4:	330c      	adds	r3, #12
 80004d6:	623b      	str	r3, [r7, #32]
          break;
 80004d8:	e019      	b.n	800050e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80004da:	683b      	ldr	r3, [r7, #0]
 80004dc:	689b      	ldr	r3, [r3, #8]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d102      	bne.n	80004e8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80004e2:	2304      	movs	r3, #4
 80004e4:	623b      	str	r3, [r7, #32]
          break;
 80004e6:	e012      	b.n	800050e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	689b      	ldr	r3, [r3, #8]
 80004ec:	2b01      	cmp	r3, #1
 80004ee:	d105      	bne.n	80004fc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80004f0:	2308      	movs	r3, #8
 80004f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	69fa      	ldr	r2, [r7, #28]
 80004f8:	611a      	str	r2, [r3, #16]
          break;
 80004fa:	e008      	b.n	800050e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80004fc:	2308      	movs	r3, #8
 80004fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	69fa      	ldr	r2, [r7, #28]
 8000504:	615a      	str	r2, [r3, #20]
          break;
 8000506:	e002      	b.n	800050e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000508:	2300      	movs	r3, #0
 800050a:	623b      	str	r3, [r7, #32]
          break;
 800050c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800050e:	69bb      	ldr	r3, [r7, #24]
 8000510:	2bff      	cmp	r3, #255	; 0xff
 8000512:	d801      	bhi.n	8000518 <HAL_GPIO_Init+0xec>
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	e001      	b.n	800051c <HAL_GPIO_Init+0xf0>
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	3304      	adds	r3, #4
 800051c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800051e:	69bb      	ldr	r3, [r7, #24]
 8000520:	2bff      	cmp	r3, #255	; 0xff
 8000522:	d802      	bhi.n	800052a <HAL_GPIO_Init+0xfe>
 8000524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000526:	009b      	lsls	r3, r3, #2
 8000528:	e002      	b.n	8000530 <HAL_GPIO_Init+0x104>
 800052a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800052c:	3b08      	subs	r3, #8
 800052e:	009b      	lsls	r3, r3, #2
 8000530:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000532:	697b      	ldr	r3, [r7, #20]
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	210f      	movs	r1, #15
 8000538:	693b      	ldr	r3, [r7, #16]
 800053a:	fa01 f303 	lsl.w	r3, r1, r3
 800053e:	43db      	mvns	r3, r3
 8000540:	401a      	ands	r2, r3
 8000542:	6a39      	ldr	r1, [r7, #32]
 8000544:	693b      	ldr	r3, [r7, #16]
 8000546:	fa01 f303 	lsl.w	r3, r1, r3
 800054a:	431a      	orrs	r2, r3
 800054c:	697b      	ldr	r3, [r7, #20]
 800054e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	685b      	ldr	r3, [r3, #4]
 8000554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000558:	2b00      	cmp	r3, #0
 800055a:	f000 8096 	beq.w	800068a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800055e:	4b59      	ldr	r3, [pc, #356]	; (80006c4 <HAL_GPIO_Init+0x298>)
 8000560:	699b      	ldr	r3, [r3, #24]
 8000562:	4a58      	ldr	r2, [pc, #352]	; (80006c4 <HAL_GPIO_Init+0x298>)
 8000564:	f043 0301 	orr.w	r3, r3, #1
 8000568:	6193      	str	r3, [r2, #24]
 800056a:	4b56      	ldr	r3, [pc, #344]	; (80006c4 <HAL_GPIO_Init+0x298>)
 800056c:	699b      	ldr	r3, [r3, #24]
 800056e:	f003 0301 	and.w	r3, r3, #1
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000576:	4a54      	ldr	r2, [pc, #336]	; (80006c8 <HAL_GPIO_Init+0x29c>)
 8000578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800057a:	089b      	lsrs	r3, r3, #2
 800057c:	3302      	adds	r3, #2
 800057e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000582:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000586:	f003 0303 	and.w	r3, r3, #3
 800058a:	009b      	lsls	r3, r3, #2
 800058c:	220f      	movs	r2, #15
 800058e:	fa02 f303 	lsl.w	r3, r2, r3
 8000592:	43db      	mvns	r3, r3
 8000594:	68fa      	ldr	r2, [r7, #12]
 8000596:	4013      	ands	r3, r2
 8000598:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4a4b      	ldr	r2, [pc, #300]	; (80006cc <HAL_GPIO_Init+0x2a0>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d013      	beq.n	80005ca <HAL_GPIO_Init+0x19e>
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4a4a      	ldr	r2, [pc, #296]	; (80006d0 <HAL_GPIO_Init+0x2a4>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d00d      	beq.n	80005c6 <HAL_GPIO_Init+0x19a>
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4a49      	ldr	r2, [pc, #292]	; (80006d4 <HAL_GPIO_Init+0x2a8>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d007      	beq.n	80005c2 <HAL_GPIO_Init+0x196>
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4a48      	ldr	r2, [pc, #288]	; (80006d8 <HAL_GPIO_Init+0x2ac>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d101      	bne.n	80005be <HAL_GPIO_Init+0x192>
 80005ba:	2303      	movs	r3, #3
 80005bc:	e006      	b.n	80005cc <HAL_GPIO_Init+0x1a0>
 80005be:	2304      	movs	r3, #4
 80005c0:	e004      	b.n	80005cc <HAL_GPIO_Init+0x1a0>
 80005c2:	2302      	movs	r3, #2
 80005c4:	e002      	b.n	80005cc <HAL_GPIO_Init+0x1a0>
 80005c6:	2301      	movs	r3, #1
 80005c8:	e000      	b.n	80005cc <HAL_GPIO_Init+0x1a0>
 80005ca:	2300      	movs	r3, #0
 80005cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005ce:	f002 0203 	and.w	r2, r2, #3
 80005d2:	0092      	lsls	r2, r2, #2
 80005d4:	4093      	lsls	r3, r2
 80005d6:	68fa      	ldr	r2, [r7, #12]
 80005d8:	4313      	orrs	r3, r2
 80005da:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80005dc:	493a      	ldr	r1, [pc, #232]	; (80006c8 <HAL_GPIO_Init+0x29c>)
 80005de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005e0:	089b      	lsrs	r3, r3, #2
 80005e2:	3302      	adds	r3, #2
 80005e4:	68fa      	ldr	r2, [r7, #12]
 80005e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	685b      	ldr	r3, [r3, #4]
 80005ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d006      	beq.n	8000604 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80005f6:	4b39      	ldr	r3, [pc, #228]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 80005f8:	681a      	ldr	r2, [r3, #0]
 80005fa:	4938      	ldr	r1, [pc, #224]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 80005fc:	69bb      	ldr	r3, [r7, #24]
 80005fe:	4313      	orrs	r3, r2
 8000600:	600b      	str	r3, [r1, #0]
 8000602:	e006      	b.n	8000612 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000604:	4b35      	ldr	r3, [pc, #212]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 8000606:	681a      	ldr	r2, [r3, #0]
 8000608:	69bb      	ldr	r3, [r7, #24]
 800060a:	43db      	mvns	r3, r3
 800060c:	4933      	ldr	r1, [pc, #204]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 800060e:	4013      	ands	r3, r2
 8000610:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	685b      	ldr	r3, [r3, #4]
 8000616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800061a:	2b00      	cmp	r3, #0
 800061c:	d006      	beq.n	800062c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 8000620:	685a      	ldr	r2, [r3, #4]
 8000622:	492e      	ldr	r1, [pc, #184]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 8000624:	69bb      	ldr	r3, [r7, #24]
 8000626:	4313      	orrs	r3, r2
 8000628:	604b      	str	r3, [r1, #4]
 800062a:	e006      	b.n	800063a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800062c:	4b2b      	ldr	r3, [pc, #172]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 800062e:	685a      	ldr	r2, [r3, #4]
 8000630:	69bb      	ldr	r3, [r7, #24]
 8000632:	43db      	mvns	r3, r3
 8000634:	4929      	ldr	r1, [pc, #164]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 8000636:	4013      	ands	r3, r2
 8000638:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	685b      	ldr	r3, [r3, #4]
 800063e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000642:	2b00      	cmp	r3, #0
 8000644:	d006      	beq.n	8000654 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 8000648:	689a      	ldr	r2, [r3, #8]
 800064a:	4924      	ldr	r1, [pc, #144]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 800064c:	69bb      	ldr	r3, [r7, #24]
 800064e:	4313      	orrs	r3, r2
 8000650:	608b      	str	r3, [r1, #8]
 8000652:	e006      	b.n	8000662 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000654:	4b21      	ldr	r3, [pc, #132]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 8000656:	689a      	ldr	r2, [r3, #8]
 8000658:	69bb      	ldr	r3, [r7, #24]
 800065a:	43db      	mvns	r3, r3
 800065c:	491f      	ldr	r1, [pc, #124]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 800065e:	4013      	ands	r3, r2
 8000660:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	685b      	ldr	r3, [r3, #4]
 8000666:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800066a:	2b00      	cmp	r3, #0
 800066c:	d006      	beq.n	800067c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800066e:	4b1b      	ldr	r3, [pc, #108]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 8000670:	68da      	ldr	r2, [r3, #12]
 8000672:	491a      	ldr	r1, [pc, #104]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 8000674:	69bb      	ldr	r3, [r7, #24]
 8000676:	4313      	orrs	r3, r2
 8000678:	60cb      	str	r3, [r1, #12]
 800067a:	e006      	b.n	800068a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 800067e:	68da      	ldr	r2, [r3, #12]
 8000680:	69bb      	ldr	r3, [r7, #24]
 8000682:	43db      	mvns	r3, r3
 8000684:	4915      	ldr	r1, [pc, #84]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 8000686:	4013      	ands	r3, r2
 8000688:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800068a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800068c:	3301      	adds	r3, #1
 800068e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	681a      	ldr	r2, [r3, #0]
 8000694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000696:	fa22 f303 	lsr.w	r3, r2, r3
 800069a:	2b00      	cmp	r3, #0
 800069c:	f47f aed0 	bne.w	8000440 <HAL_GPIO_Init+0x14>
  }
}
 80006a0:	bf00      	nop
 80006a2:	372c      	adds	r7, #44	; 0x2c
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bc80      	pop	{r7}
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	10210000 	.word	0x10210000
 80006b0:	10110000 	.word	0x10110000
 80006b4:	10120000 	.word	0x10120000
 80006b8:	10310000 	.word	0x10310000
 80006bc:	10320000 	.word	0x10320000
 80006c0:	10220000 	.word	0x10220000
 80006c4:	40021000 	.word	0x40021000
 80006c8:	40010000 	.word	0x40010000
 80006cc:	40010800 	.word	0x40010800
 80006d0:	40010c00 	.word	0x40010c00
 80006d4:	40011000 	.word	0x40011000
 80006d8:	40011400 	.word	0x40011400
 80006dc:	40010400 	.word	0x40010400

080006e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	460b      	mov	r3, r1
 80006ea:	807b      	strh	r3, [r7, #2]
 80006ec:	4613      	mov	r3, r2
 80006ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80006f0:	787b      	ldrb	r3, [r7, #1]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d003      	beq.n	80006fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80006f6:	887a      	ldrh	r2, [r7, #2]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80006fc:	e003      	b.n	8000706 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80006fe:	887b      	ldrh	r3, [r7, #2]
 8000700:	041a      	lsls	r2, r3, #16
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	611a      	str	r2, [r3, #16]
}
 8000706:	bf00      	nop
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr

08000710 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b086      	sub	sp, #24
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d101      	bne.n	8000722 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800071e:	2301      	movs	r3, #1
 8000720:	e26c      	b.n	8000bfc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	2b00      	cmp	r3, #0
 800072c:	f000 8087 	beq.w	800083e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000730:	4b92      	ldr	r3, [pc, #584]	; (800097c <HAL_RCC_OscConfig+0x26c>)
 8000732:	685b      	ldr	r3, [r3, #4]
 8000734:	f003 030c 	and.w	r3, r3, #12
 8000738:	2b04      	cmp	r3, #4
 800073a:	d00c      	beq.n	8000756 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800073c:	4b8f      	ldr	r3, [pc, #572]	; (800097c <HAL_RCC_OscConfig+0x26c>)
 800073e:	685b      	ldr	r3, [r3, #4]
 8000740:	f003 030c 	and.w	r3, r3, #12
 8000744:	2b08      	cmp	r3, #8
 8000746:	d112      	bne.n	800076e <HAL_RCC_OscConfig+0x5e>
 8000748:	4b8c      	ldr	r3, [pc, #560]	; (800097c <HAL_RCC_OscConfig+0x26c>)
 800074a:	685b      	ldr	r3, [r3, #4]
 800074c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000754:	d10b      	bne.n	800076e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000756:	4b89      	ldr	r3, [pc, #548]	; (800097c <HAL_RCC_OscConfig+0x26c>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800075e:	2b00      	cmp	r3, #0
 8000760:	d06c      	beq.n	800083c <HAL_RCC_OscConfig+0x12c>
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	685b      	ldr	r3, [r3, #4]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d168      	bne.n	800083c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800076a:	2301      	movs	r3, #1
 800076c:	e246      	b.n	8000bfc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	685b      	ldr	r3, [r3, #4]
 8000772:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000776:	d106      	bne.n	8000786 <HAL_RCC_OscConfig+0x76>
 8000778:	4b80      	ldr	r3, [pc, #512]	; (800097c <HAL_RCC_OscConfig+0x26c>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a7f      	ldr	r2, [pc, #508]	; (800097c <HAL_RCC_OscConfig+0x26c>)
 800077e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000782:	6013      	str	r3, [r2, #0]
 8000784:	e02e      	b.n	80007e4 <HAL_RCC_OscConfig+0xd4>
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	685b      	ldr	r3, [r3, #4]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d10c      	bne.n	80007a8 <HAL_RCC_OscConfig+0x98>
 800078e:	4b7b      	ldr	r3, [pc, #492]	; (800097c <HAL_RCC_OscConfig+0x26c>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4a7a      	ldr	r2, [pc, #488]	; (800097c <HAL_RCC_OscConfig+0x26c>)
 8000794:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000798:	6013      	str	r3, [r2, #0]
 800079a:	4b78      	ldr	r3, [pc, #480]	; (800097c <HAL_RCC_OscConfig+0x26c>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4a77      	ldr	r2, [pc, #476]	; (800097c <HAL_RCC_OscConfig+0x26c>)
 80007a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007a4:	6013      	str	r3, [r2, #0]
 80007a6:	e01d      	b.n	80007e4 <HAL_RCC_OscConfig+0xd4>
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	685b      	ldr	r3, [r3, #4]
 80007ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80007b0:	d10c      	bne.n	80007cc <HAL_RCC_OscConfig+0xbc>
 80007b2:	4b72      	ldr	r3, [pc, #456]	; (800097c <HAL_RCC_OscConfig+0x26c>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4a71      	ldr	r2, [pc, #452]	; (800097c <HAL_RCC_OscConfig+0x26c>)
 80007b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007bc:	6013      	str	r3, [r2, #0]
 80007be:	4b6f      	ldr	r3, [pc, #444]	; (800097c <HAL_RCC_OscConfig+0x26c>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a6e      	ldr	r2, [pc, #440]	; (800097c <HAL_RCC_OscConfig+0x26c>)
 80007c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007c8:	6013      	str	r3, [r2, #0]
 80007ca:	e00b      	b.n	80007e4 <HAL_RCC_OscConfig+0xd4>
 80007cc:	4b6b      	ldr	r3, [pc, #428]	; (800097c <HAL_RCC_OscConfig+0x26c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a6a      	ldr	r2, [pc, #424]	; (800097c <HAL_RCC_OscConfig+0x26c>)
 80007d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007d6:	6013      	str	r3, [r2, #0]
 80007d8:	4b68      	ldr	r3, [pc, #416]	; (800097c <HAL_RCC_OscConfig+0x26c>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a67      	ldr	r2, [pc, #412]	; (800097c <HAL_RCC_OscConfig+0x26c>)
 80007de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	685b      	ldr	r3, [r3, #4]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d013      	beq.n	8000814 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80007ec:	f7ff fd0e 	bl	800020c <HAL_GetTick>
 80007f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80007f2:	e008      	b.n	8000806 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80007f4:	f7ff fd0a 	bl	800020c <HAL_GetTick>
 80007f8:	4602      	mov	r2, r0
 80007fa:	693b      	ldr	r3, [r7, #16]
 80007fc:	1ad3      	subs	r3, r2, r3
 80007fe:	2b64      	cmp	r3, #100	; 0x64
 8000800:	d901      	bls.n	8000806 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000802:	2303      	movs	r3, #3
 8000804:	e1fa      	b.n	8000bfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000806:	4b5d      	ldr	r3, [pc, #372]	; (800097c <HAL_RCC_OscConfig+0x26c>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800080e:	2b00      	cmp	r3, #0
 8000810:	d0f0      	beq.n	80007f4 <HAL_RCC_OscConfig+0xe4>
 8000812:	e014      	b.n	800083e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000814:	f7ff fcfa 	bl	800020c <HAL_GetTick>
 8000818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800081a:	e008      	b.n	800082e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800081c:	f7ff fcf6 	bl	800020c <HAL_GetTick>
 8000820:	4602      	mov	r2, r0
 8000822:	693b      	ldr	r3, [r7, #16]
 8000824:	1ad3      	subs	r3, r2, r3
 8000826:	2b64      	cmp	r3, #100	; 0x64
 8000828:	d901      	bls.n	800082e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800082a:	2303      	movs	r3, #3
 800082c:	e1e6      	b.n	8000bfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800082e:	4b53      	ldr	r3, [pc, #332]	; (800097c <HAL_RCC_OscConfig+0x26c>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000836:	2b00      	cmp	r3, #0
 8000838:	d1f0      	bne.n	800081c <HAL_RCC_OscConfig+0x10c>
 800083a:	e000      	b.n	800083e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800083c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f003 0302 	and.w	r3, r3, #2
 8000846:	2b00      	cmp	r3, #0
 8000848:	d063      	beq.n	8000912 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800084a:	4b4c      	ldr	r3, [pc, #304]	; (800097c <HAL_RCC_OscConfig+0x26c>)
 800084c:	685b      	ldr	r3, [r3, #4]
 800084e:	f003 030c 	and.w	r3, r3, #12
 8000852:	2b00      	cmp	r3, #0
 8000854:	d00b      	beq.n	800086e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000856:	4b49      	ldr	r3, [pc, #292]	; (800097c <HAL_RCC_OscConfig+0x26c>)
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	f003 030c 	and.w	r3, r3, #12
 800085e:	2b08      	cmp	r3, #8
 8000860:	d11c      	bne.n	800089c <HAL_RCC_OscConfig+0x18c>
 8000862:	4b46      	ldr	r3, [pc, #280]	; (800097c <HAL_RCC_OscConfig+0x26c>)
 8000864:	685b      	ldr	r3, [r3, #4]
 8000866:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800086a:	2b00      	cmp	r3, #0
 800086c:	d116      	bne.n	800089c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800086e:	4b43      	ldr	r3, [pc, #268]	; (800097c <HAL_RCC_OscConfig+0x26c>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	f003 0302 	and.w	r3, r3, #2
 8000876:	2b00      	cmp	r3, #0
 8000878:	d005      	beq.n	8000886 <HAL_RCC_OscConfig+0x176>
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	691b      	ldr	r3, [r3, #16]
 800087e:	2b01      	cmp	r3, #1
 8000880:	d001      	beq.n	8000886 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000882:	2301      	movs	r3, #1
 8000884:	e1ba      	b.n	8000bfc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000886:	4b3d      	ldr	r3, [pc, #244]	; (800097c <HAL_RCC_OscConfig+0x26c>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	695b      	ldr	r3, [r3, #20]
 8000892:	00db      	lsls	r3, r3, #3
 8000894:	4939      	ldr	r1, [pc, #228]	; (800097c <HAL_RCC_OscConfig+0x26c>)
 8000896:	4313      	orrs	r3, r2
 8000898:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800089a:	e03a      	b.n	8000912 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	691b      	ldr	r3, [r3, #16]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d020      	beq.n	80008e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80008a4:	4b36      	ldr	r3, [pc, #216]	; (8000980 <HAL_RCC_OscConfig+0x270>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008aa:	f7ff fcaf 	bl	800020c <HAL_GetTick>
 80008ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008b0:	e008      	b.n	80008c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80008b2:	f7ff fcab 	bl	800020c <HAL_GetTick>
 80008b6:	4602      	mov	r2, r0
 80008b8:	693b      	ldr	r3, [r7, #16]
 80008ba:	1ad3      	subs	r3, r2, r3
 80008bc:	2b02      	cmp	r3, #2
 80008be:	d901      	bls.n	80008c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80008c0:	2303      	movs	r3, #3
 80008c2:	e19b      	b.n	8000bfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008c4:	4b2d      	ldr	r3, [pc, #180]	; (800097c <HAL_RCC_OscConfig+0x26c>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f003 0302 	and.w	r3, r3, #2
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d0f0      	beq.n	80008b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008d0:	4b2a      	ldr	r3, [pc, #168]	; (800097c <HAL_RCC_OscConfig+0x26c>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	695b      	ldr	r3, [r3, #20]
 80008dc:	00db      	lsls	r3, r3, #3
 80008de:	4927      	ldr	r1, [pc, #156]	; (800097c <HAL_RCC_OscConfig+0x26c>)
 80008e0:	4313      	orrs	r3, r2
 80008e2:	600b      	str	r3, [r1, #0]
 80008e4:	e015      	b.n	8000912 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80008e6:	4b26      	ldr	r3, [pc, #152]	; (8000980 <HAL_RCC_OscConfig+0x270>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008ec:	f7ff fc8e 	bl	800020c <HAL_GetTick>
 80008f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80008f2:	e008      	b.n	8000906 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80008f4:	f7ff fc8a 	bl	800020c <HAL_GetTick>
 80008f8:	4602      	mov	r2, r0
 80008fa:	693b      	ldr	r3, [r7, #16]
 80008fc:	1ad3      	subs	r3, r2, r3
 80008fe:	2b02      	cmp	r3, #2
 8000900:	d901      	bls.n	8000906 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000902:	2303      	movs	r3, #3
 8000904:	e17a      	b.n	8000bfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000906:	4b1d      	ldr	r3, [pc, #116]	; (800097c <HAL_RCC_OscConfig+0x26c>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	f003 0302 	and.w	r3, r3, #2
 800090e:	2b00      	cmp	r3, #0
 8000910:	d1f0      	bne.n	80008f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	f003 0308 	and.w	r3, r3, #8
 800091a:	2b00      	cmp	r3, #0
 800091c:	d03a      	beq.n	8000994 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	699b      	ldr	r3, [r3, #24]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d019      	beq.n	800095a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000926:	4b17      	ldr	r3, [pc, #92]	; (8000984 <HAL_RCC_OscConfig+0x274>)
 8000928:	2201      	movs	r2, #1
 800092a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800092c:	f7ff fc6e 	bl	800020c <HAL_GetTick>
 8000930:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000932:	e008      	b.n	8000946 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000934:	f7ff fc6a 	bl	800020c <HAL_GetTick>
 8000938:	4602      	mov	r2, r0
 800093a:	693b      	ldr	r3, [r7, #16]
 800093c:	1ad3      	subs	r3, r2, r3
 800093e:	2b02      	cmp	r3, #2
 8000940:	d901      	bls.n	8000946 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000942:	2303      	movs	r3, #3
 8000944:	e15a      	b.n	8000bfc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000946:	4b0d      	ldr	r3, [pc, #52]	; (800097c <HAL_RCC_OscConfig+0x26c>)
 8000948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800094a:	f003 0302 	and.w	r3, r3, #2
 800094e:	2b00      	cmp	r3, #0
 8000950:	d0f0      	beq.n	8000934 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000952:	2001      	movs	r0, #1
 8000954:	f000 faa8 	bl	8000ea8 <RCC_Delay>
 8000958:	e01c      	b.n	8000994 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800095a:	4b0a      	ldr	r3, [pc, #40]	; (8000984 <HAL_RCC_OscConfig+0x274>)
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000960:	f7ff fc54 	bl	800020c <HAL_GetTick>
 8000964:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000966:	e00f      	b.n	8000988 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000968:	f7ff fc50 	bl	800020c <HAL_GetTick>
 800096c:	4602      	mov	r2, r0
 800096e:	693b      	ldr	r3, [r7, #16]
 8000970:	1ad3      	subs	r3, r2, r3
 8000972:	2b02      	cmp	r3, #2
 8000974:	d908      	bls.n	8000988 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000976:	2303      	movs	r3, #3
 8000978:	e140      	b.n	8000bfc <HAL_RCC_OscConfig+0x4ec>
 800097a:	bf00      	nop
 800097c:	40021000 	.word	0x40021000
 8000980:	42420000 	.word	0x42420000
 8000984:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000988:	4b9e      	ldr	r3, [pc, #632]	; (8000c04 <HAL_RCC_OscConfig+0x4f4>)
 800098a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800098c:	f003 0302 	and.w	r3, r3, #2
 8000990:	2b00      	cmp	r3, #0
 8000992:	d1e9      	bne.n	8000968 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f003 0304 	and.w	r3, r3, #4
 800099c:	2b00      	cmp	r3, #0
 800099e:	f000 80a6 	beq.w	8000aee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80009a2:	2300      	movs	r3, #0
 80009a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009a6:	4b97      	ldr	r3, [pc, #604]	; (8000c04 <HAL_RCC_OscConfig+0x4f4>)
 80009a8:	69db      	ldr	r3, [r3, #28]
 80009aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d10d      	bne.n	80009ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80009b2:	4b94      	ldr	r3, [pc, #592]	; (8000c04 <HAL_RCC_OscConfig+0x4f4>)
 80009b4:	69db      	ldr	r3, [r3, #28]
 80009b6:	4a93      	ldr	r2, [pc, #588]	; (8000c04 <HAL_RCC_OscConfig+0x4f4>)
 80009b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009bc:	61d3      	str	r3, [r2, #28]
 80009be:	4b91      	ldr	r3, [pc, #580]	; (8000c04 <HAL_RCC_OscConfig+0x4f4>)
 80009c0:	69db      	ldr	r3, [r3, #28]
 80009c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c6:	60bb      	str	r3, [r7, #8]
 80009c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80009ca:	2301      	movs	r3, #1
 80009cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009ce:	4b8e      	ldr	r3, [pc, #568]	; (8000c08 <HAL_RCC_OscConfig+0x4f8>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d118      	bne.n	8000a0c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80009da:	4b8b      	ldr	r3, [pc, #556]	; (8000c08 <HAL_RCC_OscConfig+0x4f8>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4a8a      	ldr	r2, [pc, #552]	; (8000c08 <HAL_RCC_OscConfig+0x4f8>)
 80009e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80009e6:	f7ff fc11 	bl	800020c <HAL_GetTick>
 80009ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009ec:	e008      	b.n	8000a00 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80009ee:	f7ff fc0d 	bl	800020c <HAL_GetTick>
 80009f2:	4602      	mov	r2, r0
 80009f4:	693b      	ldr	r3, [r7, #16]
 80009f6:	1ad3      	subs	r3, r2, r3
 80009f8:	2b64      	cmp	r3, #100	; 0x64
 80009fa:	d901      	bls.n	8000a00 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80009fc:	2303      	movs	r3, #3
 80009fe:	e0fd      	b.n	8000bfc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a00:	4b81      	ldr	r3, [pc, #516]	; (8000c08 <HAL_RCC_OscConfig+0x4f8>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d0f0      	beq.n	80009ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	68db      	ldr	r3, [r3, #12]
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d106      	bne.n	8000a22 <HAL_RCC_OscConfig+0x312>
 8000a14:	4b7b      	ldr	r3, [pc, #492]	; (8000c04 <HAL_RCC_OscConfig+0x4f4>)
 8000a16:	6a1b      	ldr	r3, [r3, #32]
 8000a18:	4a7a      	ldr	r2, [pc, #488]	; (8000c04 <HAL_RCC_OscConfig+0x4f4>)
 8000a1a:	f043 0301 	orr.w	r3, r3, #1
 8000a1e:	6213      	str	r3, [r2, #32]
 8000a20:	e02d      	b.n	8000a7e <HAL_RCC_OscConfig+0x36e>
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	68db      	ldr	r3, [r3, #12]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d10c      	bne.n	8000a44 <HAL_RCC_OscConfig+0x334>
 8000a2a:	4b76      	ldr	r3, [pc, #472]	; (8000c04 <HAL_RCC_OscConfig+0x4f4>)
 8000a2c:	6a1b      	ldr	r3, [r3, #32]
 8000a2e:	4a75      	ldr	r2, [pc, #468]	; (8000c04 <HAL_RCC_OscConfig+0x4f4>)
 8000a30:	f023 0301 	bic.w	r3, r3, #1
 8000a34:	6213      	str	r3, [r2, #32]
 8000a36:	4b73      	ldr	r3, [pc, #460]	; (8000c04 <HAL_RCC_OscConfig+0x4f4>)
 8000a38:	6a1b      	ldr	r3, [r3, #32]
 8000a3a:	4a72      	ldr	r2, [pc, #456]	; (8000c04 <HAL_RCC_OscConfig+0x4f4>)
 8000a3c:	f023 0304 	bic.w	r3, r3, #4
 8000a40:	6213      	str	r3, [r2, #32]
 8000a42:	e01c      	b.n	8000a7e <HAL_RCC_OscConfig+0x36e>
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	68db      	ldr	r3, [r3, #12]
 8000a48:	2b05      	cmp	r3, #5
 8000a4a:	d10c      	bne.n	8000a66 <HAL_RCC_OscConfig+0x356>
 8000a4c:	4b6d      	ldr	r3, [pc, #436]	; (8000c04 <HAL_RCC_OscConfig+0x4f4>)
 8000a4e:	6a1b      	ldr	r3, [r3, #32]
 8000a50:	4a6c      	ldr	r2, [pc, #432]	; (8000c04 <HAL_RCC_OscConfig+0x4f4>)
 8000a52:	f043 0304 	orr.w	r3, r3, #4
 8000a56:	6213      	str	r3, [r2, #32]
 8000a58:	4b6a      	ldr	r3, [pc, #424]	; (8000c04 <HAL_RCC_OscConfig+0x4f4>)
 8000a5a:	6a1b      	ldr	r3, [r3, #32]
 8000a5c:	4a69      	ldr	r2, [pc, #420]	; (8000c04 <HAL_RCC_OscConfig+0x4f4>)
 8000a5e:	f043 0301 	orr.w	r3, r3, #1
 8000a62:	6213      	str	r3, [r2, #32]
 8000a64:	e00b      	b.n	8000a7e <HAL_RCC_OscConfig+0x36e>
 8000a66:	4b67      	ldr	r3, [pc, #412]	; (8000c04 <HAL_RCC_OscConfig+0x4f4>)
 8000a68:	6a1b      	ldr	r3, [r3, #32]
 8000a6a:	4a66      	ldr	r2, [pc, #408]	; (8000c04 <HAL_RCC_OscConfig+0x4f4>)
 8000a6c:	f023 0301 	bic.w	r3, r3, #1
 8000a70:	6213      	str	r3, [r2, #32]
 8000a72:	4b64      	ldr	r3, [pc, #400]	; (8000c04 <HAL_RCC_OscConfig+0x4f4>)
 8000a74:	6a1b      	ldr	r3, [r3, #32]
 8000a76:	4a63      	ldr	r2, [pc, #396]	; (8000c04 <HAL_RCC_OscConfig+0x4f4>)
 8000a78:	f023 0304 	bic.w	r3, r3, #4
 8000a7c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	68db      	ldr	r3, [r3, #12]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d015      	beq.n	8000ab2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a86:	f7ff fbc1 	bl	800020c <HAL_GetTick>
 8000a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a8c:	e00a      	b.n	8000aa4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000a8e:	f7ff fbbd 	bl	800020c <HAL_GetTick>
 8000a92:	4602      	mov	r2, r0
 8000a94:	693b      	ldr	r3, [r7, #16]
 8000a96:	1ad3      	subs	r3, r2, r3
 8000a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d901      	bls.n	8000aa4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	e0ab      	b.n	8000bfc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000aa4:	4b57      	ldr	r3, [pc, #348]	; (8000c04 <HAL_RCC_OscConfig+0x4f4>)
 8000aa6:	6a1b      	ldr	r3, [r3, #32]
 8000aa8:	f003 0302 	and.w	r3, r3, #2
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d0ee      	beq.n	8000a8e <HAL_RCC_OscConfig+0x37e>
 8000ab0:	e014      	b.n	8000adc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ab2:	f7ff fbab 	bl	800020c <HAL_GetTick>
 8000ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ab8:	e00a      	b.n	8000ad0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000aba:	f7ff fba7 	bl	800020c <HAL_GetTick>
 8000abe:	4602      	mov	r2, r0
 8000ac0:	693b      	ldr	r3, [r7, #16]
 8000ac2:	1ad3      	subs	r3, r2, r3
 8000ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d901      	bls.n	8000ad0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000acc:	2303      	movs	r3, #3
 8000ace:	e095      	b.n	8000bfc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ad0:	4b4c      	ldr	r3, [pc, #304]	; (8000c04 <HAL_RCC_OscConfig+0x4f4>)
 8000ad2:	6a1b      	ldr	r3, [r3, #32]
 8000ad4:	f003 0302 	and.w	r3, r3, #2
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d1ee      	bne.n	8000aba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000adc:	7dfb      	ldrb	r3, [r7, #23]
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	d105      	bne.n	8000aee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ae2:	4b48      	ldr	r3, [pc, #288]	; (8000c04 <HAL_RCC_OscConfig+0x4f4>)
 8000ae4:	69db      	ldr	r3, [r3, #28]
 8000ae6:	4a47      	ldr	r2, [pc, #284]	; (8000c04 <HAL_RCC_OscConfig+0x4f4>)
 8000ae8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000aec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	69db      	ldr	r3, [r3, #28]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	f000 8081 	beq.w	8000bfa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000af8:	4b42      	ldr	r3, [pc, #264]	; (8000c04 <HAL_RCC_OscConfig+0x4f4>)
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	f003 030c 	and.w	r3, r3, #12
 8000b00:	2b08      	cmp	r3, #8
 8000b02:	d061      	beq.n	8000bc8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	69db      	ldr	r3, [r3, #28]
 8000b08:	2b02      	cmp	r3, #2
 8000b0a:	d146      	bne.n	8000b9a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000b0c:	4b3f      	ldr	r3, [pc, #252]	; (8000c0c <HAL_RCC_OscConfig+0x4fc>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b12:	f7ff fb7b 	bl	800020c <HAL_GetTick>
 8000b16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b18:	e008      	b.n	8000b2c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000b1a:	f7ff fb77 	bl	800020c <HAL_GetTick>
 8000b1e:	4602      	mov	r2, r0
 8000b20:	693b      	ldr	r3, [r7, #16]
 8000b22:	1ad3      	subs	r3, r2, r3
 8000b24:	2b02      	cmp	r3, #2
 8000b26:	d901      	bls.n	8000b2c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	e067      	b.n	8000bfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b2c:	4b35      	ldr	r3, [pc, #212]	; (8000c04 <HAL_RCC_OscConfig+0x4f4>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d1f0      	bne.n	8000b1a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6a1b      	ldr	r3, [r3, #32]
 8000b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b40:	d108      	bne.n	8000b54 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000b42:	4b30      	ldr	r3, [pc, #192]	; (8000c04 <HAL_RCC_OscConfig+0x4f4>)
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	689b      	ldr	r3, [r3, #8]
 8000b4e:	492d      	ldr	r1, [pc, #180]	; (8000c04 <HAL_RCC_OscConfig+0x4f4>)
 8000b50:	4313      	orrs	r3, r2
 8000b52:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000b54:	4b2b      	ldr	r3, [pc, #172]	; (8000c04 <HAL_RCC_OscConfig+0x4f4>)
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	6a19      	ldr	r1, [r3, #32]
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b64:	430b      	orrs	r3, r1
 8000b66:	4927      	ldr	r1, [pc, #156]	; (8000c04 <HAL_RCC_OscConfig+0x4f4>)
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000b6c:	4b27      	ldr	r3, [pc, #156]	; (8000c0c <HAL_RCC_OscConfig+0x4fc>)
 8000b6e:	2201      	movs	r2, #1
 8000b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b72:	f7ff fb4b 	bl	800020c <HAL_GetTick>
 8000b76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000b78:	e008      	b.n	8000b8c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000b7a:	f7ff fb47 	bl	800020c <HAL_GetTick>
 8000b7e:	4602      	mov	r2, r0
 8000b80:	693b      	ldr	r3, [r7, #16]
 8000b82:	1ad3      	subs	r3, r2, r3
 8000b84:	2b02      	cmp	r3, #2
 8000b86:	d901      	bls.n	8000b8c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	e037      	b.n	8000bfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000b8c:	4b1d      	ldr	r3, [pc, #116]	; (8000c04 <HAL_RCC_OscConfig+0x4f4>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d0f0      	beq.n	8000b7a <HAL_RCC_OscConfig+0x46a>
 8000b98:	e02f      	b.n	8000bfa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000b9a:	4b1c      	ldr	r3, [pc, #112]	; (8000c0c <HAL_RCC_OscConfig+0x4fc>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ba0:	f7ff fb34 	bl	800020c <HAL_GetTick>
 8000ba4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ba6:	e008      	b.n	8000bba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ba8:	f7ff fb30 	bl	800020c <HAL_GetTick>
 8000bac:	4602      	mov	r2, r0
 8000bae:	693b      	ldr	r3, [r7, #16]
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	2b02      	cmp	r3, #2
 8000bb4:	d901      	bls.n	8000bba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	e020      	b.n	8000bfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bba:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <HAL_RCC_OscConfig+0x4f4>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d1f0      	bne.n	8000ba8 <HAL_RCC_OscConfig+0x498>
 8000bc6:	e018      	b.n	8000bfa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	69db      	ldr	r3, [r3, #28]
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d101      	bne.n	8000bd4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	e013      	b.n	8000bfc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000bd4:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <HAL_RCC_OscConfig+0x4f4>)
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	6a1b      	ldr	r3, [r3, #32]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d106      	bne.n	8000bf6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	d001      	beq.n	8000bfa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e000      	b.n	8000bfc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000bfa:	2300      	movs	r3, #0
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3718      	adds	r7, #24
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40021000 	.word	0x40021000
 8000c08:	40007000 	.word	0x40007000
 8000c0c:	42420060 	.word	0x42420060

08000c10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d101      	bne.n	8000c24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000c20:	2301      	movs	r3, #1
 8000c22:	e0d0      	b.n	8000dc6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000c24:	4b6a      	ldr	r3, [pc, #424]	; (8000dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f003 0307 	and.w	r3, r3, #7
 8000c2c:	683a      	ldr	r2, [r7, #0]
 8000c2e:	429a      	cmp	r2, r3
 8000c30:	d910      	bls.n	8000c54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c32:	4b67      	ldr	r3, [pc, #412]	; (8000dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f023 0207 	bic.w	r2, r3, #7
 8000c3a:	4965      	ldr	r1, [pc, #404]	; (8000dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c42:	4b63      	ldr	r3, [pc, #396]	; (8000dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f003 0307 	and.w	r3, r3, #7
 8000c4a:	683a      	ldr	r2, [r7, #0]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d001      	beq.n	8000c54 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000c50:	2301      	movs	r3, #1
 8000c52:	e0b8      	b.n	8000dc6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f003 0302 	and.w	r3, r3, #2
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d020      	beq.n	8000ca2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f003 0304 	and.w	r3, r3, #4
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d005      	beq.n	8000c78 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c6c:	4b59      	ldr	r3, [pc, #356]	; (8000dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	4a58      	ldr	r2, [pc, #352]	; (8000dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8000c72:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000c76:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f003 0308 	and.w	r3, r3, #8
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d005      	beq.n	8000c90 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000c84:	4b53      	ldr	r3, [pc, #332]	; (8000dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	4a52      	ldr	r2, [pc, #328]	; (8000dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8000c8a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000c8e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c90:	4b50      	ldr	r3, [pc, #320]	; (8000dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	689b      	ldr	r3, [r3, #8]
 8000c9c:	494d      	ldr	r1, [pc, #308]	; (8000dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d040      	beq.n	8000d30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d107      	bne.n	8000cc6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cb6:	4b47      	ldr	r3, [pc, #284]	; (8000dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d115      	bne.n	8000cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e07f      	b.n	8000dc6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	2b02      	cmp	r3, #2
 8000ccc:	d107      	bne.n	8000cde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cce:	4b41      	ldr	r3, [pc, #260]	; (8000dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d109      	bne.n	8000cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e073      	b.n	8000dc6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cde:	4b3d      	ldr	r3, [pc, #244]	; (8000dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f003 0302 	and.w	r3, r3, #2
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d101      	bne.n	8000cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e06b      	b.n	8000dc6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000cee:	4b39      	ldr	r3, [pc, #228]	; (8000dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	f023 0203 	bic.w	r2, r3, #3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	4936      	ldr	r1, [pc, #216]	; (8000dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000d00:	f7ff fa84 	bl	800020c <HAL_GetTick>
 8000d04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d06:	e00a      	b.n	8000d1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d08:	f7ff fa80 	bl	800020c <HAL_GetTick>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d901      	bls.n	8000d1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	e053      	b.n	8000dc6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d1e:	4b2d      	ldr	r3, [pc, #180]	; (8000dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f003 020c 	and.w	r2, r3, #12
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d1eb      	bne.n	8000d08 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000d30:	4b27      	ldr	r3, [pc, #156]	; (8000dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f003 0307 	and.w	r3, r3, #7
 8000d38:	683a      	ldr	r2, [r7, #0]
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	d210      	bcs.n	8000d60 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d3e:	4b24      	ldr	r3, [pc, #144]	; (8000dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f023 0207 	bic.w	r2, r3, #7
 8000d46:	4922      	ldr	r1, [pc, #136]	; (8000dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d4e:	4b20      	ldr	r3, [pc, #128]	; (8000dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f003 0307 	and.w	r3, r3, #7
 8000d56:	683a      	ldr	r2, [r7, #0]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d001      	beq.n	8000d60 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	e032      	b.n	8000dc6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f003 0304 	and.w	r3, r3, #4
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d008      	beq.n	8000d7e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d6c:	4b19      	ldr	r3, [pc, #100]	; (8000dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	4916      	ldr	r1, [pc, #88]	; (8000dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f003 0308 	and.w	r3, r3, #8
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d009      	beq.n	8000d9e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000d8a:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	691b      	ldr	r3, [r3, #16]
 8000d96:	00db      	lsls	r3, r3, #3
 8000d98:	490e      	ldr	r1, [pc, #56]	; (8000dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000d9e:	f000 f821 	bl	8000de4 <HAL_RCC_GetSysClockFreq>
 8000da2:	4601      	mov	r1, r0
 8000da4:	4b0b      	ldr	r3, [pc, #44]	; (8000dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	091b      	lsrs	r3, r3, #4
 8000daa:	f003 030f 	and.w	r3, r3, #15
 8000dae:	4a0a      	ldr	r2, [pc, #40]	; (8000dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8000db0:	5cd3      	ldrb	r3, [r2, r3]
 8000db2:	fa21 f303 	lsr.w	r3, r1, r3
 8000db6:	4a09      	ldr	r2, [pc, #36]	; (8000ddc <HAL_RCC_ClockConfig+0x1cc>)
 8000db8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000dba:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <HAL_RCC_ClockConfig+0x1d0>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff f9e2 	bl	8000188 <HAL_InitTick>

  return HAL_OK;
 8000dc4:	2300      	movs	r3, #0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3710      	adds	r7, #16
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40022000 	.word	0x40022000
 8000dd4:	40021000 	.word	0x40021000
 8000dd8:	08004fd8 	.word	0x08004fd8
 8000ddc:	2000002c 	.word	0x2000002c
 8000de0:	20000000 	.word	0x20000000

08000de4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000de4:	b490      	push	{r4, r7}
 8000de6:	b08a      	sub	sp, #40	; 0x28
 8000de8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000dea:	4b2a      	ldr	r3, [pc, #168]	; (8000e94 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000dec:	1d3c      	adds	r4, r7, #4
 8000dee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000df0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000df4:	4b28      	ldr	r3, [pc, #160]	; (8000e98 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000df6:	881b      	ldrh	r3, [r3, #0]
 8000df8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61fb      	str	r3, [r7, #28]
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61bb      	str	r3, [r7, #24]
 8000e02:	2300      	movs	r3, #0
 8000e04:	627b      	str	r3, [r7, #36]	; 0x24
 8000e06:	2300      	movs	r3, #0
 8000e08:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000e0e:	4b23      	ldr	r3, [pc, #140]	; (8000e9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	f003 030c 	and.w	r3, r3, #12
 8000e1a:	2b04      	cmp	r3, #4
 8000e1c:	d002      	beq.n	8000e24 <HAL_RCC_GetSysClockFreq+0x40>
 8000e1e:	2b08      	cmp	r3, #8
 8000e20:	d003      	beq.n	8000e2a <HAL_RCC_GetSysClockFreq+0x46>
 8000e22:	e02d      	b.n	8000e80 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000e24:	4b1e      	ldr	r3, [pc, #120]	; (8000ea0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000e26:	623b      	str	r3, [r7, #32]
      break;
 8000e28:	e02d      	b.n	8000e86 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	0c9b      	lsrs	r3, r3, #18
 8000e2e:	f003 030f 	and.w	r3, r3, #15
 8000e32:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e36:	4413      	add	r3, r2
 8000e38:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000e3c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d013      	beq.n	8000e70 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000e48:	4b14      	ldr	r3, [pc, #80]	; (8000e9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	0c5b      	lsrs	r3, r3, #17
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e56:	4413      	add	r3, r2
 8000e58:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000e5c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	4a0f      	ldr	r2, [pc, #60]	; (8000ea0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000e62:	fb02 f203 	mul.w	r2, r2, r3
 8000e66:	69bb      	ldr	r3, [r7, #24]
 8000e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24
 8000e6e:	e004      	b.n	8000e7a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	4a0c      	ldr	r2, [pc, #48]	; (8000ea4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000e74:	fb02 f303 	mul.w	r3, r2, r3
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8000e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7c:	623b      	str	r3, [r7, #32]
      break;
 8000e7e:	e002      	b.n	8000e86 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000e80:	4b07      	ldr	r3, [pc, #28]	; (8000ea0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000e82:	623b      	str	r3, [r7, #32]
      break;
 8000e84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000e86:	6a3b      	ldr	r3, [r7, #32]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3728      	adds	r7, #40	; 0x28
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bc90      	pop	{r4, r7}
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	08004c50 	.word	0x08004c50
 8000e98:	08004c60 	.word	0x08004c60
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	007a1200 	.word	0x007a1200
 8000ea4:	003d0900 	.word	0x003d0900

08000ea8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000eb0:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <RCC_Delay+0x34>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ee0 <RCC_Delay+0x38>)
 8000eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eba:	0a5b      	lsrs	r3, r3, #9
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	fb02 f303 	mul.w	r3, r2, r3
 8000ec2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8000ec4:	bf00      	nop
  }
  while (Delay --);
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	1e5a      	subs	r2, r3, #1
 8000eca:	60fa      	str	r2, [r7, #12]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d1f9      	bne.n	8000ec4 <RCC_Delay+0x1c>
}
 8000ed0:	bf00      	nop
 8000ed2:	3714      	adds	r7, #20
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bc80      	pop	{r7}
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	2000002c 	.word	0x2000002c
 8000ee0:	10624dd3 	.word	0x10624dd3

08000ee4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d101      	bne.n	8000ef6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e053      	b.n	8000f9e <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d106      	bne.n	8000f16 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f003 f817 	bl	8003f44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2202      	movs	r2, #2
 8000f1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000f2c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	685a      	ldr	r2, [r3, #4]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	431a      	orrs	r2, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	431a      	orrs	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	691b      	ldr	r3, [r3, #16]
 8000f42:	431a      	orrs	r2, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	695b      	ldr	r3, [r3, #20]
 8000f48:	431a      	orrs	r2, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	699b      	ldr	r3, [r3, #24]
 8000f4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f52:	431a      	orrs	r2, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	69db      	ldr	r3, [r3, #28]
 8000f58:	431a      	orrs	r2, r3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6a1b      	ldr	r3, [r3, #32]
 8000f5e:	ea42 0103 	orr.w	r1, r2, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	430a      	orrs	r2, r1
 8000f6c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	699b      	ldr	r3, [r3, #24]
 8000f72:	0c1a      	lsrs	r2, r3, #16
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f002 0204 	and.w	r2, r2, #4
 8000f7c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	69da      	ldr	r2, [r3, #28]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f8c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2201      	movs	r2, #1
 8000f98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8000f9c:	2300      	movs	r3, #0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b08c      	sub	sp, #48	; 0x30
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	60f8      	str	r0, [r7, #12]
 8000fae:	60b9      	str	r1, [r7, #8]
 8000fb0:	607a      	str	r2, [r7, #4]
 8000fb2:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d101      	bne.n	8000fcc <HAL_SPI_TransmitReceive+0x26>
 8000fc8:	2302      	movs	r3, #2
 8000fca:	e18a      	b.n	80012e2 <HAL_SPI_TransmitReceive+0x33c>
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	2201      	movs	r2, #1
 8000fd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8000fd4:	f7ff f91a 	bl	800020c <HAL_GetTick>
 8000fd8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000fe0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8000fea:	887b      	ldrh	r3, [r7, #2]
 8000fec:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8000fee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d00f      	beq.n	8001016 <HAL_SPI_TransmitReceive+0x70>
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8000ffc:	d107      	bne.n	800100e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d103      	bne.n	800100e <HAL_SPI_TransmitReceive+0x68>
 8001006:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800100a:	2b04      	cmp	r3, #4
 800100c:	d003      	beq.n	8001016 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800100e:	2302      	movs	r3, #2
 8001010:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001014:	e15b      	b.n	80012ce <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d005      	beq.n	8001028 <HAL_SPI_TransmitReceive+0x82>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d002      	beq.n	8001028 <HAL_SPI_TransmitReceive+0x82>
 8001022:	887b      	ldrh	r3, [r7, #2]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d103      	bne.n	8001030 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001028:	2301      	movs	r3, #1
 800102a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800102e:	e14e      	b.n	80012ce <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001036:	b2db      	uxtb	r3, r3
 8001038:	2b04      	cmp	r3, #4
 800103a:	d003      	beq.n	8001044 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	2205      	movs	r2, #5
 8001040:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	2200      	movs	r2, #0
 8001048:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	887a      	ldrh	r2, [r7, #2]
 8001054:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	887a      	ldrh	r2, [r7, #2]
 800105a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	68ba      	ldr	r2, [r7, #8]
 8001060:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	887a      	ldrh	r2, [r7, #2]
 8001066:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	887a      	ldrh	r2, [r7, #2]
 800106c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	2200      	movs	r2, #0
 8001072:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	2200      	movs	r2, #0
 8001078:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001084:	2b40      	cmp	r3, #64	; 0x40
 8001086:	d007      	beq.n	8001098 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001096:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80010a0:	d178      	bne.n	8001194 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d002      	beq.n	80010b0 <HAL_SPI_TransmitReceive+0x10a>
 80010aa:	8b7b      	ldrh	r3, [r7, #26]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d166      	bne.n	800117e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b4:	881a      	ldrh	r2, [r3, #0]
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c0:	1c9a      	adds	r2, r3, #2
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	3b01      	subs	r3, #1
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80010d4:	e053      	b.n	800117e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	f003 0302 	and.w	r3, r3, #2
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d11b      	bne.n	800111c <HAL_SPI_TransmitReceive+0x176>
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d016      	beq.n	800111c <HAL_SPI_TransmitReceive+0x176>
 80010ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d113      	bne.n	800111c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f8:	881a      	ldrh	r2, [r3, #0]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001104:	1c9a      	adds	r2, r3, #2
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800110e:	b29b      	uxth	r3, r3
 8001110:	3b01      	subs	r3, #1
 8001112:	b29a      	uxth	r2, r3
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001118:	2300      	movs	r3, #0
 800111a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	2b01      	cmp	r3, #1
 8001128:	d119      	bne.n	800115e <HAL_SPI_TransmitReceive+0x1b8>
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800112e:	b29b      	uxth	r3, r3
 8001130:	2b00      	cmp	r3, #0
 8001132:	d014      	beq.n	800115e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	68da      	ldr	r2, [r3, #12]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800113e:	b292      	uxth	r2, r2
 8001140:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001146:	1c9a      	adds	r2, r3, #2
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001150:	b29b      	uxth	r3, r3
 8001152:	3b01      	subs	r3, #1
 8001154:	b29a      	uxth	r2, r3
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800115a:	2301      	movs	r3, #1
 800115c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800115e:	f7ff f855 	bl	800020c <HAL_GetTick>
 8001162:	4602      	mov	r2, r0
 8001164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800116a:	429a      	cmp	r2, r3
 800116c:	d807      	bhi.n	800117e <HAL_SPI_TransmitReceive+0x1d8>
 800116e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001170:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001174:	d003      	beq.n	800117e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001176:	2303      	movs	r3, #3
 8001178:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800117c:	e0a7      	b.n	80012ce <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001182:	b29b      	uxth	r3, r3
 8001184:	2b00      	cmp	r3, #0
 8001186:	d1a6      	bne.n	80010d6 <HAL_SPI_TransmitReceive+0x130>
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800118c:	b29b      	uxth	r3, r3
 800118e:	2b00      	cmp	r3, #0
 8001190:	d1a1      	bne.n	80010d6 <HAL_SPI_TransmitReceive+0x130>
 8001192:	e07c      	b.n	800128e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d002      	beq.n	80011a2 <HAL_SPI_TransmitReceive+0x1fc>
 800119c:	8b7b      	ldrh	r3, [r7, #26]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d16b      	bne.n	800127a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	330c      	adds	r3, #12
 80011ac:	7812      	ldrb	r2, [r2, #0]
 80011ae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b4:	1c5a      	adds	r2, r3, #1
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80011be:	b29b      	uxth	r3, r3
 80011c0:	3b01      	subs	r3, #1
 80011c2:	b29a      	uxth	r2, r3
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80011c8:	e057      	b.n	800127a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	f003 0302 	and.w	r3, r3, #2
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d11c      	bne.n	8001212 <HAL_SPI_TransmitReceive+0x26c>
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80011dc:	b29b      	uxth	r3, r3
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d017      	beq.n	8001212 <HAL_SPI_TransmitReceive+0x26c>
 80011e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d114      	bne.n	8001212 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	330c      	adds	r3, #12
 80011f2:	7812      	ldrb	r2, [r2, #0]
 80011f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	1c5a      	adds	r2, r3, #1
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001204:	b29b      	uxth	r3, r3
 8001206:	3b01      	subs	r3, #1
 8001208:	b29a      	uxth	r2, r3
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800120e:	2300      	movs	r3, #0
 8001210:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	f003 0301 	and.w	r3, r3, #1
 800121c:	2b01      	cmp	r3, #1
 800121e:	d119      	bne.n	8001254 <HAL_SPI_TransmitReceive+0x2ae>
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001224:	b29b      	uxth	r3, r3
 8001226:	2b00      	cmp	r3, #0
 8001228:	d014      	beq.n	8001254 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	68da      	ldr	r2, [r3, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001234:	b2d2      	uxtb	r2, r2
 8001236:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800123c:	1c5a      	adds	r2, r3, #1
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001246:	b29b      	uxth	r3, r3
 8001248:	3b01      	subs	r3, #1
 800124a:	b29a      	uxth	r2, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001250:	2301      	movs	r3, #1
 8001252:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001254:	f7fe ffda 	bl	800020c <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001260:	429a      	cmp	r2, r3
 8001262:	d803      	bhi.n	800126c <HAL_SPI_TransmitReceive+0x2c6>
 8001264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001266:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800126a:	d102      	bne.n	8001272 <HAL_SPI_TransmitReceive+0x2cc>
 800126c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800126e:	2b00      	cmp	r3, #0
 8001270:	d103      	bne.n	800127a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001278:	e029      	b.n	80012ce <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800127e:	b29b      	uxth	r3, r3
 8001280:	2b00      	cmp	r3, #0
 8001282:	d1a2      	bne.n	80011ca <HAL_SPI_TransmitReceive+0x224>
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001288:	b29b      	uxth	r3, r3
 800128a:	2b00      	cmp	r3, #0
 800128c:	d19d      	bne.n	80011ca <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800128e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001290:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001292:	68f8      	ldr	r0, [r7, #12]
 8001294:	f000 f893 	bl	80013be <SPI_EndRxTxTransaction>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d006      	beq.n	80012ac <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	2220      	movs	r2, #32
 80012a8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80012aa:	e010      	b.n	80012ce <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d10b      	bne.n	80012cc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	617b      	str	r3, [r7, #20]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	617b      	str	r3, [r7, #20]
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	e000      	b.n	80012ce <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80012cc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	2201      	movs	r2, #1
 80012d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	2200      	movs	r2, #0
 80012da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80012de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3730      	adds	r7, #48	; 0x30
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b084      	sub	sp, #16
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	60f8      	str	r0, [r7, #12]
 80012f2:	60b9      	str	r1, [r7, #8]
 80012f4:	603b      	str	r3, [r7, #0]
 80012f6:	4613      	mov	r3, r2
 80012f8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80012fa:	e04c      	b.n	8001396 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001302:	d048      	beq.n	8001396 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001304:	f7fe ff82 	bl	800020c <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	683a      	ldr	r2, [r7, #0]
 8001310:	429a      	cmp	r2, r3
 8001312:	d902      	bls.n	800131a <SPI_WaitFlagStateUntilTimeout+0x30>
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d13d      	bne.n	8001396 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	685a      	ldr	r2, [r3, #4]
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001328:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001332:	d111      	bne.n	8001358 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800133c:	d004      	beq.n	8001348 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001346:	d107      	bne.n	8001358 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001356:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800135c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001360:	d10f      	bne.n	8001382 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001380:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	2201      	movs	r2, #1
 8001386:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e00f      	b.n	80013b6 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	689a      	ldr	r2, [r3, #8]
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	4013      	ands	r3, r2
 80013a0:	68ba      	ldr	r2, [r7, #8]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	bf0c      	ite	eq
 80013a6:	2301      	moveq	r3, #1
 80013a8:	2300      	movne	r3, #0
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	461a      	mov	r2, r3
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d1a3      	bne.n	80012fc <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b086      	sub	sp, #24
 80013c2:	af02      	add	r7, sp, #8
 80013c4:	60f8      	str	r0, [r7, #12]
 80013c6:	60b9      	str	r1, [r7, #8]
 80013c8:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	9300      	str	r3, [sp, #0]
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	2200      	movs	r2, #0
 80013d2:	2180      	movs	r1, #128	; 0x80
 80013d4:	68f8      	ldr	r0, [r7, #12]
 80013d6:	f7ff ff88 	bl	80012ea <SPI_WaitFlagStateUntilTimeout>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d007      	beq.n	80013f0 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013e4:	f043 0220 	orr.w	r2, r3, #32
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e000      	b.n	80013f2 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <ES_enc28j60SpiInit>:

/**
 * Initialise SPI, separate from main initialisation so that
 * multiple SPI devices can be used together
 */
void ES_enc28j60SpiInit(SPI_HandleTypeDef *hspi){
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b082      	sub	sp, #8
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
//  ENC28J60_SPI1_Configuration();
	enc28j60_set_spi(hspi);
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f000 fbe4 	bl	8001bd0 <enc28j60_set_spi>
}
 8001408:	bf00      	nop
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <ES_enc28j60Init>:

/**
 * Initialise the ENC28J60 using default chip select pin
 * Flash the 2 MagJack LEDs
 */
void ES_enc28j60Init( uint8_t* macaddr ) {
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /*initialize enc28j60*/
  enc28j60Init( macaddr );
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f000 fdcd 	bl	8001fb8 <enc28j60Init>
  enc28j60clkout(2); // change clkout from 6.25MHz to 12.5MHz
 800141e:	2002      	movs	r0, #2
 8001420:	f000 fdb9 	bl	8001f96 <enc28j60clkout>
  HAL_Delay(10);
 8001424:	200a      	movs	r0, #10
 8001426:	f7fe fefb 	bl	8000220 <HAL_Delay>

  int f;
  for( f=0; f<3; f++ ) {
 800142a:	2300      	movs	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	e014      	b.n	800145a <ES_enc28j60Init+0x4a>
  	// 0x880 is PHLCON LEDB=on, LEDA=on
  	// enc28j60PhyWrite(PHLCON,0b0011 1000 1000 00 00);
  	enc28j60PhyWrite(PHLCON,0x3880);
 8001430:	f44f 5162 	mov.w	r1, #14464	; 0x3880
 8001434:	2014      	movs	r0, #20
 8001436:	f000 fd83 	bl	8001f40 <enc28j60PhyWrite>
  	HAL_Delay(500);
 800143a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800143e:	f7fe feef 	bl	8000220 <HAL_Delay>

  	// 0x990 is PHLCON LEDB=off, LEDA=off
  	// enc28j60PhyWrite(PHLCON,0b0011 1001 1001 00 00);
  	enc28j60PhyWrite(PHLCON,0x3990);
 8001442:	f643 1190 	movw	r1, #14736	; 0x3990
 8001446:	2014      	movs	r0, #20
 8001448:	f000 fd7a 	bl	8001f40 <enc28j60PhyWrite>
  	HAL_Delay(500);
 800144c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001450:	f7fe fee6 	bl	8000220 <HAL_Delay>
  for( f=0; f<3; f++ ) {
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	3301      	adds	r3, #1
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	2b02      	cmp	r3, #2
 800145e:	dde7      	ble.n	8001430 <ES_enc28j60Init+0x20>
  }

  // 0x476 is PHLCON LEDA=links status, LEDB=receive/transmit
  // enc28j60PhyWrite(PHLCON,0b0011 0100 0111 01 10);
  enc28j60PhyWrite(PHLCON,0x3476);
 8001460:	f243 4176 	movw	r1, #13430	; 0x3476
 8001464:	2014      	movs	r0, #20
 8001466:	f000 fd6b 	bl	8001f40 <enc28j60PhyWrite>
  HAL_Delay(100);
 800146a:	2064      	movs	r0, #100	; 0x64
 800146c:	f7fe fed8 	bl	8000220 <HAL_Delay>
}
 8001470:	bf00      	nop
 8001472:	3710      	adds	r7, #16
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <ES_enc28j60Revision>:

uint8_t ES_enc28j60Read( uint8_t address ) {
	return enc28j60Read( address );
}

uint8_t ES_enc28j60Revision(void) {
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
	return enc28j60getrev();
 800147c:	f000 fe42 	bl	8002104 <enc28j60getrev>
 8001480:	4603      	mov	r3, r0
}
 8001482:	4618      	mov	r0, r3
 8001484:	bd80      	pop	{r7, pc}

08001486 <ES_enc28j60PacketReceive>:

void ES_enc28j60PhyWrite(uint8_t address, uint16_t data){
	enc28j60PhyWrite(address,  data);
}

uint16_t ES_enc28j60PacketReceive(uint16_t len, uint8_t* packet){
 8001486:	b580      	push	{r7, lr}
 8001488:	b082      	sub	sp, #8
 800148a:	af00      	add	r7, sp, #0
 800148c:	4603      	mov	r3, r0
 800148e:	6039      	str	r1, [r7, #0]
 8001490:	80fb      	strh	r3, [r7, #6]
	return enc28j60PacketReceive(len, packet);
 8001492:	88fb      	ldrh	r3, [r7, #6]
 8001494:	6839      	ldr	r1, [r7, #0]
 8001496:	4618      	mov	r0, r3
 8001498:	f000 fec0 	bl	800221c <enc28j60PacketReceive>
 800149c:	4603      	mov	r3, r0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <ES_packetloop_icmp_tcp>:

uint16_t ES_get_tcp_data_pointer(void) {
	return get_tcp_data_pointer();
}

uint16_t ES_packetloop_icmp_tcp(uint8_t *buf,uint16_t plen) {
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b082      	sub	sp, #8
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
 80014ae:	460b      	mov	r3, r1
 80014b0:	807b      	strh	r3, [r7, #2]
	return packetloop_icmp_tcp(buf,plen);
 80014b2:	887b      	ldrh	r3, [r7, #2]
 80014b4:	4619      	mov	r1, r3
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f001 fde8 	bl	800308c <packetloop_icmp_tcp>
 80014bc:	4603      	mov	r3, r0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <ES_fill_tcp_data>:

/*uint16_t ES_fill_tcp_data_p(uint8_t *buf,uint16_t pos, const prog_char *progmem_s){
	return fill_tcp_data_p(buf, pos, progmem_s);
}*/

uint16_t ES_fill_tcp_data(uint8_t *buf,uint16_t pos, const char *s){
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b084      	sub	sp, #16
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	60f8      	str	r0, [r7, #12]
 80014ce:	460b      	mov	r3, r1
 80014d0:	607a      	str	r2, [r7, #4]
 80014d2:	817b      	strh	r3, [r7, #10]
	return fill_tcp_data(buf,pos, s);
 80014d4:	897b      	ldrh	r3, [r7, #10]
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	4619      	mov	r1, r3
 80014da:	68f8      	ldr	r0, [r7, #12]
 80014dc:	f001 fa66 	bl	80029ac <fill_tcp_data>
 80014e0:	4603      	mov	r3, r0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <ES_www_server_reply>:

uint16_t ES_fill_tcp_data_len(uint8_t *buf,uint16_t pos, const char *s, uint16_t len ){
	return fill_tcp_data_len(buf,pos, s, len);
}

void ES_www_server_reply(uint8_t *buf,uint16_t dlen) {
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b082      	sub	sp, #8
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
 80014f2:	460b      	mov	r3, r1
 80014f4:	807b      	strh	r3, [r7, #2]
	www_server_reply(buf,dlen);
 80014f6:	887b      	ldrh	r3, [r7, #2]
 80014f8:	4619      	mov	r1, r3
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f001 fb0e 	bl	8002b1c <www_server_reply>
}
 8001500:	bf00      	nop
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <allocateIPAddress>:

// Utility functions 

// Perform all processing to get an IP address plus other addresses returned, e.g. gw, dns, dhcp server.
// Returns 1 for successful IP address allocation, 0 otherwise
uint8_t allocateIPAddress(uint8_t *buf, uint16_t buffer_size, uint8_t *mymac, uint16_t myport, uint8_t *myip, uint8_t *mynetmask, uint8_t *gwip, uint8_t *dnsip, uint8_t *dhcpsvrip ) {
 8001508:	b580      	push	{r7, lr}
 800150a:	b08c      	sub	sp, #48	; 0x30
 800150c:	af04      	add	r7, sp, #16
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	607a      	str	r2, [r7, #4]
 8001512:	461a      	mov	r2, r3
 8001514:	460b      	mov	r3, r1
 8001516:	817b      	strh	r3, [r7, #10]
 8001518:	4613      	mov	r3, r2
 800151a:	813b      	strh	r3, [r7, #8]
  uint16_t dat_p;
  int plen = 0;
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]
  long lastDhcpRequest = HAL_GetTick();
 8001520:	f7fe fe74 	bl	800020c <HAL_GetTick>
 8001524:	4603      	mov	r3, r0
 8001526:	61fb      	str	r3, [r7, #28]
  uint8_t dhcpState = 0;
 8001528:	2300      	movs	r3, #0
 800152a:	74fb      	strb	r3, [r7, #19]
  bool gotIp = FALSE;
 800152c:	2300      	movs	r3, #0
 800152e:	76fb      	strb	r3, [r7, #27]
  uint8_t dhcpTries = 10;	// After 10 attempts fail gracefully so other action can be carried out
 8001530:	230a      	movs	r3, #10
 8001532:	76bb      	strb	r3, [r7, #26]

  dhcp_start( buf, mymac, myip, mynetmask,gwip, dnsip, dhcpsvrip );
 8001534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001536:	9302      	str	r3, [sp, #8]
 8001538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800153a:	9301      	str	r3, [sp, #4]
 800153c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001542:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001544:	6879      	ldr	r1, [r7, #4]
 8001546:	68f8      	ldr	r0, [r7, #12]
 8001548:	f000 f894 	bl	8001674 <dhcp_start>

  while( !gotIp ) {
 800154c:	e054      	b.n	80015f8 <allocateIPAddress+0xf0>
    // handle ping and wait for a tcp packet
    plen = enc28j60PacketReceive(buffer_size, buf);
 800154e:	897b      	ldrh	r3, [r7, #10]
 8001550:	68f9      	ldr	r1, [r7, #12]
 8001552:	4618      	mov	r0, r3
 8001554:	f000 fe62 	bl	800221c <enc28j60PacketReceive>
 8001558:	4603      	mov	r3, r0
 800155a:	617b      	str	r3, [r7, #20]
    dat_p=packetloop_icmp_tcp(buf,plen);
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	b29b      	uxth	r3, r3
 8001560:	4619      	mov	r1, r3
 8001562:	68f8      	ldr	r0, [r7, #12]
 8001564:	f001 fd92 	bl	800308c <packetloop_icmp_tcp>
 8001568:	4603      	mov	r3, r0
 800156a:	823b      	strh	r3, [r7, #16]
    if(dat_p==0) {
 800156c:	8a3b      	ldrh	r3, [r7, #16]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d142      	bne.n	80015f8 <allocateIPAddress+0xf0>
      check_for_dhcp_answer( buf, plen);
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	b29b      	uxth	r3, r3
 8001576:	4619      	mov	r1, r3
 8001578:	68f8      	ldr	r0, [r7, #12]
 800157a:	f000 fa29 	bl	80019d0 <check_for_dhcp_answer>
      dhcpState = dhcp_state();
 800157e:	f000 f85b 	bl	8001638 <dhcp_state>
 8001582:	4603      	mov	r3, r0
 8001584:	74fb      	strb	r3, [r7, #19]
      // we are idle here
      if( dhcpState != DHCP_STATE_OK ) {
 8001586:	7cfb      	ldrb	r3, [r7, #19]
 8001588:	2b05      	cmp	r3, #5
 800158a:	d021      	beq.n	80015d0 <allocateIPAddress+0xc8>
        if (HAL_GetTick() > (lastDhcpRequest + 10000L) ){
 800158c:	f7fe fe3e 	bl	800020c <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001598:	3310      	adds	r3, #16
 800159a:	429a      	cmp	r2, r3
 800159c:	d92c      	bls.n	80015f8 <allocateIPAddress+0xf0>
          lastDhcpRequest = HAL_GetTick();
 800159e:	f7fe fe35 	bl	800020c <HAL_GetTick>
 80015a2:	4603      	mov	r3, r0
 80015a4:	61fb      	str	r3, [r7, #28]
	  if( --dhcpTries <= 0 ) 
 80015a6:	7ebb      	ldrb	r3, [r7, #26]
 80015a8:	3b01      	subs	r3, #1
 80015aa:	76bb      	strb	r3, [r7, #26]
 80015ac:	7ebb      	ldrb	r3, [r7, #26]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d101      	bne.n	80015b6 <allocateIPAddress+0xae>
		  return 0;		// Failed to allocate address
 80015b2:	2300      	movs	r3, #0
 80015b4:	e027      	b.n	8001606 <allocateIPAddress+0xfe>
          // send dhcp
          dhcp_start( buf, mymac, myip, mynetmask,gwip, dnsip, dhcpsvrip );
 80015b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015b8:	9302      	str	r3, [sp, #8]
 80015ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015bc:	9301      	str	r3, [sp, #4]
 80015be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015c0:	9300      	str	r3, [sp, #0]
 80015c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	68f8      	ldr	r0, [r7, #12]
 80015ca:	f000 f853 	bl	8001674 <dhcp_start>
 80015ce:	e013      	b.n	80015f8 <allocateIPAddress+0xf0>
        }
      } else {
        if( !gotIp ) {
 80015d0:	7efb      	ldrb	r3, [r7, #27]
 80015d2:	f083 0301 	eor.w	r3, r3, #1
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d00d      	beq.n	80015f8 <allocateIPAddress+0xf0>
          gotIp = TRUE;
 80015dc:	2301      	movs	r3, #1
 80015de:	76fb      	strb	r3, [r7, #27]

          //init the ethernet/ip layer:
          init_ip_arp_udp_tcp(mymac, myip, myport);
 80015e0:	893b      	ldrh	r3, [r7, #8]
 80015e2:	461a      	mov	r2, r3
 80015e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f000 fece 	bl	8002388 <init_ip_arp_udp_tcp>

          // Set the Router IP
          client_set_gwip(gwip);  // e.g internal IP of dsl router
 80015ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80015ee:	f001 fc4d 	bl	8002e8c <client_set_gwip>

#ifdef DNS_client
          // Set the DNS server IP address if required, or use default
          dnslkup_set_dnsip( dnsip );
 80015f2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80015f4:	f000 fad0 	bl	8001b98 <dnslkup_set_dnsip>
  while( !gotIp ) {
 80015f8:	7efb      	ldrb	r3, [r7, #27]
 80015fa:	f083 0301 	eor.w	r3, r3, #1
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	2b00      	cmp	r3, #0
 8001602:	d1a4      	bne.n	800154e <allocateIPAddress+0x46>
        }
      }
    }
  }

  return 1;
 8001604:	2301      	movs	r3, #1

}
 8001606:	4618      	mov	r0, r3
 8001608:	3720      	adds	r7, #32
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <addToBuf>:
uint16_t currentSecs = 0;
static uint32_t leaseStart = 0;
static uint32_t leaseTime = 0;
static uint8_t* bufPtr;

static void addToBuf(uint8_t b) {
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	71fb      	strb	r3, [r7, #7]
    *bufPtr++ = b;
 800161a:	4b06      	ldr	r3, [pc, #24]	; (8001634 <addToBuf+0x24>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	1c5a      	adds	r2, r3, #1
 8001620:	4904      	ldr	r1, [pc, #16]	; (8001634 <addToBuf+0x24>)
 8001622:	600a      	str	r2, [r1, #0]
 8001624:	79fa      	ldrb	r2, [r7, #7]
 8001626:	701a      	strb	r2, [r3, #0]
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	20000238 	.word	0x20000238

08001638 <dhcp_state>:

uint8_t dhcp_state(void)
{
 8001638:	b598      	push	{r3, r4, r7, lr}
 800163a:	af00      	add	r7, sp, #0
        // Check lease and request renew if currently OK and time
        // leaseStart - start time in millis
        // leaseTime - length of lease in millis
        //
        if( dhcpState == DHCP_STATE_OK && (leaseStart + leaseTime) <= HAL_GetTick() ) {
 800163c:	4b0a      	ldr	r3, [pc, #40]	; (8001668 <dhcp_state+0x30>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b05      	cmp	r3, #5
 8001642:	d10c      	bne.n	800165e <dhcp_state+0x26>
 8001644:	4b09      	ldr	r3, [pc, #36]	; (800166c <dhcp_state+0x34>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	4b09      	ldr	r3, [pc, #36]	; (8001670 <dhcp_state+0x38>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	18d4      	adds	r4, r2, r3
 800164e:	f7fe fddd 	bl	800020c <HAL_GetTick>
 8001652:	4603      	mov	r3, r0
 8001654:	429c      	cmp	r4, r3
 8001656:	d802      	bhi.n	800165e <dhcp_state+0x26>
                // Calling app needs to detect this and init renewal
                dhcpState = DHCP_STATE_RENEW;
 8001658:	4b03      	ldr	r3, [pc, #12]	; (8001668 <dhcp_state+0x30>)
 800165a:	2206      	movs	r2, #6
 800165c:	701a      	strb	r2, [r3, #0]
        }
        return(dhcpState);
 800165e:	4b02      	ldr	r3, [pc, #8]	; (8001668 <dhcp_state+0x30>)
 8001660:	781b      	ldrb	r3, [r3, #0]
}
 8001662:	4618      	mov	r0, r3
 8001664:	bd98      	pop	{r3, r4, r7, pc}
 8001666:	bf00      	nop
 8001668:	2000021d 	.word	0x2000021d
 800166c:	20000230 	.word	0x20000230
 8001670:	20000234 	.word	0x20000234

08001674 <dhcp_start>:
// Wait for DHCPACK
// All configured
void dhcp_start(uint8_t *buf, uint8_t *macaddrin, uint8_t *ipaddrin,
                uint8_t *maskin, uint8_t *gwipin, uint8_t *dhcpsvrin,
                uint8_t *dnssvrin )
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
 8001680:	603b      	str	r3, [r7, #0]
        macaddr = macaddrin;
 8001682:	4a2a      	ldr	r2, [pc, #168]	; (800172c <dhcp_start+0xb8>)
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	6013      	str	r3, [r2, #0]
        dhcpip = ipaddrin;
 8001688:	4a29      	ldr	r2, [pc, #164]	; (8001730 <dhcp_start+0xbc>)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6013      	str	r3, [r2, #0]
        dhcpmask = maskin;
 800168e:	4a29      	ldr	r2, [pc, #164]	; (8001734 <dhcp_start+0xc0>)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	6013      	str	r3, [r2, #0]
        gwaddr = gwipin;
 8001694:	4a28      	ldr	r2, [pc, #160]	; (8001738 <dhcp_start+0xc4>)
 8001696:	6a3b      	ldr	r3, [r7, #32]
 8001698:	6013      	str	r3, [r2, #0]
        dhcpserver = dhcpsvrin;
 800169a:	4a28      	ldr	r2, [pc, #160]	; (800173c <dhcp_start+0xc8>)
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	6013      	str	r3, [r2, #0]
        dnsserver = dnssvrin;
 80016a0:	4a27      	ldr	r2, [pc, #156]	; (8001740 <dhcp_start+0xcc>)
 80016a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016a4:	6013      	str	r3, [r2, #0]
        /*srand(analogRead(0));*/ srand(0x13);
 80016a6:	2013      	movs	r0, #19
 80016a8:	f002 fdac 	bl	8004204 <srand>
        currentXid = 0x00654321 + rand();
 80016ac:	f002 fdce 	bl	800424c <rand>
 80016b0:	4602      	mov	r2, r0
 80016b2:	4b24      	ldr	r3, [pc, #144]	; (8001744 <dhcp_start+0xd0>)
 80016b4:	4413      	add	r3, r2
 80016b6:	461a      	mov	r2, r3
 80016b8:	4b23      	ldr	r3, [pc, #140]	; (8001748 <dhcp_start+0xd4>)
 80016ba:	601a      	str	r2, [r3, #0]
        currentSecs = 0;
 80016bc:	4b23      	ldr	r3, [pc, #140]	; (800174c <dhcp_start+0xd8>)
 80016be:	2200      	movs	r2, #0
 80016c0:	801a      	strh	r2, [r3, #0]
        int n;
        for( n=0; n<4; n++ ) {
 80016c2:	2300      	movs	r3, #0
 80016c4:	617b      	str	r3, [r7, #20]
 80016c6:	e020      	b.n	800170a <dhcp_start+0x96>
          dhcpip[n] = 0;
 80016c8:	4b19      	ldr	r3, [pc, #100]	; (8001730 <dhcp_start+0xbc>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	4413      	add	r3, r2
 80016d0:	2200      	movs	r2, #0
 80016d2:	701a      	strb	r2, [r3, #0]
          dhcpmask[n] = 0;
 80016d4:	4b17      	ldr	r3, [pc, #92]	; (8001734 <dhcp_start+0xc0>)
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	4413      	add	r3, r2
 80016dc:	2200      	movs	r2, #0
 80016de:	701a      	strb	r2, [r3, #0]
          gwaddr[n] = 0;
 80016e0:	4b15      	ldr	r3, [pc, #84]	; (8001738 <dhcp_start+0xc4>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	4413      	add	r3, r2
 80016e8:	2200      	movs	r2, #0
 80016ea:	701a      	strb	r2, [r3, #0]
          dhcpserver[n] = 0;
 80016ec:	4b13      	ldr	r3, [pc, #76]	; (800173c <dhcp_start+0xc8>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	4413      	add	r3, r2
 80016f4:	2200      	movs	r2, #0
 80016f6:	701a      	strb	r2, [r3, #0]
          dnsserver[n] = 0;
 80016f8:	4b11      	ldr	r3, [pc, #68]	; (8001740 <dhcp_start+0xcc>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	4413      	add	r3, r2
 8001700:	2200      	movs	r2, #0
 8001702:	701a      	strb	r2, [r3, #0]
        for( n=0; n<4; n++ ) {
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	3301      	adds	r3, #1
 8001708:	617b      	str	r3, [r7, #20]
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	2b03      	cmp	r3, #3
 800170e:	dddb      	ble.n	80016c8 <dhcp_start+0x54>
        }

        // Reception of broadcast packets turned off by default, but
        // it has been shown that some routers send responses as
        // broadcasts. Enable here and disable later
        enc28j60EnableBroadcast();
 8001710:	f000 fd0c 	bl	800212c <enc28j60EnableBroadcast>
        dhcp_send( buf, DHCPDISCOVER );
 8001714:	2101      	movs	r1, #1
 8001716:	68f8      	ldr	r0, [r7, #12]
 8001718:	f000 f82e 	bl	8001778 <dhcp_send>
        dhcpState = DHCP_STATE_DISCOVER;
 800171c:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <dhcp_start+0xdc>)
 800171e:	2201      	movs	r2, #1
 8001720:	701a      	strb	r2, [r3, #0]
}
 8001722:	bf00      	nop
 8001724:	3718      	adds	r7, #24
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20000220 	.word	0x20000220
 8001730:	200004c4 	.word	0x200004c4
 8001734:	200004d0 	.word	0x200004d0
 8001738:	200004cc 	.word	0x200004cc
 800173c:	200004c8 	.word	0x200004c8
 8001740:	200004c0 	.word	0x200004c0
 8001744:	00654321 	.word	0x00654321
 8001748:	20000228 	.word	0x20000228
 800174c:	2000022c 	.word	0x2000022c
 8001750:	2000021d 	.word	0x2000021d

08001754 <dhcp_request_ip>:

void dhcp_request_ip(uint8_t *buf )
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
        dhcp_send( buf, DHCPREQUEST );
 800175c:	2103      	movs	r1, #3
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f000 f80a 	bl	8001778 <dhcp_send>
        dhcpState = DHCP_STATE_REQUEST;
 8001764:	4b03      	ldr	r3, [pc, #12]	; (8001774 <dhcp_request_ip+0x20>)
 8001766:	2203      	movs	r2, #3
 8001768:	701a      	strb	r2, [r3, #0]
}
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	2000021d 	.word	0x2000021d

08001778 <dhcp_send>:


// Main DHCP message sending function, either DHCPDISCOVER or DHCPREQUEST
void dhcp_send(uint8_t *buf, uint8_t requestType ) {
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	460b      	mov	r3, r1
 8001782:	70fb      	strb	r3, [r7, #3]
        int i=0;
 8001784:	2300      	movs	r3, #0
 8001786:	60fb      	str	r3, [r7, #12]
        haveDhcpAnswer=0;
 8001788:	4b87      	ldr	r3, [pc, #540]	; (80019a8 <dhcp_send+0x230>)
 800178a:	2200      	movs	r2, #0
 800178c:	701a      	strb	r2, [r3, #0]
        dhcp_ansError=0;
 800178e:	4b87      	ldr	r3, [pc, #540]	; (80019ac <dhcp_send+0x234>)
 8001790:	2200      	movs	r2, #0
 8001792:	701a      	strb	r2, [r3, #0]
        dhcptid_l++; // increment for next request, finally wrap
 8001794:	4b86      	ldr	r3, [pc, #536]	; (80019b0 <dhcp_send+0x238>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	3301      	adds	r3, #1
 800179a:	b2da      	uxtb	r2, r3
 800179c:	4b84      	ldr	r3, [pc, #528]	; (80019b0 <dhcp_send+0x238>)
 800179e:	701a      	strb	r2, [r3, #0]
        // destination IP gets replaced after this call
       
        memset(buf, 0, 400); //XXX OUCH!   
 80017a0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80017a4:	2100      	movs	r1, #0
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f002 fd23 	bl	80041f2 <memset>
        send_udp_prepare(buf,(DHCPCLIENT_SRC_PORT_H<<8)|(dhcptid_l&0xff),dhcpip,DHCP_DEST_PORT);
 80017ac:	4b80      	ldr	r3, [pc, #512]	; (80019b0 <dhcp_send+0x238>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	b21b      	sxth	r3, r3
 80017b2:	ea6f 43c3 	mvn.w	r3, r3, lsl #19
 80017b6:	ea6f 43d3 	mvn.w	r3, r3, lsr #19
 80017ba:	b21b      	sxth	r3, r3
 80017bc:	b299      	uxth	r1, r3
 80017be:	4b7d      	ldr	r3, [pc, #500]	; (80019b4 <dhcp_send+0x23c>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	2344      	movs	r3, #68	; 0x44
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f001 f9e5 	bl	8002b94 <send_udp_prepare>

        memcpy(buf + ETH_SRC_MAC, macaddr, 6);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	1d98      	adds	r0, r3, #6
 80017ce:	4b7a      	ldr	r3, [pc, #488]	; (80019b8 <dhcp_send+0x240>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2206      	movs	r2, #6
 80017d4:	4619      	mov	r1, r3
 80017d6:	f002 fd01 	bl	80041dc <memcpy>
        memset(buf + ETH_DST_MAC, 0xFF, 6);
 80017da:	2206      	movs	r2, #6
 80017dc:	21ff      	movs	r1, #255	; 0xff
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f002 fd07 	bl	80041f2 <memset>
        buf[IP_TOTLEN_L_P]=0x82;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3311      	adds	r3, #17
 80017e8:	2282      	movs	r2, #130	; 0x82
 80017ea:	701a      	strb	r2, [r3, #0]
        buf[IP_PROTO_P]=IP_PROTO_UDP_V;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3317      	adds	r3, #23
 80017f0:	2211      	movs	r2, #17
 80017f2:	701a      	strb	r2, [r3, #0]
        memset(buf + IP_DST_P, 0xFF, 4);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	331e      	adds	r3, #30
 80017f8:	2204      	movs	r2, #4
 80017fa:	21ff      	movs	r1, #255	; 0xff
 80017fc:	4618      	mov	r0, r3
 80017fe:	f002 fcf8 	bl	80041f2 <memset>
        buf[UDP_DST_PORT_L_P]=DHCP_SRC_PORT; 
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	3325      	adds	r3, #37	; 0x25
 8001806:	2243      	movs	r2, #67	; 0x43
 8001808:	701a      	strb	r2, [r3, #0]
        buf[UDP_SRC_PORT_H_P]=0;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	3322      	adds	r3, #34	; 0x22
 800180e:	2200      	movs	r2, #0
 8001810:	701a      	strb	r2, [r3, #0]
        buf[UDP_SRC_PORT_L_P]=DHCP_DEST_PORT;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	3323      	adds	r3, #35	; 0x23
 8001816:	2244      	movs	r2, #68	; 0x44
 8001818:	701a      	strb	r2, [r3, #0]

        // Build DHCP Packet from buf[UDP_DATA_P]
        // Make dhcpPtr start of UDP data buffer
        dhcpData *dhcpPtr = (dhcpData *)&buf[UDP_DATA_P];
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	332a      	adds	r3, #42	; 0x2a
 800181e:	60bb      	str	r3, [r7, #8]
        // 0-3 op, htype, hlen, hops
        dhcpPtr->op = DHCP_BOOTREQUEST;
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	2201      	movs	r2, #1
 8001824:	701a      	strb	r2, [r3, #0]
        dhcpPtr->htype = 1;
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	2201      	movs	r2, #1
 800182a:	705a      	strb	r2, [r3, #1]
        dhcpPtr->hlen = 6;
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	2206      	movs	r2, #6
 8001830:	709a      	strb	r2, [r3, #2]
        dhcpPtr->hops = 0;
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	2200      	movs	r2, #0
 8001836:	70da      	strb	r2, [r3, #3]
        // 4-7 xid
        memcpy(&dhcpPtr->xid, &currentXid, sizeof(currentXid));
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	3304      	adds	r3, #4
 800183c:	4a5f      	ldr	r2, [pc, #380]	; (80019bc <dhcp_send+0x244>)
 800183e:	6812      	ldr	r2, [r2, #0]
 8001840:	601a      	str	r2, [r3, #0]
        // 8-9 secs
        memcpy(&dhcpPtr->secs, &currentSecs, sizeof(currentSecs));
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	3308      	adds	r3, #8
 8001846:	4a5e      	ldr	r2, [pc, #376]	; (80019c0 <dhcp_send+0x248>)
 8001848:	8812      	ldrh	r2, [r2, #0]
 800184a:	801a      	strh	r2, [r3, #0]
        // 16-19 yiaddr
        memset(dhcpPtr->yiaddr, 0, 4);
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	3310      	adds	r3, #16
 8001850:	2204      	movs	r2, #4
 8001852:	2100      	movs	r1, #0
 8001854:	4618      	mov	r0, r3
 8001856:	f002 fccc 	bl	80041f2 <memset>
        // 28-43 chaddr(16)
        memcpy(dhcpPtr->chaddr, macaddr, 6);
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	f103 001c 	add.w	r0, r3, #28
 8001860:	4b55      	ldr	r3, [pc, #340]	; (80019b8 <dhcp_send+0x240>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2206      	movs	r2, #6
 8001866:	4619      	mov	r1, r3
 8001868:	f002 fcb8 	bl	80041dc <memcpy>

        // options defined as option, length, value
        bufPtr = buf + UDP_DATA_P + sizeof( dhcpData );
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f503 738b 	add.w	r3, r3, #278	; 0x116
 8001872:	4a54      	ldr	r2, [pc, #336]	; (80019c4 <dhcp_send+0x24c>)
 8001874:	6013      	str	r3, [r2, #0]
        // Magic cookie 99, 130, 83 and 99
        addToBuf(99);
 8001876:	2063      	movs	r0, #99	; 0x63
 8001878:	f7ff feca 	bl	8001610 <addToBuf>
        addToBuf(130);
 800187c:	2082      	movs	r0, #130	; 0x82
 800187e:	f7ff fec7 	bl	8001610 <addToBuf>
        addToBuf(83);
 8001882:	2053      	movs	r0, #83	; 0x53
 8001884:	f7ff fec4 	bl	8001610 <addToBuf>
        addToBuf(99);
 8001888:	2063      	movs	r0, #99	; 0x63
 800188a:	f7ff fec1 	bl	8001610 <addToBuf>
        
        // Set correct options
        // Option 1 - DHCP message type
        addToBuf(53);   // DHCPDISCOVER, DHCPREQUEST
 800188e:	2035      	movs	r0, #53	; 0x35
 8001890:	f7ff febe 	bl	8001610 <addToBuf>
        addToBuf(1);      // Length 
 8001894:	2001      	movs	r0, #1
 8001896:	f7ff febb 	bl	8001610 <addToBuf>
        addToBuf(requestType);      // Value
 800189a:	78fb      	ldrb	r3, [r7, #3]
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff feb7 	bl	8001610 <addToBuf>

        // Client Identifier Option, this is the client mac address
        addToBuf(61);     // Client identifier
 80018a2:	203d      	movs	r0, #61	; 0x3d
 80018a4:	f7ff feb4 	bl	8001610 <addToBuf>
        addToBuf(7);      // Length 
 80018a8:	2007      	movs	r0, #7
 80018aa:	f7ff feb1 	bl	8001610 <addToBuf>
        addToBuf(0x01);      // Value
 80018ae:	2001      	movs	r0, #1
 80018b0:	f7ff feae 	bl	8001610 <addToBuf>
        for( i=0; i<6; i++)
 80018b4:	2300      	movs	r3, #0
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	e00a      	b.n	80018d0 <dhcp_send+0x158>
                addToBuf(macaddr[i]);
 80018ba:	4b3f      	ldr	r3, [pc, #252]	; (80019b8 <dhcp_send+0x240>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	4413      	add	r3, r2
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff fea3 	bl	8001610 <addToBuf>
        for( i=0; i<6; i++)
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	3301      	adds	r3, #1
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2b05      	cmp	r3, #5
 80018d4:	ddf1      	ble.n	80018ba <dhcp_send+0x142>

        // Host name Option
        addToBuf(12);     // Host name
 80018d6:	200c      	movs	r0, #12
 80018d8:	f7ff fe9a 	bl	8001610 <addToBuf>
        addToBuf(10);      // Length 
 80018dc:	200a      	movs	r0, #10
 80018de:	f7ff fe97 	bl	8001610 <addToBuf>
        for( i=0; i<10; i++)
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	e009      	b.n	80018fc <dhcp_send+0x184>
                addToBuf(hostname[i]);
 80018e8:	4a37      	ldr	r2, [pc, #220]	; (80019c8 <dhcp_send+0x250>)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	4413      	add	r3, r2
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff fe8d 	bl	8001610 <addToBuf>
        for( i=0; i<10; i++)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	3301      	adds	r3, #1
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2b09      	cmp	r3, #9
 8001900:	ddf2      	ble.n	80018e8 <dhcp_send+0x170>

        if( requestType == DHCPREQUEST ) {
 8001902:	78fb      	ldrb	r3, [r7, #3]
 8001904:	2b03      	cmp	r3, #3
 8001906:	d12d      	bne.n	8001964 <dhcp_send+0x1ec>
                // Request IP address
                addToBuf(50);     // Requested IP address
 8001908:	2032      	movs	r0, #50	; 0x32
 800190a:	f7ff fe81 	bl	8001610 <addToBuf>
                addToBuf(4);      // Length 
 800190e:	2004      	movs	r0, #4
 8001910:	f7ff fe7e 	bl	8001610 <addToBuf>
                for( i=0; i<4; i++)
 8001914:	2300      	movs	r3, #0
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	e00a      	b.n	8001930 <dhcp_send+0x1b8>
                        addToBuf(dhcpip[i]);
 800191a:	4b26      	ldr	r3, [pc, #152]	; (80019b4 <dhcp_send+0x23c>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	4413      	add	r3, r2
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff fe73 	bl	8001610 <addToBuf>
                for( i=0; i<4; i++)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	3301      	adds	r3, #1
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2b03      	cmp	r3, #3
 8001934:	ddf1      	ble.n	800191a <dhcp_send+0x1a2>

                // Request using server ip address
                addToBuf(54);     // Server IP address
 8001936:	2036      	movs	r0, #54	; 0x36
 8001938:	f7ff fe6a 	bl	8001610 <addToBuf>
                addToBuf(4);      // Length 
 800193c:	2004      	movs	r0, #4
 800193e:	f7ff fe67 	bl	8001610 <addToBuf>
                for( i=0; i<4; i++)
 8001942:	2300      	movs	r3, #0
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	e00a      	b.n	800195e <dhcp_send+0x1e6>
                        addToBuf(dhcpserver[i]);
 8001948:	4b20      	ldr	r3, [pc, #128]	; (80019cc <dhcp_send+0x254>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	4413      	add	r3, r2
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff fe5c 	bl	8001610 <addToBuf>
                for( i=0; i<4; i++)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	3301      	adds	r3, #1
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2b03      	cmp	r3, #3
 8001962:	ddf1      	ble.n	8001948 <dhcp_send+0x1d0>
        }

        // Additional information in parameter list - minimal list for what we need
        addToBuf(55);     // Parameter request list
 8001964:	2037      	movs	r0, #55	; 0x37
 8001966:	f7ff fe53 	bl	8001610 <addToBuf>
        addToBuf(3);      // Length 
 800196a:	2003      	movs	r0, #3
 800196c:	f7ff fe50 	bl	8001610 <addToBuf>
        addToBuf(1);      // Subnet mask
 8001970:	2001      	movs	r0, #1
 8001972:	f7ff fe4d 	bl	8001610 <addToBuf>
        addToBuf(3);      // Route/Gateway
 8001976:	2003      	movs	r0, #3
 8001978:	f7ff fe4a 	bl	8001610 <addToBuf>
        addToBuf(6);      // DNS Server
 800197c:	2006      	movs	r0, #6
 800197e:	f7ff fe47 	bl	8001610 <addToBuf>

        // payload len should be around 300
        addToBuf(255);      // end option
 8001982:	20ff      	movs	r0, #255	; 0xff
 8001984:	f7ff fe44 	bl	8001610 <addToBuf>
        send_udp_transmit(buf, bufPtr - buf - UDP_DATA_P);
 8001988:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <dhcp_send+0x24c>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	461a      	mov	r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	b29b      	uxth	r3, r3
 8001994:	3b2a      	subs	r3, #42	; 0x2a
 8001996:	b29b      	uxth	r3, r3
 8001998:	4619      	mov	r1, r3
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f001 f980 	bl	8002ca0 <send_udp_transmit>
}
 80019a0:	bf00      	nop
 80019a2:	3710      	adds	r7, #16
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20000224 	.word	0x20000224
 80019ac:	20000225 	.word	0x20000225
 80019b0:	2000021c 	.word	0x2000021c
 80019b4:	200004c4 	.word	0x200004c4
 80019b8:	20000220 	.word	0x20000220
 80019bc:	20000228 	.word	0x20000228
 80019c0:	2000022c 	.word	0x2000022c
 80019c4:	20000238 	.word	0x20000238
 80019c8:	20000008 	.word	0x20000008
 80019cc:	200004c8 	.word	0x200004c8

080019d0 <check_for_dhcp_answer>:
// process the answer from the dhcp server:
// return 1 on sucessful processing of answer.
// We set also the variable haveDhcpAnswer
// Either DHCPOFFER, DHCPACK or DHCPNACK
// Return 0 for nothing processed, 1 for done soemthing
uint8_t check_for_dhcp_answer(uint8_t *buf, uint16_t plen){
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	460b      	mov	r3, r1
 80019da:	807b      	strh	r3, [r7, #2]
    // Map struct onto payload
    dhcpData *dhcpPtr = (dhcpData *)&buf[UDP_DATA_P];
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	332a      	adds	r3, #42	; 0x2a
 80019e0:	60fb      	str	r3, [r7, #12]
    if (plen >= 70 && buf[UDP_SRC_PORT_L_P] == DHCP_SRC_PORT &&
 80019e2:	887b      	ldrh	r3, [r7, #2]
 80019e4:	2b45      	cmp	r3, #69	; 0x45
 80019e6:	d933      	bls.n	8001a50 <check_for_dhcp_answer+0x80>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3323      	adds	r3, #35	; 0x23
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	2b43      	cmp	r3, #67	; 0x43
 80019f0:	d12e      	bne.n	8001a50 <check_for_dhcp_answer+0x80>
            dhcpPtr->op == DHCP_BOOTREPLY && !memcmp(&dhcpPtr->xid, &currentXid, 4) ) {
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	781b      	ldrb	r3, [r3, #0]
    if (plen >= 70 && buf[UDP_SRC_PORT_L_P] == DHCP_SRC_PORT &&
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d12a      	bne.n	8001a50 <check_for_dhcp_answer+0x80>
            dhcpPtr->op == DHCP_BOOTREPLY && !memcmp(&dhcpPtr->xid, &currentXid, 4) ) {
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	3304      	adds	r3, #4
 80019fe:	2204      	movs	r2, #4
 8001a00:	4916      	ldr	r1, [pc, #88]	; (8001a5c <check_for_dhcp_answer+0x8c>)
 8001a02:	4618      	mov	r0, r3
 8001a04:	f002 fbdb 	bl	80041be <memcmp>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d120      	bne.n	8001a50 <check_for_dhcp_answer+0x80>
        // Check for lease expiry
        // uint32_t currentSecs = millis();
        int optionIndex = UDP_DATA_P + sizeof( dhcpData ) + 4;
 8001a0e:	f44f 738d 	mov.w	r3, #282	; 0x11a
 8001a12:	60bb      	str	r3, [r7, #8]
        if( buf[optionIndex] == 53 )
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	4413      	add	r3, r2
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b35      	cmp	r3, #53	; 0x35
 8001a1e:	d117      	bne.n	8001a50 <check_for_dhcp_answer+0x80>
            switch( buf[optionIndex+2] ) {
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	3302      	adds	r3, #2
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	4413      	add	r3, r2
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d002      	beq.n	8001a34 <check_for_dhcp_answer+0x64>
 8001a2e:	2b05      	cmp	r3, #5
 8001a30:	d007      	beq.n	8001a42 <check_for_dhcp_answer+0x72>
 8001a32:	e00d      	b.n	8001a50 <check_for_dhcp_answer+0x80>
                case DHCPOFFER: return have_dhcpoffer( buf, plen );
 8001a34:	887b      	ldrh	r3, [r7, #2]
 8001a36:	4619      	mov	r1, r3
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f000 f811 	bl	8001a60 <have_dhcpoffer>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	e007      	b.n	8001a52 <check_for_dhcp_answer+0x82>
                case DHCPACK:   return have_dhcpack( buf, plen );
 8001a42:	887b      	ldrh	r3, [r7, #2]
 8001a44:	4619      	mov	r1, r3
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f000 f88c 	bl	8001b64 <have_dhcpack>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	e000      	b.n	8001a52 <check_for_dhcp_answer+0x82>
            }
    }
    return 0;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000228 	.word	0x20000228

08001a60 <have_dhcpoffer>:


uint8_t have_dhcpoffer (uint8_t *buf,uint16_t plen) {
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	460b      	mov	r3, r1
 8001a6a:	807b      	strh	r3, [r7, #2]
    // Map struct onto payload
    dhcpData *dhcpPtr = (dhcpData *)((uint8_t *)buf + UDP_DATA_P);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	332a      	adds	r3, #42	; 0x2a
 8001a70:	60fb      	str	r3, [r7, #12]
    // Offered IP address is in yiaddr
    memcpy(dhcpip, dhcpPtr->yiaddr, 4);
 8001a72:	4b36      	ldr	r3, [pc, #216]	; (8001b4c <have_dhcpoffer+0xec>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	3210      	adds	r2, #16
 8001a7a:	6812      	ldr	r2, [r2, #0]
 8001a7c:	601a      	str	r2, [r3, #0]
    // Scan through variable length option list identifying options we want
    uint8_t *ptr = (uint8_t*) (dhcpPtr + 1) + 4;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	33ec      	adds	r3, #236	; 0xec
 8001a82:	3304      	adds	r3, #4
 8001a84:	617b      	str	r3, [r7, #20]
    do {
        uint8_t option = *ptr++;
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	1c5a      	adds	r2, r3, #1
 8001a8a:	617a      	str	r2, [r7, #20]
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	72fb      	strb	r3, [r7, #11]
        uint8_t optionLen = *ptr++;
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	1c5a      	adds	r2, r3, #1
 8001a94:	617a      	str	r2, [r7, #20]
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	72bb      	strb	r3, [r7, #10]
        uint8_t i;
        switch (option) {
 8001a9a:	7afb      	ldrb	r3, [r7, #11]
 8001a9c:	2b06      	cmp	r3, #6
 8001a9e:	d017      	beq.n	8001ad0 <have_dhcpoffer+0x70>
 8001aa0:	2b06      	cmp	r3, #6
 8001aa2:	dc04      	bgt.n	8001aae <have_dhcpoffer+0x4e>
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d007      	beq.n	8001ab8 <have_dhcpoffer+0x58>
 8001aa8:	2b03      	cmp	r3, #3
 8001aaa:	d00b      	beq.n	8001ac4 <have_dhcpoffer+0x64>
 8001aac:	e03c      	b.n	8001b28 <have_dhcpoffer+0xc8>
 8001aae:	2b33      	cmp	r3, #51	; 0x33
 8001ab0:	d014      	beq.n	8001adc <have_dhcpoffer+0x7c>
 8001ab2:	2b36      	cmp	r3, #54	; 0x36
 8001ab4:	d032      	beq.n	8001b1c <have_dhcpoffer+0xbc>
 8001ab6:	e037      	b.n	8001b28 <have_dhcpoffer+0xc8>
            case 1:  memcpy(dhcpmask, ptr, 4);
 8001ab8:	4b25      	ldr	r3, [pc, #148]	; (8001b50 <have_dhcpoffer+0xf0>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	6812      	ldr	r2, [r2, #0]
 8001ac0:	601a      	str	r2, [r3, #0]
                     break;
 8001ac2:	e031      	b.n	8001b28 <have_dhcpoffer+0xc8>
            case 3:  memcpy(gwaddr, ptr, 4);
 8001ac4:	4b23      	ldr	r3, [pc, #140]	; (8001b54 <have_dhcpoffer+0xf4>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	697a      	ldr	r2, [r7, #20]
 8001aca:	6812      	ldr	r2, [r2, #0]
 8001acc:	601a      	str	r2, [r3, #0]
                     break;
 8001ace:	e02b      	b.n	8001b28 <have_dhcpoffer+0xc8>
            case 6:  memcpy(dnsserver, ptr, 4);
 8001ad0:	4b21      	ldr	r3, [pc, #132]	; (8001b58 <have_dhcpoffer+0xf8>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	697a      	ldr	r2, [r7, #20]
 8001ad6:	6812      	ldr	r2, [r2, #0]
 8001ad8:	601a      	str	r2, [r3, #0]
                     break;
 8001ada:	e025      	b.n	8001b28 <have_dhcpoffer+0xc8>
            case 51: leaseTime = 0;
 8001adc:	4b1f      	ldr	r3, [pc, #124]	; (8001b5c <have_dhcpoffer+0xfc>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
                     for (i = 0; i<4; i++)
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	74fb      	strb	r3, [r7, #19]
 8001ae6:	e00d      	b.n	8001b04 <have_dhcpoffer+0xa4>
                         leaseTime = (leaseTime + ptr[i]) << 8;
 8001ae8:	7cfb      	ldrb	r3, [r7, #19]
 8001aea:	697a      	ldr	r2, [r7, #20]
 8001aec:	4413      	add	r3, r2
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	461a      	mov	r2, r3
 8001af2:	4b1a      	ldr	r3, [pc, #104]	; (8001b5c <have_dhcpoffer+0xfc>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4413      	add	r3, r2
 8001af8:	021b      	lsls	r3, r3, #8
 8001afa:	4a18      	ldr	r2, [pc, #96]	; (8001b5c <have_dhcpoffer+0xfc>)
 8001afc:	6013      	str	r3, [r2, #0]
                     for (i = 0; i<4; i++)
 8001afe:	7cfb      	ldrb	r3, [r7, #19]
 8001b00:	3301      	adds	r3, #1
 8001b02:	74fb      	strb	r3, [r7, #19]
 8001b04:	7cfb      	ldrb	r3, [r7, #19]
 8001b06:	2b03      	cmp	r3, #3
 8001b08:	d9ee      	bls.n	8001ae8 <have_dhcpoffer+0x88>
                     leaseTime *= 1000;      // milliseconds
 8001b0a:	4b14      	ldr	r3, [pc, #80]	; (8001b5c <have_dhcpoffer+0xfc>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b12:	fb02 f303 	mul.w	r3, r2, r3
 8001b16:	4a11      	ldr	r2, [pc, #68]	; (8001b5c <have_dhcpoffer+0xfc>)
 8001b18:	6013      	str	r3, [r2, #0]
                     break;
 8001b1a:	e005      	b.n	8001b28 <have_dhcpoffer+0xc8>
            case 54: memcpy(dhcpserver, ptr, 4);
 8001b1c:	4b10      	ldr	r3, [pc, #64]	; (8001b60 <have_dhcpoffer+0x100>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	697a      	ldr	r2, [r7, #20]
 8001b22:	6812      	ldr	r2, [r2, #0]
 8001b24:	601a      	str	r2, [r3, #0]
                     break;
 8001b26:	bf00      	nop
        }
        ptr += optionLen;
 8001b28:	7abb      	ldrb	r3, [r7, #10]
 8001b2a:	697a      	ldr	r2, [r7, #20]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	617b      	str	r3, [r7, #20]
    } while (ptr < buf + plen);
 8001b30:	887b      	ldrh	r3, [r7, #2]
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	4413      	add	r3, r2
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d3a4      	bcc.n	8001a86 <have_dhcpoffer+0x26>
    dhcp_request_ip( buf );
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f7ff fe09 	bl	8001754 <dhcp_request_ip>
    return 1;
 8001b42:	2301      	movs	r3, #1
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3718      	adds	r7, #24
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	200004c4 	.word	0x200004c4
 8001b50:	200004d0 	.word	0x200004d0
 8001b54:	200004cc 	.word	0x200004cc
 8001b58:	200004c0 	.word	0x200004c0
 8001b5c:	20000234 	.word	0x20000234
 8001b60:	200004c8 	.word	0x200004c8

08001b64 <have_dhcpack>:

uint8_t have_dhcpack (uint8_t *buf,uint16_t plen) {
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	807b      	strh	r3, [r7, #2]
    dhcpState = DHCP_STATE_OK;
 8001b70:	4b07      	ldr	r3, [pc, #28]	; (8001b90 <have_dhcpack+0x2c>)
 8001b72:	2205      	movs	r2, #5
 8001b74:	701a      	strb	r2, [r3, #0]
    leaseStart = HAL_GetTick();
 8001b76:	f7fe fb49 	bl	800020c <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <have_dhcpack+0x30>)
 8001b7e:	601a      	str	r2, [r3, #0]
    // Turn off broadcast. Application if it needs it can re-enable it
    enc28j60DisableBroadcast();
 8001b80:	f000 fae8 	bl	8002154 <enc28j60DisableBroadcast>
    return 2;
 8001b84:	2302      	movs	r3, #2
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	2000021d 	.word	0x2000021d
 8001b94:	20000230 	.word	0x20000230

08001b98 <dnslkup_set_dnsip>:
}

// set DNS server to be used for lookups.
// defaults to Google DNS server if not called.
void dnslkup_set_dnsip(uint8_t *dnsipaddr)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
        uint8_t i=0;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	73fb      	strb	r3, [r7, #15]
        while(i<4){
 8001ba4:	e009      	b.n	8001bba <dnslkup_set_dnsip+0x22>
                dnsip[i]=dnsipaddr[i];
 8001ba6:	7bfb      	ldrb	r3, [r7, #15]
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	441a      	add	r2, r3
 8001bac:	7bfb      	ldrb	r3, [r7, #15]
 8001bae:	7811      	ldrb	r1, [r2, #0]
 8001bb0:	4a06      	ldr	r2, [pc, #24]	; (8001bcc <dnslkup_set_dnsip+0x34>)
 8001bb2:	54d1      	strb	r1, [r2, r3]
                i++;
 8001bb4:	7bfb      	ldrb	r3, [r7, #15]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	73fb      	strb	r3, [r7, #15]
        while(i<4){
 8001bba:	7bfb      	ldrb	r3, [r7, #15]
 8001bbc:	2b03      	cmp	r3, #3
 8001bbe:	d9f2      	bls.n	8001ba6 <dnslkup_set_dnsip+0xe>
        }
}
 8001bc0:	bf00      	nop
 8001bc2:	3714      	adds	r7, #20
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bc80      	pop	{r7}
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	20000014 	.word	0x20000014

08001bd0 <enc28j60_set_spi>:
  GPIO_SetBits(GPIOA, GPIO_PIN_4);
}
#endif

void enc28j60_set_spi(SPI_HandleTypeDef *hspi_new)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
	hspi = hspi_new;
 8001bd8:	4a03      	ldr	r2, [pc, #12]	; (8001be8 <enc28j60_set_spi+0x18>)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6013      	str	r3, [r2, #0]
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bc80      	pop	{r7}
 8001be6:	4770      	bx	lr
 8001be8:	20000244 	.word	0x20000244

08001bec <ENC28J60_SendByte>:

void error (float error_num, char infinite);
unsigned char ENC28J60_SendByte(uint8_t tx)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af02      	add	r7, sp, #8
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	71fb      	strb	r3, [r7, #7]
	if (hspi == NULL)
 8001bf6:	4b0f      	ldr	r3, [pc, #60]	; (8001c34 <ENC28J60_SendByte+0x48>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <ENC28J60_SendByte+0x16>
		return 0;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	e014      	b.n	8001c2c <ENC28J60_SendByte+0x40>

	if (r != HAL_OK)
		error(r, 0);
*/

	uint8_t rx = 0;
 8001c02:	2300      	movs	r3, #0
 8001c04:	72fb      	strb	r3, [r7, #11]
	int r;

	r = HAL_SPI_TransmitReceive(hspi, &tx, &rx, 1, 0xffffffff);
 8001c06:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <ENC28J60_SendByte+0x48>)
 8001c08:	6818      	ldr	r0, [r3, #0]
 8001c0a:	f107 020b 	add.w	r2, r7, #11
 8001c0e:	1df9      	adds	r1, r7, #7
 8001c10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c14:	9300      	str	r3, [sp, #0]
 8001c16:	2301      	movs	r3, #1
 8001c18:	f7ff f9c5 	bl	8000fa6 <HAL_SPI_TransmitReceive>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	60fb      	str	r3, [r7, #12]

	if (r != HAL_OK)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <ENC28J60_SendByte+0x3e>
		Error_Handler();
 8001c26:	f002 f80f 	bl	8003c48 <Error_Handler>

	return rx;
 8001c2a:	7afb      	ldrb	r3, [r7, #11]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3710      	adds	r7, #16
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	20000244 	.word	0x20000244

08001c38 <enc28j60ReadOp>:

uint8_t enc28j60ReadOp(uint8_t op, uint8_t address)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	460a      	mov	r2, r1
 8001c42:	71fb      	strb	r3, [r7, #7]
 8001c44:	4613      	mov	r3, r2
 8001c46:	71bb      	strb	r3, [r7, #6]
		uint8_t temp;
        enableChip;
 8001c48:	4b1a      	ldr	r3, [pc, #104]	; (8001cb4 <enc28j60ReadOp+0x7c>)
 8001c4a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001c4e:	611a      	str	r2, [r3, #16]
 8001c50:	4b19      	ldr	r3, [pc, #100]	; (8001cb8 <enc28j60ReadOp+0x80>)
 8001c52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c56:	611a      	str	r2, [r3, #16]
 8001c58:	2002      	movs	r0, #2
 8001c5a:	f7fe fae1 	bl	8000220 <HAL_Delay>
        // issue read command
        ENC28J60_SendByte(op | (address & ADDR_MASK));
 8001c5e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001c62:	f003 031f 	and.w	r3, r3, #31
 8001c66:	b25a      	sxtb	r2, r3
 8001c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	b25b      	sxtb	r3, r3
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff ffba 	bl	8001bec <ENC28J60_SendByte>
        temp = ENC28J60_SendByte(0xFF);
 8001c78:	20ff      	movs	r0, #255	; 0xff
 8001c7a:	f7ff ffb7 	bl	8001bec <ENC28J60_SendByte>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	73fb      	strb	r3, [r7, #15]
        if (address & 0x80)
 8001c82:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	da04      	bge.n	8001c94 <enc28j60ReadOp+0x5c>
            temp = ENC28J60_SendByte(0xFF);
 8001c8a:	20ff      	movs	r0, #255	; 0xff
 8001c8c:	f7ff ffae 	bl	8001bec <ENC28J60_SendByte>
 8001c90:	4603      	mov	r3, r0
 8001c92:	73fb      	strb	r3, [r7, #15]

        // release CS
        disableChip;
 8001c94:	4b07      	ldr	r3, [pc, #28]	; (8001cb4 <enc28j60ReadOp+0x7c>)
 8001c96:	2210      	movs	r2, #16
 8001c98:	611a      	str	r2, [r3, #16]
 8001c9a:	4b07      	ldr	r3, [pc, #28]	; (8001cb8 <enc28j60ReadOp+0x80>)
 8001c9c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001ca0:	611a      	str	r2, [r3, #16]
 8001ca2:	2002      	movs	r0, #2
 8001ca4:	f7fe fabc 	bl	8000220 <HAL_Delay>
        return temp;
 8001ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40010800 	.word	0x40010800
 8001cb8:	40011000 	.word	0x40011000

08001cbc <enc28j60WriteOp>:

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	71fb      	strb	r3, [r7, #7]
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	71bb      	strb	r3, [r7, #6]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	717b      	strb	r3, [r7, #5]
    enableChip;
 8001cce:	4b15      	ldr	r3, [pc, #84]	; (8001d24 <enc28j60WriteOp+0x68>)
 8001cd0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001cd4:	611a      	str	r2, [r3, #16]
 8001cd6:	4b14      	ldr	r3, [pc, #80]	; (8001d28 <enc28j60WriteOp+0x6c>)
 8001cd8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cdc:	611a      	str	r2, [r3, #16]
 8001cde:	2002      	movs	r0, #2
 8001ce0:	f7fe fa9e 	bl	8000220 <HAL_Delay>
    ENC28J60_SendByte(op | (address & ADDR_MASK));
 8001ce4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001ce8:	f003 031f 	and.w	r3, r3, #31
 8001cec:	b25a      	sxtb	r2, r3
 8001cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	b25b      	sxtb	r3, r3
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff ff77 	bl	8001bec <ENC28J60_SendByte>
    ENC28J60_SendByte(data);
 8001cfe:	797b      	ldrb	r3, [r7, #5]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff ff73 	bl	8001bec <ENC28J60_SendByte>
    disableChip;
 8001d06:	4b07      	ldr	r3, [pc, #28]	; (8001d24 <enc28j60WriteOp+0x68>)
 8001d08:	2210      	movs	r2, #16
 8001d0a:	611a      	str	r2, [r3, #16]
 8001d0c:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <enc28j60WriteOp+0x6c>)
 8001d0e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001d12:	611a      	str	r2, [r3, #16]
 8001d14:	2002      	movs	r0, #2
 8001d16:	f7fe fa83 	bl	8000220 <HAL_Delay>
}
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40010800 	.word	0x40010800
 8001d28:	40011000 	.word	0x40011000

08001d2c <enc28j60ReadBuffer>:
 while(!enc28j60Read(ESTAT) & ESTAT_CLKRDY);
}


void enc28j60ReadBuffer(uint16_t len, uint8_t* data)
{
 8001d2c:	b590      	push	{r4, r7, lr}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	6039      	str	r1, [r7, #0]
 8001d36:	80fb      	strh	r3, [r7, #6]
    enableChip;
 8001d38:	4b14      	ldr	r3, [pc, #80]	; (8001d8c <enc28j60ReadBuffer+0x60>)
 8001d3a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001d3e:	611a      	str	r2, [r3, #16]
 8001d40:	4b13      	ldr	r3, [pc, #76]	; (8001d90 <enc28j60ReadBuffer+0x64>)
 8001d42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d46:	611a      	str	r2, [r3, #16]
 8001d48:	2002      	movs	r0, #2
 8001d4a:	f7fe fa69 	bl	8000220 <HAL_Delay>
    ENC28J60_SendByte(ENC28J60_READ_BUF_MEM);
 8001d4e:	203a      	movs	r0, #58	; 0x3a
 8001d50:	f7ff ff4c 	bl	8001bec <ENC28J60_SendByte>
    while (len--) {
 8001d54:	e007      	b.n	8001d66 <enc28j60ReadBuffer+0x3a>
        *data++ = ENC28J60_SendByte(0x00);
 8001d56:	683c      	ldr	r4, [r7, #0]
 8001d58:	1c63      	adds	r3, r4, #1
 8001d5a:	603b      	str	r3, [r7, #0]
 8001d5c:	2000      	movs	r0, #0
 8001d5e:	f7ff ff45 	bl	8001bec <ENC28J60_SendByte>
 8001d62:	4603      	mov	r3, r0
 8001d64:	7023      	strb	r3, [r4, #0]
    while (len--) {
 8001d66:	88fb      	ldrh	r3, [r7, #6]
 8001d68:	1e5a      	subs	r2, r3, #1
 8001d6a:	80fa      	strh	r2, [r7, #6]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d1f2      	bne.n	8001d56 <enc28j60ReadBuffer+0x2a>
    }
    disableChip;
 8001d70:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <enc28j60ReadBuffer+0x60>)
 8001d72:	2210      	movs	r2, #16
 8001d74:	611a      	str	r2, [r3, #16]
 8001d76:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <enc28j60ReadBuffer+0x64>)
 8001d78:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001d7c:	611a      	str	r2, [r3, #16]
 8001d7e:	2002      	movs	r0, #2
 8001d80:	f7fe fa4e 	bl	8000220 <HAL_Delay>
    // Remove next line suggested by user epam - not needed
//    *data='\0';
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd90      	pop	{r4, r7, pc}
 8001d8c:	40010800 	.word	0x40010800
 8001d90:	40011000 	.word	0x40011000

08001d94 <enc28j60ReadBufferWord>:

static uint16_t enc28j60ReadBufferWord() {
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
    uint16_t result;
    enc28j60ReadBuffer(2, (uint8_t*) &result);
 8001d9a:	1dbb      	adds	r3, r7, #6
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	2002      	movs	r0, #2
 8001da0:	f7ff ffc4 	bl	8001d2c <enc28j60ReadBuffer>
    return result;
 8001da4:	88fb      	ldrh	r3, [r7, #6]
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
	...

08001db0 <enc28j60WriteBuffer>:


void enc28j60WriteBuffer(uint16_t len, uint8_t* data)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	6039      	str	r1, [r7, #0]
 8001dba:	80fb      	strh	r3, [r7, #6]
    enableChip;
 8001dbc:	4b14      	ldr	r3, [pc, #80]	; (8001e10 <enc28j60WriteBuffer+0x60>)
 8001dbe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001dc2:	611a      	str	r2, [r3, #16]
 8001dc4:	4b13      	ldr	r3, [pc, #76]	; (8001e14 <enc28j60WriteBuffer+0x64>)
 8001dc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dca:	611a      	str	r2, [r3, #16]
 8001dcc:	2002      	movs	r0, #2
 8001dce:	f7fe fa27 	bl	8000220 <HAL_Delay>
    ENC28J60_SendByte(ENC28J60_WRITE_BUF_MEM);
 8001dd2:	207a      	movs	r0, #122	; 0x7a
 8001dd4:	f7ff ff0a 	bl	8001bec <ENC28J60_SendByte>
    while (len--)
 8001dd8:	e006      	b.n	8001de8 <enc28j60WriteBuffer+0x38>
        ENC28J60_SendByte(*data++);
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	1c5a      	adds	r2, r3, #1
 8001dde:	603a      	str	r2, [r7, #0]
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff ff02 	bl	8001bec <ENC28J60_SendByte>
    while (len--)
 8001de8:	88fb      	ldrh	r3, [r7, #6]
 8001dea:	1e5a      	subs	r2, r3, #1
 8001dec:	80fa      	strh	r2, [r7, #6]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1f3      	bne.n	8001dda <enc28j60WriteBuffer+0x2a>

    disableChip;
 8001df2:	4b07      	ldr	r3, [pc, #28]	; (8001e10 <enc28j60WriteBuffer+0x60>)
 8001df4:	2210      	movs	r2, #16
 8001df6:	611a      	str	r2, [r3, #16]
 8001df8:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <enc28j60WriteBuffer+0x64>)
 8001dfa:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001dfe:	611a      	str	r2, [r3, #16]
 8001e00:	2002      	movs	r0, #2
 8001e02:	f7fe fa0d 	bl	8000220 <HAL_Delay>
}
 8001e06:	bf00      	nop
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40010800 	.word	0x40010800
 8001e14:	40011000 	.word	0x40011000

08001e18 <enc28j60SetBank>:

void enc28j60SetBank(uint8_t address)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	4603      	mov	r3, r0
 8001e20:	71fb      	strb	r3, [r7, #7]
    if ((address & BANK_MASK) != Enc28j60Bank) {
 8001e22:	79fb      	ldrb	r3, [r7, #7]
 8001e24:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001e28:	4a0d      	ldr	r2, [pc, #52]	; (8001e60 <enc28j60SetBank+0x48>)
 8001e2a:	7812      	ldrb	r2, [r2, #0]
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d013      	beq.n	8001e58 <enc28j60SetBank+0x40>
        enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_BSEL1|ECON1_BSEL0);
 8001e30:	2203      	movs	r2, #3
 8001e32:	211f      	movs	r1, #31
 8001e34:	20a0      	movs	r0, #160	; 0xa0
 8001e36:	f7ff ff41 	bl	8001cbc <enc28j60WriteOp>
        Enc28j60Bank = address & BANK_MASK;
 8001e3a:	79fb      	ldrb	r3, [r7, #7]
 8001e3c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001e40:	b2da      	uxtb	r2, r3
 8001e42:	4b07      	ldr	r3, [pc, #28]	; (8001e60 <enc28j60SetBank+0x48>)
 8001e44:	701a      	strb	r2, [r3, #0]
        enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, Enc28j60Bank>>5);
 8001e46:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <enc28j60SetBank+0x48>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	095b      	lsrs	r3, r3, #5
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	461a      	mov	r2, r3
 8001e50:	211f      	movs	r1, #31
 8001e52:	2080      	movs	r0, #128	; 0x80
 8001e54:	f7ff ff32 	bl	8001cbc <enc28j60WriteOp>
    }
}
 8001e58:	bf00      	nop
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	2000023c 	.word	0x2000023c

08001e64 <enc28j60Read>:

uint8_t enc28j60Read(uint8_t address)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	71fb      	strb	r3, [r7, #7]
        // set the bank
        enc28j60SetBank(address);
 8001e6e:	79fb      	ldrb	r3, [r7, #7]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff ffd1 	bl	8001e18 <enc28j60SetBank>
        // do the read
        return enc28j60ReadOp(ENC28J60_READ_CTRL_REG, address);
 8001e76:	79fb      	ldrb	r3, [r7, #7]
 8001e78:	4619      	mov	r1, r3
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	f7ff fedc 	bl	8001c38 <enc28j60ReadOp>
 8001e80:	4603      	mov	r3, r0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <enc28j60WriteWord>:

void enc28j60WriteWord(uint8_t address, uint16_t data) {
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b082      	sub	sp, #8
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	4603      	mov	r3, r0
 8001e92:	460a      	mov	r2, r1
 8001e94:	71fb      	strb	r3, [r7, #7]
 8001e96:	4613      	mov	r3, r2
 8001e98:	80bb      	strh	r3, [r7, #4]
    enc28j60Write(address, data & 0xff);
 8001e9a:	88bb      	ldrh	r3, [r7, #4]
 8001e9c:	b2da      	uxtb	r2, r3
 8001e9e:	79fb      	ldrb	r3, [r7, #7]
 8001ea0:	4611      	mov	r1, r2
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f000 f836 	bl	8001f14 <enc28j60Write>
    enc28j60Write(address + 1, data >> 8);
 8001ea8:	79fb      	ldrb	r3, [r7, #7]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	b2da      	uxtb	r2, r3
 8001eae:	88bb      	ldrh	r3, [r7, #4]
 8001eb0:	0a1b      	lsrs	r3, r3, #8
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4610      	mov	r0, r2
 8001eba:	f000 f82b 	bl	8001f14 <enc28j60Write>
}
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <enc28j60PhyReadH>:

// read upper 8 bits
uint16_t enc28j60PhyReadH(uint8_t address)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b082      	sub	sp, #8
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	4603      	mov	r3, r0
 8001ece:	71fb      	strb	r3, [r7, #7]
	// Set the right address and start the register read operation
	enc28j60Write(MIREGADR, address);
 8001ed0:	79fb      	ldrb	r3, [r7, #7]
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	20d4      	movs	r0, #212	; 0xd4
 8001ed6:	f000 f81d 	bl	8001f14 <enc28j60Write>
	enc28j60Write(MICMD, MICMD_MIIRD);
 8001eda:	2101      	movs	r1, #1
 8001edc:	20d2      	movs	r0, #210	; 0xd2
 8001ede:	f000 f819 	bl	8001f14 <enc28j60Write>
	Delay(15);
 8001ee2:	200f      	movs	r0, #15
 8001ee4:	f7fe f99c 	bl	8000220 <HAL_Delay>

	// wait until the PHY read completes
	while(enc28j60Read(MISTAT) & MISTAT_BUSY);
 8001ee8:	bf00      	nop
 8001eea:	20ea      	movs	r0, #234	; 0xea
 8001eec:	f7ff ffba 	bl	8001e64 <enc28j60Read>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1f7      	bne.n	8001eea <enc28j60PhyReadH+0x24>

	// reset reading bit
	enc28j60Write(MICMD, 0x00);
 8001efa:	2100      	movs	r1, #0
 8001efc:	20d2      	movs	r0, #210	; 0xd2
 8001efe:	f000 f809 	bl	8001f14 <enc28j60Write>
	
	return (enc28j60Read(MIRDH));
 8001f02:	20d9      	movs	r0, #217	; 0xd9
 8001f04:	f7ff ffae 	bl	8001e64 <enc28j60Read>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	b29b      	uxth	r3, r3
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3708      	adds	r7, #8
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <enc28j60Write>:


void enc28j60Write(uint8_t address, uint8_t data)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	460a      	mov	r2, r1
 8001f1e:	71fb      	strb	r3, [r7, #7]
 8001f20:	4613      	mov	r3, r2
 8001f22:	71bb      	strb	r3, [r7, #6]
        // set the bank
        enc28j60SetBank(address);
 8001f24:	79fb      	ldrb	r3, [r7, #7]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff ff76 	bl	8001e18 <enc28j60SetBank>
        // do the write
        enc28j60WriteOp(ENC28J60_WRITE_CTRL_REG, address, data);
 8001f2c:	79ba      	ldrb	r2, [r7, #6]
 8001f2e:	79fb      	ldrb	r3, [r7, #7]
 8001f30:	4619      	mov	r1, r3
 8001f32:	2040      	movs	r0, #64	; 0x40
 8001f34:	f7ff fec2 	bl	8001cbc <enc28j60WriteOp>
}
 8001f38:	bf00      	nop
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <enc28j60PhyWrite>:


void enc28j60PhyWrite(uint8_t address, uint16_t data)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	460a      	mov	r2, r1
 8001f4a:	71fb      	strb	r3, [r7, #7]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	80bb      	strh	r3, [r7, #4]
        // set the PHY register address
        enc28j60Write(MIREGADR, address);
 8001f50:	79fb      	ldrb	r3, [r7, #7]
 8001f52:	4619      	mov	r1, r3
 8001f54:	20d4      	movs	r0, #212	; 0xd4
 8001f56:	f7ff ffdd 	bl	8001f14 <enc28j60Write>
        // write the PHY data
        enc28j60Write(MIWRL, data);
 8001f5a:	88bb      	ldrh	r3, [r7, #4]
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	4619      	mov	r1, r3
 8001f60:	20d6      	movs	r0, #214	; 0xd6
 8001f62:	f7ff ffd7 	bl	8001f14 <enc28j60Write>
        enc28j60Write(MIWRH, data>>8);
 8001f66:	88bb      	ldrh	r3, [r7, #4]
 8001f68:	0a1b      	lsrs	r3, r3, #8
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	4619      	mov	r1, r3
 8001f70:	20d7      	movs	r0, #215	; 0xd7
 8001f72:	f7ff ffcf 	bl	8001f14 <enc28j60Write>
        // wait until the PHY write completes
        while(enc28j60Read(MISTAT) & MISTAT_BUSY){
 8001f76:	e002      	b.n	8001f7e <enc28j60PhyWrite+0x3e>
                Delay(15);
 8001f78:	200f      	movs	r0, #15
 8001f7a:	f7fe f951 	bl	8000220 <HAL_Delay>
        while(enc28j60Read(MISTAT) & MISTAT_BUSY){
 8001f7e:	20ea      	movs	r0, #234	; 0xea
 8001f80:	f7ff ff70 	bl	8001e64 <enc28j60Read>
 8001f84:	4603      	mov	r3, r0
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1f4      	bne.n	8001f78 <enc28j60PhyWrite+0x38>
        }
}
 8001f8e:	bf00      	nop
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <enc28j60clkout>:
    while (enc28j60ReadByte(MISTAT) & MISTAT_BUSY)
        ;
}
*/
void enc28j60clkout(uint8_t clk)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b082      	sub	sp, #8
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	71fb      	strb	r3, [r7, #7]
        //setup clkout: 2 is 12.5MHz:
	enc28j60Write(ECOCON, clk & 0x7);
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	4619      	mov	r1, r3
 8001faa:	2075      	movs	r0, #117	; 0x75
 8001fac:	f7ff ffb2 	bl	8001f14 <enc28j60Write>
}
 8001fb0:	bf00      	nop
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <enc28j60Init>:

void enc28j60Init( uint8_t* macaddr )
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
	enableChip; // ss=0
 8001fc0:	4b4c      	ldr	r3, [pc, #304]	; (80020f4 <enc28j60Init+0x13c>)
 8001fc2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001fc6:	611a      	str	r2, [r3, #16]
 8001fc8:	4b4b      	ldr	r3, [pc, #300]	; (80020f8 <enc28j60Init+0x140>)
 8001fca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fce:	611a      	str	r2, [r3, #16]
 8001fd0:	2002      	movs	r0, #2
 8001fd2:	f7fe f925 	bl	8000220 <HAL_Delay>

	// perform system reset
	enc28j60WriteOp(ENC28J60_SOFT_RESET, 0, ENC28J60_SOFT_RESET);
 8001fd6:	22ff      	movs	r2, #255	; 0xff
 8001fd8:	2100      	movs	r1, #0
 8001fda:	20ff      	movs	r0, #255	; 0xff
 8001fdc:	f7ff fe6e 	bl	8001cbc <enc28j60WriteOp>
	HAL_Delay(50);
 8001fe0:	2032      	movs	r0, #50	; 0x32
 8001fe2:	f7fe f91d 	bl	8000220 <HAL_Delay>
	//while(!(enc28j60Read(ESTAT) & ESTAT_CLKRDY));
	// do bank 0 stuff
	// initialize receive buffer
	// 16-bit transfers, must write low byte first
	// set receive buffer start address
	gNextPacketPtr = RXSTART_INIT;
 8001fe6:	4b45      	ldr	r3, [pc, #276]	; (80020fc <enc28j60Init+0x144>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	801a      	strh	r2, [r3, #0]
        // Rx start
	enc28j60WriteWord(ERXSTL, RXSTART_INIT);
 8001fec:	2100      	movs	r1, #0
 8001fee:	2008      	movs	r0, #8
 8001ff0:	f7ff ff4b 	bl	8001e8a <enc28j60WriteWord>
	// set receive pointer address
	enc28j60WriteWord(ERXRDPTL, RXSTART_INIT);
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	200c      	movs	r0, #12
 8001ff8:	f7ff ff47 	bl	8001e8a <enc28j60WriteWord>
	// RX end
	enc28j60WriteWord(ERXNDL, RXSTOP_INIT);
 8001ffc:	f641 11fe 	movw	r1, #6654	; 0x19fe
 8002000:	200a      	movs	r0, #10
 8002002:	f7ff ff42 	bl	8001e8a <enc28j60WriteWord>
	// TX start
	enc28j60WriteWord(ETXSTL, TXSTART_INIT);
 8002006:	f641 11ff 	movw	r1, #6655	; 0x19ff
 800200a:	2004      	movs	r0, #4
 800200c:	f7ff ff3d 	bl	8001e8a <enc28j60WriteWord>
	// TX end
	enc28j60WriteWord(ETXNDL, TXSTOP_INIT);
 8002010:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8002014:	2006      	movs	r0, #6
 8002016:	f7ff ff38 	bl	8001e8a <enc28j60WriteWord>
        // This is hex 303F->EPMM0=0x3f,EPMM1=0x30
 
	//enc28j60Write(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN);
        //Change to add ERXFCON_BCEN recommended by epam
	//enc28j60Write(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN|ERXFCON_BCEN);
        erxfcon =  ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN|ERXFCON_BCEN;
 800201a:	4b39      	ldr	r3, [pc, #228]	; (8002100 <enc28j60Init+0x148>)
 800201c:	22b1      	movs	r2, #177	; 0xb1
 800201e:	701a      	strb	r2, [r3, #0]
	enc28j60Write(ERXFCON, erxfcon );
 8002020:	4b37      	ldr	r3, [pc, #220]	; (8002100 <enc28j60Init+0x148>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	4619      	mov	r1, r3
 8002026:	2038      	movs	r0, #56	; 0x38
 8002028:	f7ff ff74 	bl	8001f14 <enc28j60Write>
	enc28j60WriteWord(EPMM0, 0x303f);
 800202c:	f243 013f 	movw	r1, #12351	; 0x303f
 8002030:	2028      	movs	r0, #40	; 0x28
 8002032:	f7ff ff2a 	bl	8001e8a <enc28j60WriteWord>
	enc28j60WriteWord(EPMCSL, 0xf7f9);
 8002036:	f24f 71f9 	movw	r1, #63481	; 0xf7f9
 800203a:	2030      	movs	r0, #48	; 0x30
 800203c:	f7ff ff25 	bl	8001e8a <enc28j60WriteWord>
        //
	// do bank 2 stuff
	// enable MAC receive
	enc28j60Write(MACON1, MACON1_MARXEN|MACON1_TXPAUS|MACON1_RXPAUS);
 8002040:	210d      	movs	r1, #13
 8002042:	20c0      	movs	r0, #192	; 0xc0
 8002044:	f7ff ff66 	bl	8001f14 <enc28j60Write>
	// bring MAC out of reset
	enc28j60Write(MACON2, 0x00);
 8002048:	2100      	movs	r1, #0
 800204a:	20c1      	movs	r0, #193	; 0xc1
 800204c:	f7ff ff62 	bl	8001f14 <enc28j60Write>
	// enable automatic padding to 60bytes and CRC operations
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, MACON3, MACON3_PADCFG0|MACON3_TXCRCEN|MACON3_FRMLNEN);  //|MACON3_FULDPX);
 8002050:	2232      	movs	r2, #50	; 0x32
 8002052:	21c2      	movs	r1, #194	; 0xc2
 8002054:	2080      	movs	r0, #128	; 0x80
 8002056:	f7ff fe31 	bl	8001cbc <enc28j60WriteOp>
	// set inter-frame gap (non-back-to-back)
	enc28j60WriteWord(MAIPGL, 0x0C12);
 800205a:	f640 4112 	movw	r1, #3090	; 0xc12
 800205e:	20c6      	movs	r0, #198	; 0xc6
 8002060:	f7ff ff13 	bl	8001e8a <enc28j60WriteWord>
	// set inter-frame gap (back-to-back)
	enc28j60Write(MABBIPG, 0x12);
 8002064:	2112      	movs	r1, #18
 8002066:	20c4      	movs	r0, #196	; 0xc4
 8002068:	f7ff ff54 	bl	8001f14 <enc28j60Write>
	// Set the maximum packet size which the controller will accept
        // Do not send packets longer than MAX_FRAMELEN:
	enc28j60WriteWord(MAMXFLL, MAX_FRAMELEN);	
 800206c:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8002070:	20ca      	movs	r0, #202	; 0xca
 8002072:	f7ff ff0a 	bl	8001e8a <enc28j60WriteWord>
	// do bank 3 stuff
        // write MAC address
        // NOTE: MAC address in ENC28J60 is byte-backward
        enc28j60Write(MAADR5, macaddr[0]);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	4619      	mov	r1, r3
 800207c:	20e4      	movs	r0, #228	; 0xe4
 800207e:	f7ff ff49 	bl	8001f14 <enc28j60Write>
        enc28j60Write(MAADR4, macaddr[1]);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	3301      	adds	r3, #1
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	4619      	mov	r1, r3
 800208a:	20e5      	movs	r0, #229	; 0xe5
 800208c:	f7ff ff42 	bl	8001f14 <enc28j60Write>
        enc28j60Write(MAADR3, macaddr[2]);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3302      	adds	r3, #2
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	4619      	mov	r1, r3
 8002098:	20e2      	movs	r0, #226	; 0xe2
 800209a:	f7ff ff3b 	bl	8001f14 <enc28j60Write>
        enc28j60Write(MAADR2, macaddr[3]);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	3303      	adds	r3, #3
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	4619      	mov	r1, r3
 80020a6:	20e3      	movs	r0, #227	; 0xe3
 80020a8:	f7ff ff34 	bl	8001f14 <enc28j60Write>
        enc28j60Write(MAADR1, macaddr[4]);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	3304      	adds	r3, #4
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	4619      	mov	r1, r3
 80020b4:	20e0      	movs	r0, #224	; 0xe0
 80020b6:	f7ff ff2d 	bl	8001f14 <enc28j60Write>
        enc28j60Write(MAADR0, macaddr[5]);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	3305      	adds	r3, #5
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	4619      	mov	r1, r3
 80020c2:	20e1      	movs	r0, #225	; 0xe1
 80020c4:	f7ff ff26 	bl	8001f14 <enc28j60Write>
	// no loopback of transmitted frames
	enc28j60PhyWrite(PHCON2, PHCON2_HDLDIS);
 80020c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020cc:	2010      	movs	r0, #16
 80020ce:	f7ff ff37 	bl	8001f40 <enc28j60PhyWrite>
	// switch to bank 0
	enc28j60SetBank(ECON1);
 80020d2:	201f      	movs	r0, #31
 80020d4:	f7ff fea0 	bl	8001e18 <enc28j60SetBank>
	// enable interrutps
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE|EIE_PKTIE);
 80020d8:	22c0      	movs	r2, #192	; 0xc0
 80020da:	211b      	movs	r1, #27
 80020dc:	2080      	movs	r0, #128	; 0x80
 80020de:	f7ff fded 	bl	8001cbc <enc28j60WriteOp>
	// enable packet reception
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
 80020e2:	2204      	movs	r2, #4
 80020e4:	211f      	movs	r1, #31
 80020e6:	2080      	movs	r0, #128	; 0x80
 80020e8:	f7ff fde8 	bl	8001cbc <enc28j60WriteOp>
}
 80020ec:	bf00      	nop
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40010800 	.word	0x40010800
 80020f8:	40011000 	.word	0x40011000
 80020fc:	2000023e 	.word	0x2000023e
 8002100:	20000240 	.word	0x20000240

08002104 <enc28j60getrev>:

// read the revision of the chip:
uint8_t enc28j60getrev(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
        uint8_t rev;
        rev=enc28j60Read(EREVID);
 800210a:	2072      	movs	r0, #114	; 0x72
 800210c:	f7ff feaa 	bl	8001e64 <enc28j60Read>
 8002110:	4603      	mov	r3, r0
 8002112:	71fb      	strb	r3, [r7, #7]
        // microchip forgot to step the number on the silcon when they
        // released the revision B7. 6 is now rev B7. We still have
        // to see what they do when they release B8. At the moment
        // there is no B8 out yet
        if (rev>5) rev++;
 8002114:	79fb      	ldrb	r3, [r7, #7]
 8002116:	2b05      	cmp	r3, #5
 8002118:	d902      	bls.n	8002120 <enc28j60getrev+0x1c>
 800211a:	79fb      	ldrb	r3, [r7, #7]
 800211c:	3301      	adds	r3, #1
 800211e:	71fb      	strb	r3, [r7, #7]
	return(rev);
 8002120:	79fb      	ldrb	r3, [r7, #7]
}
 8002122:	4618      	mov	r0, r3
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
	...

0800212c <enc28j60EnableBroadcast>:

// A number of utility functions to enable/disable broadcast and multicast bits
void enc28j60EnableBroadcast( void ) {
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
	erxfcon |= ERXFCON_BCEN;
 8002130:	4b07      	ldr	r3, [pc, #28]	; (8002150 <enc28j60EnableBroadcast+0x24>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	f043 0301 	orr.w	r3, r3, #1
 8002138:	b2da      	uxtb	r2, r3
 800213a:	4b05      	ldr	r3, [pc, #20]	; (8002150 <enc28j60EnableBroadcast+0x24>)
 800213c:	701a      	strb	r2, [r3, #0]
	enc28j60Write(ERXFCON, erxfcon);
 800213e:	4b04      	ldr	r3, [pc, #16]	; (8002150 <enc28j60EnableBroadcast+0x24>)
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	4619      	mov	r1, r3
 8002144:	2038      	movs	r0, #56	; 0x38
 8002146:	f7ff fee5 	bl	8001f14 <enc28j60Write>
}
 800214a:	bf00      	nop
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	20000240 	.word	0x20000240

08002154 <enc28j60DisableBroadcast>:

void enc28j60DisableBroadcast( void ) {
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
	erxfcon &= ~ERXFCON_BCEN;
 8002158:	4b07      	ldr	r3, [pc, #28]	; (8002178 <enc28j60DisableBroadcast+0x24>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	f023 0301 	bic.w	r3, r3, #1
 8002160:	b2da      	uxtb	r2, r3
 8002162:	4b05      	ldr	r3, [pc, #20]	; (8002178 <enc28j60DisableBroadcast+0x24>)
 8002164:	701a      	strb	r2, [r3, #0]
	enc28j60Write(ERXFCON, erxfcon);
 8002166:	4b04      	ldr	r3, [pc, #16]	; (8002178 <enc28j60DisableBroadcast+0x24>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	4619      	mov	r1, r3
 800216c:	2038      	movs	r0, #56	; 0x38
 800216e:	f7ff fed1 	bl	8001f14 <enc28j60Write>
}
 8002172:	bf00      	nop
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20000240 	.word	0x20000240

0800217c <enc28j60linkup>:
}


// link status
uint8_t enc28j60linkup(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
        // bit 10 (= bit 3 in upper reg)
	return(enc28j60PhyReadH(PHSTAT2) & 4);
 8002180:	2011      	movs	r0, #17
 8002182:	f7ff fea0 	bl	8001ec6 <enc28j60PhyReadH>
 8002186:	4603      	mov	r3, r0
 8002188:	b2db      	uxtb	r3, r3
 800218a:	f003 0304 	and.w	r3, r3, #4
 800218e:	b2db      	uxtb	r3, r3
}
 8002190:	4618      	mov	r0, r3
 8002192:	bd80      	pop	{r7, pc}

08002194 <enc28j60PacketSend>:

void enc28j60PacketSend(uint16_t len, uint8_t* packet)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	4603      	mov	r3, r0
 800219c:	6039      	str	r1, [r7, #0]
 800219e:	80fb      	strh	r3, [r7, #6]
        // Check no transmit in progress
        while (enc28j60ReadOp(ENC28J60_READ_CTRL_REG, ECON1) & ECON1_TXRTS)
 80021a0:	e011      	b.n	80021c6 <enc28j60PacketSend+0x32>
        {
                // Reset the transmit logic problem. See Rev. B4 Silicon Errata point 12.
                if( (enc28j60Read(EIR) & EIR_TXERIF) ) {
 80021a2:	201c      	movs	r0, #28
 80021a4:	f7ff fe5e 	bl	8001e64 <enc28j60Read>
 80021a8:	4603      	mov	r3, r0
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d009      	beq.n	80021c6 <enc28j60PacketSend+0x32>
                        enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRST);
 80021b2:	2280      	movs	r2, #128	; 0x80
 80021b4:	211f      	movs	r1, #31
 80021b6:	2080      	movs	r0, #128	; 0x80
 80021b8:	f7ff fd80 	bl	8001cbc <enc28j60WriteOp>
                        enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
 80021bc:	2280      	movs	r2, #128	; 0x80
 80021be:	211f      	movs	r1, #31
 80021c0:	20a0      	movs	r0, #160	; 0xa0
 80021c2:	f7ff fd7b 	bl	8001cbc <enc28j60WriteOp>
        while (enc28j60ReadOp(ENC28J60_READ_CTRL_REG, ECON1) & ECON1_TXRTS)
 80021c6:	211f      	movs	r1, #31
 80021c8:	2000      	movs	r0, #0
 80021ca:	f7ff fd35 	bl	8001c38 <enc28j60ReadOp>
 80021ce:	4603      	mov	r3, r0
 80021d0:	f003 0308 	and.w	r3, r3, #8
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d1e4      	bne.n	80021a2 <enc28j60PacketSend+0xe>
                }
        }

	// Set the write pointer to start of transmit buffer area
	enc28j60WriteWord(EWRPTL, TXSTART_INIT);
 80021d8:	f641 11ff 	movw	r1, #6655	; 0x19ff
 80021dc:	2002      	movs	r0, #2
 80021de:	f7ff fe54 	bl	8001e8a <enc28j60WriteWord>
	// Set the TXND pointer to correspond to the packet size given
	enc28j60WriteWord(ETXNDL, (TXSTART_INIT+len));
 80021e2:	88fb      	ldrh	r3, [r7, #6]
 80021e4:	f503 53cf 	add.w	r3, r3, #6624	; 0x19e0
 80021e8:	331f      	adds	r3, #31
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	4619      	mov	r1, r3
 80021ee:	2006      	movs	r0, #6
 80021f0:	f7ff fe4b 	bl	8001e8a <enc28j60WriteWord>
	// write per-packet control byte (0x00 means use macon3 settings)
	enc28j60WriteOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
 80021f4:	2200      	movs	r2, #0
 80021f6:	2100      	movs	r1, #0
 80021f8:	207a      	movs	r0, #122	; 0x7a
 80021fa:	f7ff fd5f 	bl	8001cbc <enc28j60WriteOp>
	// copy the packet into the transmit buffer
	enc28j60WriteBuffer(len, packet);
 80021fe:	88fb      	ldrh	r3, [r7, #6]
 8002200:	6839      	ldr	r1, [r7, #0]
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff fdd4 	bl	8001db0 <enc28j60WriteBuffer>
	// send the contents of the transmit buffer onto the network
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
 8002208:	2208      	movs	r2, #8
 800220a:	211f      	movs	r1, #31
 800220c:	2080      	movs	r0, #128	; 0x80
 800220e:	f7ff fd55 	bl	8001cbc <enc28j60WriteOp>
        // Reset the transmit logic problem. See Rev. B4 Silicon Errata point 12.
}
 8002212:	bf00      	nop
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
	...

0800221c <enc28j60PacketReceive>:
// The packet will by headed by an ethernet header.
//      maxlen  The maximum acceptable length of a retrieved packet.
//      packet  Pointer where packet data should be stored.
// Returns: Packet length in bytes if a packet was retrieved, zero otherwise.
uint16_t enc28j60PacketReceive(uint16_t maxlen, uint8_t* packet)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	4603      	mov	r3, r0
 8002224:	6039      	str	r1, [r7, #0]
 8002226:	80fb      	strh	r3, [r7, #6]
        	uint16_t rxstat;
	uint16_t len;
	// check if a packet has been received and buffered
	//if( !(enc28j60Read(EIR) & EIR_PKTIF) ){
        // The above does not work. See Rev. B4 Silicon Errata point 6.
	if( enc28j60Read(EPKTCNT) ==0 ){
 8002228:	2039      	movs	r0, #57	; 0x39
 800222a:	f7ff fe1b 	bl	8001e64 <enc28j60Read>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d101      	bne.n	8002238 <enc28j60PacketReceive+0x1c>
		return(0);
 8002234:	2300      	movs	r3, #0
 8002236:	e04f      	b.n	80022d8 <enc28j60PacketReceive+0xbc>
        }

	// Set the read pointer to the start of the received packet
	enc28j60WriteWord(ERDPTL, gNextPacketPtr);
 8002238:	4b29      	ldr	r3, [pc, #164]	; (80022e0 <enc28j60PacketReceive+0xc4>)
 800223a:	881b      	ldrh	r3, [r3, #0]
 800223c:	4619      	mov	r1, r3
 800223e:	2000      	movs	r0, #0
 8002240:	f7ff fe23 	bl	8001e8a <enc28j60WriteWord>
	//enc28j60Write(ERDPTL, (gNextPacketPtr &0xFF));
	//enc28j60Write(ERDPTH, (gNextPacketPtr)>>8);
	// read the next packet pointer
	gNextPacketPtr  = enc28j60ReadBufferWord();
 8002244:	f7ff fda6 	bl	8001d94 <enc28j60ReadBufferWord>
 8002248:	4603      	mov	r3, r0
 800224a:	461a      	mov	r2, r3
 800224c:	4b24      	ldr	r3, [pc, #144]	; (80022e0 <enc28j60PacketReceive+0xc4>)
 800224e:	801a      	strh	r2, [r3, #0]
	//gNextPacketPtr  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
	//gNextPacketPtr |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
	// read the packet length (see datasheet page 43)
	len = enc28j60ReadBufferWord() - 4;
 8002250:	f7ff fda0 	bl	8001d94 <enc28j60ReadBufferWord>
 8002254:	4603      	mov	r3, r0
 8002256:	3b04      	subs	r3, #4
 8002258:	81fb      	strh	r3, [r7, #14]
	//len = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
	//len |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
        //len-=4; //remove the CRC count
	// read the receive status (see datasheet page 43)
	rxstat  = enc28j60ReadBufferWord();
 800225a:	f7ff fd9b 	bl	8001d94 <enc28j60ReadBufferWord>
 800225e:	4603      	mov	r3, r0
 8002260:	81bb      	strh	r3, [r7, #12]
	//rxstat  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
	//rxstat |= ((uint16_t)enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0))<<8;
	// limit retrieve length
        if (len>maxlen-1){
 8002262:	89fa      	ldrh	r2, [r7, #14]
 8002264:	88fb      	ldrh	r3, [r7, #6]
 8002266:	3b01      	subs	r3, #1
 8002268:	429a      	cmp	r2, r3
 800226a:	dd02      	ble.n	8002272 <enc28j60PacketReceive+0x56>
                len=maxlen-1;
 800226c:	88fb      	ldrh	r3, [r7, #6]
 800226e:	3b01      	subs	r3, #1
 8002270:	81fb      	strh	r3, [r7, #14]
        }
        // check CRC and symbol errors (see datasheet page 44, table 7-3):
        // The ERXFCON.CRCEN is set by default. Normally we should not
        // need to check this.
        if ((rxstat & 0x80)==0){
 8002272:	89bb      	ldrh	r3, [r7, #12]
 8002274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002278:	2b00      	cmp	r3, #0
 800227a:	d102      	bne.n	8002282 <enc28j60PacketReceive+0x66>
                // invalid
                len=0;
 800227c:	2300      	movs	r3, #0
 800227e:	81fb      	strh	r3, [r7, #14]
 8002280:	e004      	b.n	800228c <enc28j60PacketReceive+0x70>
        }else{
                // copy the packet from the receive buffer
                enc28j60ReadBuffer(len, packet);
 8002282:	89fb      	ldrh	r3, [r7, #14]
 8002284:	6839      	ldr	r1, [r7, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f7ff fd50 	bl	8001d2c <enc28j60ReadBuffer>
        }
	// Move the RX read pointer to the start of the next received packet
	// This frees the memory we just read out
	enc28j60WriteWord(ERXRDPTL, gNextPacketPtr );
 800228c:	4b14      	ldr	r3, [pc, #80]	; (80022e0 <enc28j60PacketReceive+0xc4>)
 800228e:	881b      	ldrh	r3, [r3, #0]
 8002290:	4619      	mov	r1, r3
 8002292:	200c      	movs	r0, #12
 8002294:	f7ff fdf9 	bl	8001e8a <enc28j60WriteWord>
	//enc28j60Write(ERXRDPTL, (gNextPacketPtr &0xFF));
	//enc28j60Write(ERXRDPTH, (gNextPacketPtr)>>8);
        // However, compensate for the errata point 13, rev B4: enver write an even address!
        if ((gNextPacketPtr - 1 < RXSTART_INIT)
 8002298:	4b11      	ldr	r3, [pc, #68]	; (80022e0 <enc28j60PacketReceive+0xc4>)
 800229a:	881b      	ldrh	r3, [r3, #0]
 800229c:	3b01      	subs	r3, #1
 800229e:	2b00      	cmp	r3, #0
 80022a0:	db06      	blt.n	80022b0 <enc28j60PacketReceive+0x94>
                || (gNextPacketPtr -1 > RXSTOP_INIT)) {
 80022a2:	4b0f      	ldr	r3, [pc, #60]	; (80022e0 <enc28j60PacketReceive+0xc4>)
 80022a4:	881b      	ldrh	r3, [r3, #0]
 80022a6:	3b01      	subs	r3, #1
 80022a8:	f641 12fe 	movw	r2, #6654	; 0x19fe
 80022ac:	4293      	cmp	r3, r2
 80022ae:	dd05      	ble.n	80022bc <enc28j60PacketReceive+0xa0>
                enc28j60WriteWord(ERXRDPTL, RXSTOP_INIT);
 80022b0:	f641 11fe 	movw	r1, #6654	; 0x19fe
 80022b4:	200c      	movs	r0, #12
 80022b6:	f7ff fde8 	bl	8001e8a <enc28j60WriteWord>
 80022ba:	e007      	b.n	80022cc <enc28j60PacketReceive+0xb0>
                //enc28j60Write(ERXRDPTL, (RXSTOP_INIT)&0xFF);
                //enc28j60Write(ERXRDPTH, (RXSTOP_INIT)>>8);
        } else {
                enc28j60WriteWord(ERXRDPTL, (gNextPacketPtr-1));
 80022bc:	4b08      	ldr	r3, [pc, #32]	; (80022e0 <enc28j60PacketReceive+0xc4>)
 80022be:	881b      	ldrh	r3, [r3, #0]
 80022c0:	3b01      	subs	r3, #1
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	4619      	mov	r1, r3
 80022c6:	200c      	movs	r0, #12
 80022c8:	f7ff fddf 	bl	8001e8a <enc28j60WriteWord>
                //enc28j60Write(ERXRDPTL, (gNextPacketPtr-1)&0xFF);
                //enc28j60Write(ERXRDPTH, (gNextPacketPtr-1)>>8);
        }
	// decrement the packet counter indicate we are done with this packet
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
 80022cc:	2240      	movs	r2, #64	; 0x40
 80022ce:	211e      	movs	r1, #30
 80022d0:	2080      	movs	r0, #128	; 0x80
 80022d2:	f7ff fcf3 	bl	8001cbc <enc28j60WriteOp>
	return(len);
 80022d6:	89fb      	ldrh	r3, [r7, #14]
        }
	// decrement the packet counter indicate we are done with this packet
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
	return(len);
*/
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3710      	adds	r7, #16
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	2000023e 	.word	0x2000023e

080022e4 <checksum>:
//
// For more information on how this algorithm works see:
// http://www.netfor2.com/checksum.html
// http://www.msc.uky.edu/ken/cs471/notes/chap3.htm
// The RFC has also a C code example: http://www.faqs.org/rfcs/rfc1071.html
uint16_t checksum(uint8_t *buf, uint16_t len,uint8_t type){
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	460b      	mov	r3, r1
 80022ee:	807b      	strh	r3, [r7, #2]
 80022f0:	4613      	mov	r3, r2
 80022f2:	707b      	strb	r3, [r7, #1]
        // type 0=ip , icmp
        //      1=udp
        //      2=tcp
        uint32_t sum = 0;
 80022f4:	2300      	movs	r3, #0
 80022f6:	60fb      	str	r3, [r7, #12]

        //if(type==0){    
        //        // do not add anything, standard IP checksum as described above
        //        // Usable for ICMP and IP header
        //}
        if(type==1){
 80022f8:	787b      	ldrb	r3, [r7, #1]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d107      	bne.n	800230e <checksum+0x2a>
                sum+=IP_PROTO_UDP_V; // protocol udp
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	3311      	adds	r3, #17
 8002302:	60fb      	str	r3, [r7, #12]
                // the length here is the length of udp (data+header len)
                // =length given to this function - (IP.scr+IP.dst length)
                sum+=len-8; // = real udp len
 8002304:	887a      	ldrh	r2, [r7, #2]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	4413      	add	r3, r2
 800230a:	3b08      	subs	r3, #8
 800230c:	60fb      	str	r3, [r7, #12]
        }
        if(type==2){
 800230e:	787b      	ldrb	r3, [r7, #1]
 8002310:	2b02      	cmp	r3, #2
 8002312:	d119      	bne.n	8002348 <checksum+0x64>
                sum+=IP_PROTO_TCP_V; 
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	3306      	adds	r3, #6
 8002318:	60fb      	str	r3, [r7, #12]
                // the length here is the length of tcp (data+header len)
                // =length given to this function - (IP.scr+IP.dst length)
                sum+=len-8; // = real tcp len
 800231a:	887a      	ldrh	r2, [r7, #2]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	4413      	add	r3, r2
 8002320:	3b08      	subs	r3, #8
 8002322:	60fb      	str	r3, [r7, #12]
        }
        // build the sum of 16bit words
        while(len >1){
 8002324:	e010      	b.n	8002348 <checksum+0x64>
                sum += 0xFFFF & (((uint32_t)*buf<<8)|*(buf+1));
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	021b      	lsls	r3, r3, #8
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	3201      	adds	r2, #1
 8002330:	7812      	ldrb	r2, [r2, #0]
 8002332:	4313      	orrs	r3, r2
 8002334:	b29b      	uxth	r3, r3
 8002336:	68fa      	ldr	r2, [r7, #12]
 8002338:	4413      	add	r3, r2
 800233a:	60fb      	str	r3, [r7, #12]
                buf+=2;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	3302      	adds	r3, #2
 8002340:	607b      	str	r3, [r7, #4]
                len-=2;
 8002342:	887b      	ldrh	r3, [r7, #2]
 8002344:	3b02      	subs	r3, #2
 8002346:	807b      	strh	r3, [r7, #2]
        while(len >1){
 8002348:	887b      	ldrh	r3, [r7, #2]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d8eb      	bhi.n	8002326 <checksum+0x42>
        }
        // if there is a byte left then add it (padded with zero)
        if (len){
 800234e:	887b      	ldrh	r3, [r7, #2]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d00c      	beq.n	800236e <checksum+0x8a>
                sum += ((uint32_t)(0xFF & *buf))<<8;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	021b      	lsls	r3, r3, #8
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	4413      	add	r3, r2
 800235e:	60fb      	str	r3, [r7, #12]
        }
        // now calculate the sum over the bytes in the sum
        // until the result is only 16bit long
        while (sum>>16){
 8002360:	e005      	b.n	800236e <checksum+0x8a>
                sum = (sum & 0xFFFF)+(sum >> 16);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	b29a      	uxth	r2, r3
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	0c1b      	lsrs	r3, r3, #16
 800236a:	4413      	add	r3, r2
 800236c:	60fb      	str	r3, [r7, #12]
        while (sum>>16){
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	0c1b      	lsrs	r3, r3, #16
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1f5      	bne.n	8002362 <checksum+0x7e>
        }
        // build 1's complement:
        return( (uint16_t) sum ^ 0xFFFF);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	b29b      	uxth	r3, r3
 800237a:	43db      	mvns	r3, r3
 800237c:	b29b      	uxth	r3, r3
}
 800237e:	4618      	mov	r0, r3
 8002380:	3714      	adds	r7, #20
 8002382:	46bd      	mov	sp, r7
 8002384:	bc80      	pop	{r7}
 8002386:	4770      	bx	lr

08002388 <init_ip_arp_udp_tcp>:

#endif

// This initializes the web server
// you must call this function once before you use any of the other functions:
void init_ip_arp_udp_tcp(uint8_t *mymac,uint8_t *myip,uint16_t port){
 8002388:	b480      	push	{r7}
 800238a:	b087      	sub	sp, #28
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	4613      	mov	r3, r2
 8002394:	80fb      	strh	r3, [r7, #6]
        uint8_t i=0;
 8002396:	2300      	movs	r3, #0
 8002398:	75fb      	strb	r3, [r7, #23]
        wwwport_h=(port>>8)&0xff;
 800239a:	88fb      	ldrh	r3, [r7, #6]
 800239c:	0a1b      	lsrs	r3, r3, #8
 800239e:	b29b      	uxth	r3, r3
 80023a0:	b2da      	uxtb	r2, r3
 80023a2:	4b14      	ldr	r3, [pc, #80]	; (80023f4 <init_ip_arp_udp_tcp+0x6c>)
 80023a4:	701a      	strb	r2, [r3, #0]
        wwwport_l=(port&0xff);
 80023a6:	88fb      	ldrh	r3, [r7, #6]
 80023a8:	b2da      	uxtb	r2, r3
 80023aa:	4b13      	ldr	r3, [pc, #76]	; (80023f8 <init_ip_arp_udp_tcp+0x70>)
 80023ac:	701a      	strb	r2, [r3, #0]
        while(i<4){
 80023ae:	e009      	b.n	80023c4 <init_ip_arp_udp_tcp+0x3c>
                ipaddr[i]=myip[i];
 80023b0:	7dfb      	ldrb	r3, [r7, #23]
 80023b2:	68ba      	ldr	r2, [r7, #8]
 80023b4:	441a      	add	r2, r3
 80023b6:	7dfb      	ldrb	r3, [r7, #23]
 80023b8:	7811      	ldrb	r1, [r2, #0]
 80023ba:	4a10      	ldr	r2, [pc, #64]	; (80023fc <init_ip_arp_udp_tcp+0x74>)
 80023bc:	54d1      	strb	r1, [r2, r3]
                i++;
 80023be:	7dfb      	ldrb	r3, [r7, #23]
 80023c0:	3301      	adds	r3, #1
 80023c2:	75fb      	strb	r3, [r7, #23]
        while(i<4){
 80023c4:	7dfb      	ldrb	r3, [r7, #23]
 80023c6:	2b03      	cmp	r3, #3
 80023c8:	d9f2      	bls.n	80023b0 <init_ip_arp_udp_tcp+0x28>
        }
        i=0;
 80023ca:	2300      	movs	r3, #0
 80023cc:	75fb      	strb	r3, [r7, #23]
        while(i<6){
 80023ce:	e009      	b.n	80023e4 <init_ip_arp_udp_tcp+0x5c>
                macaddr[i]=mymac[i];
 80023d0:	7dfb      	ldrb	r3, [r7, #23]
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	441a      	add	r2, r3
 80023d6:	7dfb      	ldrb	r3, [r7, #23]
 80023d8:	7811      	ldrb	r1, [r2, #0]
 80023da:	4a09      	ldr	r2, [pc, #36]	; (8002400 <init_ip_arp_udp_tcp+0x78>)
 80023dc:	54d1      	strb	r1, [r2, r3]
                i++;
 80023de:	7dfb      	ldrb	r3, [r7, #23]
 80023e0:	3301      	adds	r3, #1
 80023e2:	75fb      	strb	r3, [r7, #23]
        while(i<6){
 80023e4:	7dfb      	ldrb	r3, [r7, #23]
 80023e6:	2b05      	cmp	r3, #5
 80023e8:	d9f2      	bls.n	80023d0 <init_ip_arp_udp_tcp+0x48>
        }
}
 80023ea:	bf00      	nop
 80023ec:	371c      	adds	r7, #28
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bc80      	pop	{r7}
 80023f2:	4770      	bx	lr
 80023f4:	20000248 	.word	0x20000248
 80023f8:	20000018 	.word	0x20000018
 80023fc:	20000270 	.word	0x20000270
 8002400:	200004d4 	.word	0x200004d4

08002404 <check_ip_message_is_from>:

#ifndef DISABLE_IP_STACK

uint8_t check_ip_message_is_from(uint8_t *buf,uint8_t *ip)
{
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
        uint8_t i=0;
 800240e:	2300      	movs	r3, #0
 8002410:	73fb      	strb	r3, [r7, #15]
        while(i<4){
 8002412:	e010      	b.n	8002436 <check_ip_message_is_from+0x32>
                if(buf[IP_SRC_P+i]!=ip[i]){
 8002414:	7bfb      	ldrb	r3, [r7, #15]
 8002416:	331a      	adds	r3, #26
 8002418:	461a      	mov	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4413      	add	r3, r2
 800241e:	781a      	ldrb	r2, [r3, #0]
 8002420:	7bfb      	ldrb	r3, [r7, #15]
 8002422:	6839      	ldr	r1, [r7, #0]
 8002424:	440b      	add	r3, r1
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	429a      	cmp	r2, r3
 800242a:	d001      	beq.n	8002430 <check_ip_message_is_from+0x2c>
                        return(0);
 800242c:	2300      	movs	r3, #0
 800242e:	e006      	b.n	800243e <check_ip_message_is_from+0x3a>
                }
                i++;
 8002430:	7bfb      	ldrb	r3, [r7, #15]
 8002432:	3301      	adds	r3, #1
 8002434:	73fb      	strb	r3, [r7, #15]
        while(i<4){
 8002436:	7bfb      	ldrb	r3, [r7, #15]
 8002438:	2b03      	cmp	r3, #3
 800243a:	d9eb      	bls.n	8002414 <check_ip_message_is_from+0x10>
        }
        return(1);
 800243c:	2301      	movs	r3, #1
}
 800243e:	4618      	mov	r0, r3
 8002440:	3714      	adds	r7, #20
 8002442:	46bd      	mov	sp, r7
 8002444:	bc80      	pop	{r7}
 8002446:	4770      	bx	lr

08002448 <eth_type_is_arp_and_my_ip>:

uint8_t eth_type_is_arp_and_my_ip(uint8_t *buf,uint16_t len){
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	460b      	mov	r3, r1
 8002452:	807b      	strh	r3, [r7, #2]
        uint8_t i=0;
 8002454:	2300      	movs	r3, #0
 8002456:	73fb      	strb	r3, [r7, #15]
        //  
        if (len<41){
 8002458:	887b      	ldrh	r3, [r7, #2]
 800245a:	2b28      	cmp	r3, #40	; 0x28
 800245c:	d801      	bhi.n	8002462 <eth_type_is_arp_and_my_ip+0x1a>
                return(0);
 800245e:	2300      	movs	r3, #0
 8002460:	e01f      	b.n	80024a2 <eth_type_is_arp_and_my_ip+0x5a>
        }
        if(buf[ETH_TYPE_H_P] != ETHTYPE_ARP_H_V || 
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	330c      	adds	r3, #12
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	2b08      	cmp	r3, #8
 800246a:	d104      	bne.n	8002476 <eth_type_is_arp_and_my_ip+0x2e>
           buf[ETH_TYPE_L_P] != ETHTYPE_ARP_L_V){
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	330d      	adds	r3, #13
 8002470:	781b      	ldrb	r3, [r3, #0]
        if(buf[ETH_TYPE_H_P] != ETHTYPE_ARP_H_V || 
 8002472:	2b06      	cmp	r3, #6
 8002474:	d011      	beq.n	800249a <eth_type_is_arp_and_my_ip+0x52>
                return(0);
 8002476:	2300      	movs	r3, #0
 8002478:	e013      	b.n	80024a2 <eth_type_is_arp_and_my_ip+0x5a>
        }
        while(i<4){
                if(buf[ETH_ARP_DST_IP_P+i] != ipaddr[i]){
 800247a:	7bfb      	ldrb	r3, [r7, #15]
 800247c:	3326      	adds	r3, #38	; 0x26
 800247e:	461a      	mov	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4413      	add	r3, r2
 8002484:	781a      	ldrb	r2, [r3, #0]
 8002486:	7bfb      	ldrb	r3, [r7, #15]
 8002488:	4908      	ldr	r1, [pc, #32]	; (80024ac <eth_type_is_arp_and_my_ip+0x64>)
 800248a:	5ccb      	ldrb	r3, [r1, r3]
 800248c:	429a      	cmp	r2, r3
 800248e:	d001      	beq.n	8002494 <eth_type_is_arp_and_my_ip+0x4c>
                        return(0);
 8002490:	2300      	movs	r3, #0
 8002492:	e006      	b.n	80024a2 <eth_type_is_arp_and_my_ip+0x5a>
                }
                i++;
 8002494:	7bfb      	ldrb	r3, [r7, #15]
 8002496:	3301      	adds	r3, #1
 8002498:	73fb      	strb	r3, [r7, #15]
        while(i<4){
 800249a:	7bfb      	ldrb	r3, [r7, #15]
 800249c:	2b03      	cmp	r3, #3
 800249e:	d9ec      	bls.n	800247a <eth_type_is_arp_and_my_ip+0x32>
        }
        return(1);
 80024a0:	2301      	movs	r3, #1
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3714      	adds	r7, #20
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bc80      	pop	{r7}
 80024aa:	4770      	bx	lr
 80024ac:	20000270 	.word	0x20000270

080024b0 <eth_type_is_ip_and_my_ip>:

uint8_t eth_type_is_ip_and_my_ip(uint8_t *buf,uint16_t len){
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	460b      	mov	r3, r1
 80024ba:	807b      	strh	r3, [r7, #2]
        uint8_t i=0;
 80024bc:	2300      	movs	r3, #0
 80024be:	73fb      	strb	r3, [r7, #15]
        //eth+ip+udp header is 42
        if (len<42){
 80024c0:	887b      	ldrh	r3, [r7, #2]
 80024c2:	2b29      	cmp	r3, #41	; 0x29
 80024c4:	d801      	bhi.n	80024ca <eth_type_is_ip_and_my_ip+0x1a>
                return(0);
 80024c6:	2300      	movs	r3, #0
 80024c8:	e026      	b.n	8002518 <eth_type_is_ip_and_my_ip+0x68>
        }
        if(buf[ETH_TYPE_H_P]!=ETHTYPE_IP_H_V || 
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	330c      	adds	r3, #12
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	2b08      	cmp	r3, #8
 80024d2:	d104      	bne.n	80024de <eth_type_is_ip_and_my_ip+0x2e>
           buf[ETH_TYPE_L_P]!=ETHTYPE_IP_L_V){
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	330d      	adds	r3, #13
 80024d8:	781b      	ldrb	r3, [r3, #0]
        if(buf[ETH_TYPE_H_P]!=ETHTYPE_IP_H_V || 
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <eth_type_is_ip_and_my_ip+0x32>
                return(0);
 80024de:	2300      	movs	r3, #0
 80024e0:	e01a      	b.n	8002518 <eth_type_is_ip_and_my_ip+0x68>
        }
        if (buf[IP_HEADER_LEN_VER_P]!=0x45){
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	330e      	adds	r3, #14
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b45      	cmp	r3, #69	; 0x45
 80024ea:	d011      	beq.n	8002510 <eth_type_is_ip_and_my_ip+0x60>
                // must be IP V4 and 20 byte header
                return(0);
 80024ec:	2300      	movs	r3, #0
 80024ee:	e013      	b.n	8002518 <eth_type_is_ip_and_my_ip+0x68>
        }
        while(i<4){
                if(buf[IP_DST_P+i]!=ipaddr[i]){
 80024f0:	7bfb      	ldrb	r3, [r7, #15]
 80024f2:	331e      	adds	r3, #30
 80024f4:	461a      	mov	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4413      	add	r3, r2
 80024fa:	781a      	ldrb	r2, [r3, #0]
 80024fc:	7bfb      	ldrb	r3, [r7, #15]
 80024fe:	4909      	ldr	r1, [pc, #36]	; (8002524 <eth_type_is_ip_and_my_ip+0x74>)
 8002500:	5ccb      	ldrb	r3, [r1, r3]
 8002502:	429a      	cmp	r2, r3
 8002504:	d001      	beq.n	800250a <eth_type_is_ip_and_my_ip+0x5a>
                        return(0);
 8002506:	2300      	movs	r3, #0
 8002508:	e006      	b.n	8002518 <eth_type_is_ip_and_my_ip+0x68>
                }
                i++;
 800250a:	7bfb      	ldrb	r3, [r7, #15]
 800250c:	3301      	adds	r3, #1
 800250e:	73fb      	strb	r3, [r7, #15]
        while(i<4){
 8002510:	7bfb      	ldrb	r3, [r7, #15]
 8002512:	2b03      	cmp	r3, #3
 8002514:	d9ec      	bls.n	80024f0 <eth_type_is_ip_and_my_ip+0x40>
        }
        return(1);
 8002516:	2301      	movs	r3, #1
}
 8002518:	4618      	mov	r0, r3
 800251a:	3714      	adds	r7, #20
 800251c:	46bd      	mov	sp, r7
 800251e:	bc80      	pop	{r7}
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	20000270 	.word	0x20000270

08002528 <make_eth>:

// make a return eth header from a received eth packet
void make_eth(uint8_t *buf)
{
 8002528:	b480      	push	{r7}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
        uint8_t i=0;
 8002530:	2300      	movs	r3, #0
 8002532:	73fb      	strb	r3, [r7, #15]
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
 8002534:	e015      	b.n	8002562 <make_eth+0x3a>
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
 8002536:	7bfb      	ldrb	r3, [r7, #15]
 8002538:	3306      	adds	r3, #6
 800253a:	461a      	mov	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	441a      	add	r2, r3
 8002540:	7bfb      	ldrb	r3, [r7, #15]
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	440b      	add	r3, r1
 8002546:	7812      	ldrb	r2, [r2, #0]
 8002548:	701a      	strb	r2, [r3, #0]
                buf[ETH_SRC_MAC +i]=macaddr[i];
 800254a:	7bfa      	ldrb	r2, [r7, #15]
 800254c:	7bfb      	ldrb	r3, [r7, #15]
 800254e:	3306      	adds	r3, #6
 8002550:	4619      	mov	r1, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	440b      	add	r3, r1
 8002556:	4907      	ldr	r1, [pc, #28]	; (8002574 <make_eth+0x4c>)
 8002558:	5c8a      	ldrb	r2, [r1, r2]
 800255a:	701a      	strb	r2, [r3, #0]
                i++;
 800255c:	7bfb      	ldrb	r3, [r7, #15]
 800255e:	3301      	adds	r3, #1
 8002560:	73fb      	strb	r3, [r7, #15]
        while(i<6){
 8002562:	7bfb      	ldrb	r3, [r7, #15]
 8002564:	2b05      	cmp	r3, #5
 8002566:	d9e6      	bls.n	8002536 <make_eth+0xe>
        }
}
 8002568:	bf00      	nop
 800256a:	3714      	adds	r7, #20
 800256c:	46bd      	mov	sp, r7
 800256e:	bc80      	pop	{r7}
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	200004d4 	.word	0x200004d4

08002578 <fill_ip_hdr_checksum>:
		buf[ ETH_TYPE_L_P ] = ETHTYPE_IP_L_V;
}


void fill_ip_hdr_checksum(uint8_t *buf)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
        uint16_t ck;
        // clear the 2 byte checksum
        buf[IP_CHECKSUM_P]=0;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	3318      	adds	r3, #24
 8002584:	2200      	movs	r2, #0
 8002586:	701a      	strb	r2, [r3, #0]
        buf[IP_CHECKSUM_P+1]=0;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	3319      	adds	r3, #25
 800258c:	2200      	movs	r2, #0
 800258e:	701a      	strb	r2, [r3, #0]
        buf[IP_FLAGS_P]=0x40; // don't fragment
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3314      	adds	r3, #20
 8002594:	2240      	movs	r2, #64	; 0x40
 8002596:	701a      	strb	r2, [r3, #0]
        buf[IP_FLAGS_P+1]=0;  // fragement offset
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	3315      	adds	r3, #21
 800259c:	2200      	movs	r2, #0
 800259e:	701a      	strb	r2, [r3, #0]
        buf[IP_TTL_P]=64; // ttl
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	3316      	adds	r3, #22
 80025a4:	2240      	movs	r2, #64	; 0x40
 80025a6:	701a      	strb	r2, [r3, #0]
        // calculate the checksum:
        ck=checksum(&buf[IP_P], IP_HEADER_LEN,0);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	330e      	adds	r3, #14
 80025ac:	2200      	movs	r2, #0
 80025ae:	2114      	movs	r1, #20
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff fe97 	bl	80022e4 <checksum>
 80025b6:	4603      	mov	r3, r0
 80025b8:	81fb      	strh	r3, [r7, #14]
        buf[IP_CHECKSUM_P]=ck>>8;
 80025ba:	89fb      	ldrh	r3, [r7, #14]
 80025bc:	0a1b      	lsrs	r3, r3, #8
 80025be:	b29a      	uxth	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3318      	adds	r3, #24
 80025c4:	b2d2      	uxtb	r2, r2
 80025c6:	701a      	strb	r2, [r3, #0]
        buf[IP_CHECKSUM_P+1]=ck & 0xff;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3319      	adds	r3, #25
 80025cc:	89fa      	ldrh	r2, [r7, #14]
 80025ce:	b2d2      	uxtb	r2, r2
 80025d0:	701a      	strb	r2, [r3, #0]
}
 80025d2:	bf00      	nop
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
	...

080025dc <make_ip>:
        fill_ip_hdr_checksum(buf);
}


void make_ip(uint8_t *buf)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
        uint8_t i=0;
 80025e4:	2300      	movs	r3, #0
 80025e6:	73fb      	strb	r3, [r7, #15]
        while(i<4){
 80025e8:	e017      	b.n	800261a <make_ip+0x3e>
                buf[IP_DST_P+i]=buf[IP_SRC_P+i];
 80025ea:	7bfb      	ldrb	r3, [r7, #15]
 80025ec:	331a      	adds	r3, #26
 80025ee:	461a      	mov	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	441a      	add	r2, r3
 80025f4:	7bfb      	ldrb	r3, [r7, #15]
 80025f6:	331e      	adds	r3, #30
 80025f8:	4619      	mov	r1, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	440b      	add	r3, r1
 80025fe:	7812      	ldrb	r2, [r2, #0]
 8002600:	701a      	strb	r2, [r3, #0]
                buf[IP_SRC_P+i]=ipaddr[i];
 8002602:	7bfa      	ldrb	r2, [r7, #15]
 8002604:	7bfb      	ldrb	r3, [r7, #15]
 8002606:	331a      	adds	r3, #26
 8002608:	4619      	mov	r1, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	440b      	add	r3, r1
 800260e:	4908      	ldr	r1, [pc, #32]	; (8002630 <make_ip+0x54>)
 8002610:	5c8a      	ldrb	r2, [r1, r2]
 8002612:	701a      	strb	r2, [r3, #0]
                i++;
 8002614:	7bfb      	ldrb	r3, [r7, #15]
 8002616:	3301      	adds	r3, #1
 8002618:	73fb      	strb	r3, [r7, #15]
        while(i<4){
 800261a:	7bfb      	ldrb	r3, [r7, #15]
 800261c:	2b03      	cmp	r3, #3
 800261e:	d9e4      	bls.n	80025ea <make_ip+0xe>
        }
        fill_ip_hdr_checksum(buf);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f7ff ffa9 	bl	8002578 <fill_ip_hdr_checksum>
}
 8002626:	bf00      	nop
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	20000270 	.word	0x20000270

08002634 <step_seq>:

// swap seq and ack number and count ack number up
void step_seq(uint8_t *buf,uint16_t rel_ack_num,uint8_t cp_seq)
{
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	460b      	mov	r3, r1
 800263e:	807b      	strh	r3, [r7, #2]
 8002640:	4613      	mov	r3, r2
 8002642:	707b      	strb	r3, [r7, #1]
        uint8_t i;
        uint8_t tseq;
        i=4;
 8002644:	2304      	movs	r3, #4
 8002646:	73fb      	strb	r3, [r7, #15]
        // sequence numbers:
        // add the rel ack num to SEQACK
        while(i>0){
 8002648:	e02b      	b.n	80026a2 <step_seq+0x6e>
                rel_ack_num=buf[TCP_SEQ_H_P+i-1]+rel_ack_num;
 800264a:	7bfb      	ldrb	r3, [r7, #15]
 800264c:	3325      	adds	r3, #37	; 0x25
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	4413      	add	r3, r2
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	b29a      	uxth	r2, r3
 8002656:	887b      	ldrh	r3, [r7, #2]
 8002658:	4413      	add	r3, r2
 800265a:	807b      	strh	r3, [r7, #2]
                tseq=buf[TCP_SEQACK_H_P+i-1];
 800265c:	7bfb      	ldrb	r3, [r7, #15]
 800265e:	3329      	adds	r3, #41	; 0x29
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	4413      	add	r3, r2
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	73bb      	strb	r3, [r7, #14]
                buf[TCP_SEQACK_H_P+i-1]=0xff&rel_ack_num;
 8002668:	7bfb      	ldrb	r3, [r7, #15]
 800266a:	3329      	adds	r3, #41	; 0x29
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	4413      	add	r3, r2
 8002670:	887a      	ldrh	r2, [r7, #2]
 8002672:	b2d2      	uxtb	r2, r2
 8002674:	701a      	strb	r2, [r3, #0]
                if (cp_seq){
 8002676:	787b      	ldrb	r3, [r7, #1]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d006      	beq.n	800268a <step_seq+0x56>
                        // copy the acknum sent to us into the sequence number
                        buf[TCP_SEQ_H_P+i-1]=tseq;
 800267c:	7bfb      	ldrb	r3, [r7, #15]
 800267e:	3325      	adds	r3, #37	; 0x25
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	4413      	add	r3, r2
 8002684:	7bba      	ldrb	r2, [r7, #14]
 8002686:	701a      	strb	r2, [r3, #0]
 8002688:	e005      	b.n	8002696 <step_seq+0x62>
                }else{
                        buf[TCP_SEQ_H_P+i-1]= 0; // some preset vallue
 800268a:	7bfb      	ldrb	r3, [r7, #15]
 800268c:	3325      	adds	r3, #37	; 0x25
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	4413      	add	r3, r2
 8002692:	2200      	movs	r2, #0
 8002694:	701a      	strb	r2, [r3, #0]
                }
                rel_ack_num=rel_ack_num>>8;
 8002696:	887b      	ldrh	r3, [r7, #2]
 8002698:	0a1b      	lsrs	r3, r3, #8
 800269a:	807b      	strh	r3, [r7, #2]
                i--;
 800269c:	7bfb      	ldrb	r3, [r7, #15]
 800269e:	3b01      	subs	r3, #1
 80026a0:	73fb      	strb	r3, [r7, #15]
        while(i>0){
 80026a2:	7bfb      	ldrb	r3, [r7, #15]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1d0      	bne.n	800264a <step_seq+0x16>
        }
}
 80026a8:	bf00      	nop
 80026aa:	3714      	adds	r7, #20
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bc80      	pop	{r7}
 80026b0:	4770      	bx	lr

080026b2 <make_tcphead>:
//
// After calling this function you can fill in the first data byte at TCP_OPTIONS_P+4
// If cp_seq=0 then an initial sequence number is used (should be use in synack)
// otherwise it is copied from the packet we received
void make_tcphead(uint8_t *buf,uint16_t rel_ack_num,uint8_t cp_seq)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b084      	sub	sp, #16
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
 80026ba:	460b      	mov	r3, r1
 80026bc:	807b      	strh	r3, [r7, #2]
 80026be:	4613      	mov	r3, r2
 80026c0:	707b      	strb	r3, [r7, #1]
        uint8_t i;
        // copy ports:
        i=buf[TCP_DST_PORT_H_P];
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026c8:	73fb      	strb	r3, [r7, #15]
        buf[TCP_DST_PORT_H_P]=buf[TCP_SRC_PORT_H_P];
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	3324      	adds	r3, #36	; 0x24
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 80026d4:	701a      	strb	r2, [r3, #0]
        buf[TCP_SRC_PORT_H_P]=i;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	3322      	adds	r3, #34	; 0x22
 80026da:	7bfa      	ldrb	r2, [r7, #15]
 80026dc:	701a      	strb	r2, [r3, #0]
        //
        i=buf[TCP_DST_PORT_L_P];
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80026e4:	73fb      	strb	r3, [r7, #15]
        buf[TCP_DST_PORT_L_P]=buf[TCP_SRC_PORT_L_P];
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	3325      	adds	r3, #37	; 0x25
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 80026f0:	701a      	strb	r2, [r3, #0]
        buf[TCP_SRC_PORT_L_P]=i;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	3323      	adds	r3, #35	; 0x23
 80026f6:	7bfa      	ldrb	r2, [r7, #15]
 80026f8:	701a      	strb	r2, [r3, #0]
        step_seq(buf,rel_ack_num,cp_seq);
 80026fa:	787a      	ldrb	r2, [r7, #1]
 80026fc:	887b      	ldrh	r3, [r7, #2]
 80026fe:	4619      	mov	r1, r3
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f7ff ff97 	bl	8002634 <step_seq>
        // zero the checksum
        buf[TCP_CHECKSUM_H_P]=0;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	3332      	adds	r3, #50	; 0x32
 800270a:	2200      	movs	r2, #0
 800270c:	701a      	strb	r2, [r3, #0]
        buf[TCP_CHECKSUM_L_P]=0;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	3333      	adds	r3, #51	; 0x33
 8002712:	2200      	movs	r2, #0
 8002714:	701a      	strb	r2, [r3, #0]
        // no options:
        // 20 bytes:
        // The tcp header length is only a 4 bit field (the upper 4 bits).
        // It is calculated in units of 4 bytes.
        // E.g 20 bytes: 20/4=6 => 0x50=header len field
        buf[TCP_HEADER_LEN_P]=0x50;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	332e      	adds	r3, #46	; 0x2e
 800271a:	2250      	movs	r2, #80	; 0x50
 800271c:	701a      	strb	r2, [r3, #0]
}
 800271e:	bf00      	nop
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
	...

08002728 <make_arp_answer_from_request>:

void make_arp_answer_from_request(uint8_t *buf)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
        uint8_t i=0;
 8002730:	2300      	movs	r3, #0
 8002732:	73fb      	strb	r3, [r7, #15]
        //
        make_eth(buf);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f7ff fef7 	bl	8002528 <make_eth>
        buf[ETH_ARP_OPCODE_H_P]=ETH_ARP_OPCODE_REPLY_H_V;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	3314      	adds	r3, #20
 800273e:	2200      	movs	r2, #0
 8002740:	701a      	strb	r2, [r3, #0]
        buf[ETH_ARP_OPCODE_L_P]=ETH_ARP_OPCODE_REPLY_L_V;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	3315      	adds	r3, #21
 8002746:	2202      	movs	r2, #2
 8002748:	701a      	strb	r2, [r3, #0]
        // fill the mac addresses:
        while(i<6){
 800274a:	e017      	b.n	800277c <make_arp_answer_from_request+0x54>
                buf[ETH_ARP_DST_MAC_P+i]=buf[ETH_ARP_SRC_MAC_P+i];
 800274c:	7bfb      	ldrb	r3, [r7, #15]
 800274e:	3316      	adds	r3, #22
 8002750:	461a      	mov	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	441a      	add	r2, r3
 8002756:	7bfb      	ldrb	r3, [r7, #15]
 8002758:	3320      	adds	r3, #32
 800275a:	4619      	mov	r1, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	440b      	add	r3, r1
 8002760:	7812      	ldrb	r2, [r2, #0]
 8002762:	701a      	strb	r2, [r3, #0]
                buf[ETH_ARP_SRC_MAC_P+i]=macaddr[i];
 8002764:	7bfa      	ldrb	r2, [r7, #15]
 8002766:	7bfb      	ldrb	r3, [r7, #15]
 8002768:	3316      	adds	r3, #22
 800276a:	4619      	mov	r1, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	440b      	add	r3, r1
 8002770:	4917      	ldr	r1, [pc, #92]	; (80027d0 <make_arp_answer_from_request+0xa8>)
 8002772:	5c8a      	ldrb	r2, [r1, r2]
 8002774:	701a      	strb	r2, [r3, #0]
                i++;
 8002776:	7bfb      	ldrb	r3, [r7, #15]
 8002778:	3301      	adds	r3, #1
 800277a:	73fb      	strb	r3, [r7, #15]
        while(i<6){
 800277c:	7bfb      	ldrb	r3, [r7, #15]
 800277e:	2b05      	cmp	r3, #5
 8002780:	d9e4      	bls.n	800274c <make_arp_answer_from_request+0x24>
        }
        i=0;
 8002782:	2300      	movs	r3, #0
 8002784:	73fb      	strb	r3, [r7, #15]
        while(i<4){
 8002786:	e017      	b.n	80027b8 <make_arp_answer_from_request+0x90>
                buf[ETH_ARP_DST_IP_P+i]=buf[ETH_ARP_SRC_IP_P+i];
 8002788:	7bfb      	ldrb	r3, [r7, #15]
 800278a:	331c      	adds	r3, #28
 800278c:	461a      	mov	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	441a      	add	r2, r3
 8002792:	7bfb      	ldrb	r3, [r7, #15]
 8002794:	3326      	adds	r3, #38	; 0x26
 8002796:	4619      	mov	r1, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	440b      	add	r3, r1
 800279c:	7812      	ldrb	r2, [r2, #0]
 800279e:	701a      	strb	r2, [r3, #0]
                buf[ETH_ARP_SRC_IP_P+i]=ipaddr[i];
 80027a0:	7bfa      	ldrb	r2, [r7, #15]
 80027a2:	7bfb      	ldrb	r3, [r7, #15]
 80027a4:	331c      	adds	r3, #28
 80027a6:	4619      	mov	r1, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	440b      	add	r3, r1
 80027ac:	4909      	ldr	r1, [pc, #36]	; (80027d4 <make_arp_answer_from_request+0xac>)
 80027ae:	5c8a      	ldrb	r2, [r1, r2]
 80027b0:	701a      	strb	r2, [r3, #0]
                i++;
 80027b2:	7bfb      	ldrb	r3, [r7, #15]
 80027b4:	3301      	adds	r3, #1
 80027b6:	73fb      	strb	r3, [r7, #15]
        while(i<4){
 80027b8:	7bfb      	ldrb	r3, [r7, #15]
 80027ba:	2b03      	cmp	r3, #3
 80027bc:	d9e4      	bls.n	8002788 <make_arp_answer_from_request+0x60>
        }
        // eth+arp is 42 bytes:
        enc28j60PacketSend(42,buf); 
 80027be:	6879      	ldr	r1, [r7, #4]
 80027c0:	202a      	movs	r0, #42	; 0x2a
 80027c2:	f7ff fce7 	bl	8002194 <enc28j60PacketSend>
}
 80027c6:	bf00      	nop
 80027c8:	3710      	adds	r7, #16
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	200004d4 	.word	0x200004d4
 80027d4:	20000270 	.word	0x20000270

080027d8 <make_echo_reply_from_request>:

void make_echo_reply_from_request(uint8_t *buf,uint16_t len)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	460b      	mov	r3, r1
 80027e2:	807b      	strh	r3, [r7, #2]
        make_eth(buf);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f7ff fe9f 	bl	8002528 <make_eth>
        make_ip(buf);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f7ff fef6 	bl	80025dc <make_ip>
        buf[ICMP_TYPE_P]=ICMP_TYPE_ECHOREPLY_V;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	3322      	adds	r3, #34	; 0x22
 80027f4:	2200      	movs	r2, #0
 80027f6:	701a      	strb	r2, [r3, #0]
        // we changed only the icmp.type field from request(=8) to reply(=0).
        // we can therefore easily correct the checksum:
        if (buf[ICMP_CHECKSUM_P] > (0xff-0x08)){
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	3324      	adds	r3, #36	; 0x24
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	2bf7      	cmp	r3, #247	; 0xf7
 8002800:	d905      	bls.n	800280e <make_echo_reply_from_request+0x36>
                buf[ICMP_CHECKSUM_P+1]++;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	3325      	adds	r3, #37	; 0x25
 8002806:	781a      	ldrb	r2, [r3, #0]
 8002808:	3201      	adds	r2, #1
 800280a:	b2d2      	uxtb	r2, r2
 800280c:	701a      	strb	r2, [r3, #0]
        }
        buf[ICMP_CHECKSUM_P]+=0x08;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	3324      	adds	r3, #36	; 0x24
 8002812:	781a      	ldrb	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	3324      	adds	r3, #36	; 0x24
 8002818:	3208      	adds	r2, #8
 800281a:	b2d2      	uxtb	r2, r2
 800281c:	701a      	strb	r2, [r3, #0]
        //
        enc28j60PacketSend(len,buf);
 800281e:	887b      	ldrh	r3, [r7, #2]
 8002820:	6879      	ldr	r1, [r7, #4]
 8002822:	4618      	mov	r0, r3
 8002824:	f7ff fcb6 	bl	8002194 <enc28j60PacketSend>
}
 8002828:	bf00      	nop
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <make_tcp_synack_from_syn>:
        enc28j60PacketSend(UDP_HEADER_LEN+IP_HEADER_LEN+ETH_HEADER_LEN+datalen,buf);
}

// this is for the server not the client:
void make_tcp_synack_from_syn(uint8_t *buf)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
        uint16_t ck;
        make_eth(buf);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f7ff fe75 	bl	8002528 <make_eth>
        // total length field in the IP header must be set:
        // 20 bytes IP + 24 bytes (20tcp+4tcp options)
        buf[IP_TOTLEN_H_P]=0;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	3310      	adds	r3, #16
 8002842:	2200      	movs	r2, #0
 8002844:	701a      	strb	r2, [r3, #0]
        buf[IP_TOTLEN_L_P]=IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+4;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	3311      	adds	r3, #17
 800284a:	222c      	movs	r2, #44	; 0x2c
 800284c:	701a      	strb	r2, [r3, #0]
        make_ip(buf);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f7ff fec4 	bl	80025dc <make_ip>
        buf[TCP_FLAGS_P]=TCP_FLAGS_SYNACK_V;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	332f      	adds	r3, #47	; 0x2f
 8002858:	2212      	movs	r2, #18
 800285a:	701a      	strb	r2, [r3, #0]
        make_tcphead(buf,1,0);
 800285c:	2200      	movs	r2, #0
 800285e:	2101      	movs	r1, #1
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f7ff ff26 	bl	80026b2 <make_tcphead>
        // put an inital seq number
        buf[TCP_SEQ_H_P+0]= 0;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	3326      	adds	r3, #38	; 0x26
 800286a:	2200      	movs	r2, #0
 800286c:	701a      	strb	r2, [r3, #0]
        buf[TCP_SEQ_H_P+1]= 0;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	3327      	adds	r3, #39	; 0x27
 8002872:	2200      	movs	r2, #0
 8002874:	701a      	strb	r2, [r3, #0]
        // we step only the second byte, this allows us to send packts 
        // with 255 bytes, 512  or 765 (step by 3) without generating
        // overlapping numbers.
        buf[TCP_SEQ_H_P+2]= seqnum; 
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	3328      	adds	r3, #40	; 0x28
 800287a:	4a23      	ldr	r2, [pc, #140]	; (8002908 <make_tcp_synack_from_syn+0xd8>)
 800287c:	7812      	ldrb	r2, [r2, #0]
 800287e:	701a      	strb	r2, [r3, #0]
        buf[TCP_SEQ_H_P+3]= 0;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	3329      	adds	r3, #41	; 0x29
 8002884:	2200      	movs	r2, #0
 8002886:	701a      	strb	r2, [r3, #0]
        // step the inititial seq num by something we will not use
        // during this tcp session:
        seqnum+=3;
 8002888:	4b1f      	ldr	r3, [pc, #124]	; (8002908 <make_tcp_synack_from_syn+0xd8>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	3303      	adds	r3, #3
 800288e:	b2da      	uxtb	r2, r3
 8002890:	4b1d      	ldr	r3, [pc, #116]	; (8002908 <make_tcp_synack_from_syn+0xd8>)
 8002892:	701a      	strb	r2, [r3, #0]
        // add an mss options field with MSS to 1280:
        // 1280 in hex is 0x500
        buf[TCP_OPTIONS_P]=2;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	3336      	adds	r3, #54	; 0x36
 8002898:	2202      	movs	r2, #2
 800289a:	701a      	strb	r2, [r3, #0]
        buf[TCP_OPTIONS_P+1]=4;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3337      	adds	r3, #55	; 0x37
 80028a0:	2204      	movs	r2, #4
 80028a2:	701a      	strb	r2, [r3, #0]
        buf[TCP_OPTIONS_P+2]=0x05;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	3338      	adds	r3, #56	; 0x38
 80028a8:	2205      	movs	r2, #5
 80028aa:	701a      	strb	r2, [r3, #0]
        buf[TCP_OPTIONS_P+3]=0x0;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	3339      	adds	r3, #57	; 0x39
 80028b0:	2200      	movs	r2, #0
 80028b2:	701a      	strb	r2, [r3, #0]
        // The tcp header length is only a 4 bit field (the upper 4 bits).
        // It is calculated in units of 4 bytes.
        // E.g 24 bytes: 24/4=6 => 0x60=header len field
        buf[TCP_HEADER_LEN_P]=0x60;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	332e      	adds	r3, #46	; 0x2e
 80028b8:	2260      	movs	r2, #96	; 0x60
 80028ba:	701a      	strb	r2, [r3, #0]
        // here we must just be sure that the web browser contacting us
        // will send only one get packet
        buf[TCP_WIN_SIZE]=0x5; // 1400=0x578
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	3330      	adds	r3, #48	; 0x30
 80028c0:	2205      	movs	r2, #5
 80028c2:	701a      	strb	r2, [r3, #0]
        buf[TCP_WIN_SIZE+1]=0x78;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	3331      	adds	r3, #49	; 0x31
 80028c8:	2278      	movs	r2, #120	; 0x78
 80028ca:	701a      	strb	r2, [r3, #0]
        // calculate the checksum, len=8 (start from ip.src) + TCP_HEADER_LEN_PLAIN + 4 (one option: mss)
        ck=checksum(&buf[IP_SRC_P], 8+TCP_HEADER_LEN_PLAIN+4,2);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	331a      	adds	r3, #26
 80028d0:	2202      	movs	r2, #2
 80028d2:	2120      	movs	r1, #32
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff fd05 	bl	80022e4 <checksum>
 80028da:	4603      	mov	r3, r0
 80028dc:	81fb      	strh	r3, [r7, #14]
        buf[TCP_CHECKSUM_H_P]=ck>>8;
 80028de:	89fb      	ldrh	r3, [r7, #14]
 80028e0:	0a1b      	lsrs	r3, r3, #8
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	3332      	adds	r3, #50	; 0x32
 80028e8:	b2d2      	uxtb	r2, r2
 80028ea:	701a      	strb	r2, [r3, #0]
        buf[TCP_CHECKSUM_L_P]=ck& 0xff;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	3333      	adds	r3, #51	; 0x33
 80028f0:	89fa      	ldrh	r2, [r7, #14]
 80028f2:	b2d2      	uxtb	r2, r2
 80028f4:	701a      	strb	r2, [r3, #0]
        // add 4 for option mss:
        enc28j60PacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+4+ETH_HEADER_LEN,buf);
 80028f6:	6879      	ldr	r1, [r7, #4]
 80028f8:	203a      	movs	r0, #58	; 0x3a
 80028fa:	f7ff fc4b 	bl	8002194 <enc28j60PacketSend>
}
 80028fe:	bf00      	nop
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	2000001d 	.word	0x2000001d

0800290c <get_tcp_data_len>:

// do some basic length calculations and store the result in static variables
uint16_t get_tcp_data_len(uint8_t *buf)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
        int16_t i;
        i=(((int16_t)buf[IP_TOTLEN_H_P])<<8)|(buf[IP_TOTLEN_L_P]&0xff);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	3310      	adds	r3, #16
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	021b      	lsls	r3, r3, #8
 800291c:	b21a      	sxth	r2, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	3311      	adds	r3, #17
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	b21b      	sxth	r3, r3
 8002926:	4313      	orrs	r3, r2
 8002928:	81fb      	strh	r3, [r7, #14]
        i-=IP_HEADER_LEN;
 800292a:	89fb      	ldrh	r3, [r7, #14]
 800292c:	3b14      	subs	r3, #20
 800292e:	b29b      	uxth	r3, r3
 8002930:	81fb      	strh	r3, [r7, #14]
        i-=(buf[TCP_HEADER_LEN_P]>>4)*4; // generate len in bytes;
 8002932:	89fa      	ldrh	r2, [r7, #14]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	332e      	adds	r3, #46	; 0x2e
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	091b      	lsrs	r3, r3, #4
 800293c:	b2db      	uxtb	r3, r3
 800293e:	b29b      	uxth	r3, r3
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	b29b      	uxth	r3, r3
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	b29b      	uxth	r3, r3
 8002948:	81fb      	strh	r3, [r7, #14]
        if (i<=0){
 800294a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800294e:	2b00      	cmp	r3, #0
 8002950:	dc01      	bgt.n	8002956 <get_tcp_data_len+0x4a>
                i=0;
 8002952:	2300      	movs	r3, #0
 8002954:	81fb      	strh	r3, [r7, #14]
        }
        return((uint16_t)i);
 8002956:	89fb      	ldrh	r3, [r7, #14]
}
 8002958:	4618      	mov	r0, r3
 800295a:	3714      	adds	r7, #20
 800295c:	46bd      	mov	sp, r7
 800295e:	bc80      	pop	{r7}
 8002960:	4770      	bx	lr

08002962 <fill_tcp_data_len>:
}
*/

// fill a binary string of len data into the tcp packet
uint16_t fill_tcp_data_len(uint8_t *buf,uint16_t pos, const char *s, uint16_t len)
{
 8002962:	b480      	push	{r7}
 8002964:	b085      	sub	sp, #20
 8002966:	af00      	add	r7, sp, #0
 8002968:	60f8      	str	r0, [r7, #12]
 800296a:	607a      	str	r2, [r7, #4]
 800296c:	461a      	mov	r2, r3
 800296e:	460b      	mov	r3, r1
 8002970:	817b      	strh	r3, [r7, #10]
 8002972:	4613      	mov	r3, r2
 8002974:	813b      	strh	r3, [r7, #8]
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while (len) {
 8002976:	e010      	b.n	800299a <fill_tcp_data_len+0x38>
                buf[TCP_CHECKSUM_L_P+3+pos]=*s;
 8002978:	897b      	ldrh	r3, [r7, #10]
 800297a:	3336      	adds	r3, #54	; 0x36
 800297c:	461a      	mov	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	4413      	add	r3, r2
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	7812      	ldrb	r2, [r2, #0]
 8002986:	701a      	strb	r2, [r3, #0]
                pos++;
 8002988:	897b      	ldrh	r3, [r7, #10]
 800298a:	3301      	adds	r3, #1
 800298c:	817b      	strh	r3, [r7, #10]
                s++;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	3301      	adds	r3, #1
 8002992:	607b      	str	r3, [r7, #4]
                len--;
 8002994:	893b      	ldrh	r3, [r7, #8]
 8002996:	3b01      	subs	r3, #1
 8002998:	813b      	strh	r3, [r7, #8]
        while (len) {
 800299a:	893b      	ldrh	r3, [r7, #8]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d1eb      	bne.n	8002978 <fill_tcp_data_len+0x16>
        }
        return(pos);
 80029a0:	897b      	ldrh	r3, [r7, #10]
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3714      	adds	r7, #20
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bc80      	pop	{r7}
 80029aa:	4770      	bx	lr

080029ac <fill_tcp_data>:

// fill in tcp data at position pos. pos=0 means start of
// tcp data. Returns the position at which the string after
// this string could be filled.
uint16_t fill_tcp_data(uint8_t *buf,uint16_t pos, const char *s)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	460b      	mov	r3, r1
 80029b6:	607a      	str	r2, [r7, #4]
 80029b8:	817b      	strh	r3, [r7, #10]
        return(fill_tcp_data_len(buf,pos,(char*)s,strlen(s)));
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7fd fbc6 	bl	800014c <strlen>
 80029c0:	4603      	mov	r3, r0
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	8979      	ldrh	r1, [r7, #10]
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f7ff ffca 	bl	8002962 <fill_tcp_data_len>
 80029ce:	4603      	mov	r3, r0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <make_tcp_ack_from_any>:

// Make just an ack packet with no tcp data inside
// This will modify the eth/ip/tcp header 
void make_tcp_ack_from_any(uint8_t *buf,int16_t datlentoack,uint8_t addflags)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	460b      	mov	r3, r1
 80029e2:	807b      	strh	r3, [r7, #2]
 80029e4:	4613      	mov	r3, r2
 80029e6:	707b      	strb	r3, [r7, #1]
        uint16_t j;
        make_eth(buf);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f7ff fd9d 	bl	8002528 <make_eth>
        // fill the header:
        buf[TCP_FLAGS_P]=TCP_FLAGS_ACK_V|addflags;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	332f      	adds	r3, #47	; 0x2f
 80029f2:	787a      	ldrb	r2, [r7, #1]
 80029f4:	f042 0210 	orr.w	r2, r2, #16
 80029f8:	b2d2      	uxtb	r2, r2
 80029fa:	701a      	strb	r2, [r3, #0]
        if (addflags==TCP_FLAGS_RST_V){
 80029fc:	787b      	ldrb	r3, [r7, #1]
 80029fe:	2b04      	cmp	r3, #4
 8002a00:	d106      	bne.n	8002a10 <make_tcp_ack_from_any+0x38>
                make_tcphead(buf,datlentoack,1); 
 8002a02:	887b      	ldrh	r3, [r7, #2]
 8002a04:	2201      	movs	r2, #1
 8002a06:	4619      	mov	r1, r3
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f7ff fe52 	bl	80026b2 <make_tcphead>
 8002a0e:	e00b      	b.n	8002a28 <make_tcp_ack_from_any+0x50>
        } else {
                if (datlentoack==0){
 8002a10:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d101      	bne.n	8002a1c <make_tcp_ack_from_any+0x44>
                        // if there is no data then we must still acknoledge one packet
                        datlentoack = 1;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	807b      	strh	r3, [r7, #2]
                }
                make_tcphead(buf,datlentoack,1); // no options
 8002a1c:	887b      	ldrh	r3, [r7, #2]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	4619      	mov	r1, r3
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f7ff fe45 	bl	80026b2 <make_tcphead>
        }
        // total length field in the IP header must be set:
        // 20 bytes IP + 20 bytes tcp (when no options) 
        j=IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN;
 8002a28:	2328      	movs	r3, #40	; 0x28
 8002a2a:	81fb      	strh	r3, [r7, #14]
        buf[IP_TOTLEN_H_P]=j>>8;
 8002a2c:	89fb      	ldrh	r3, [r7, #14]
 8002a2e:	0a1b      	lsrs	r3, r3, #8
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	3310      	adds	r3, #16
 8002a36:	b2d2      	uxtb	r2, r2
 8002a38:	701a      	strb	r2, [r3, #0]
        buf[IP_TOTLEN_L_P]=j& 0xff;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	3311      	adds	r3, #17
 8002a3e:	89fa      	ldrh	r2, [r7, #14]
 8002a40:	b2d2      	uxtb	r2, r2
 8002a42:	701a      	strb	r2, [r3, #0]
        make_ip(buf);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f7ff fdc9 	bl	80025dc <make_ip>
        // use a low window size otherwise we have to have
        // timers and can not just react on every packet.
        buf[TCP_WIN_SIZE]=0x4; // 1024=0x400
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	3330      	adds	r3, #48	; 0x30
 8002a4e:	2204      	movs	r2, #4
 8002a50:	701a      	strb	r2, [r3, #0]
        buf[TCP_WIN_SIZE+1]=0x0;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	3331      	adds	r3, #49	; 0x31
 8002a56:	2200      	movs	r2, #0
 8002a58:	701a      	strb	r2, [r3, #0]
        // calculate the checksum, len=8 (start from ip.src) + TCP_HEADER_LEN_PLAIN + data len
        j=checksum(&buf[IP_SRC_P], 8+TCP_HEADER_LEN_PLAIN,2);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	331a      	adds	r3, #26
 8002a5e:	2202      	movs	r2, #2
 8002a60:	211c      	movs	r1, #28
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7ff fc3e 	bl	80022e4 <checksum>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	81fb      	strh	r3, [r7, #14]
        buf[TCP_CHECKSUM_H_P]=j>>8;
 8002a6c:	89fb      	ldrh	r3, [r7, #14]
 8002a6e:	0a1b      	lsrs	r3, r3, #8
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	3332      	adds	r3, #50	; 0x32
 8002a76:	b2d2      	uxtb	r2, r2
 8002a78:	701a      	strb	r2, [r3, #0]
        buf[TCP_CHECKSUM_L_P]=j& 0xff;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	3333      	adds	r3, #51	; 0x33
 8002a7e:	89fa      	ldrh	r2, [r7, #14]
 8002a80:	b2d2      	uxtb	r2, r2
 8002a82:	701a      	strb	r2, [r3, #0]
        enc28j60PacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+ETH_HEADER_LEN,buf);
 8002a84:	6879      	ldr	r1, [r7, #4]
 8002a86:	2036      	movs	r0, #54	; 0x36
 8002a88:	f7ff fb84 	bl	8002194 <enc28j60PacketSend>
}
 8002a8c:	bf00      	nop
 8002a8e:	3710      	adds	r7, #16
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <make_tcp_ack_with_data_noflags>:
// You can use this function only immediately after make_tcp_ack_from_any
// This is because this function will NOT modify the eth/ip/tcp header except for
// length and checksum
// You must set TCP_FLAGS before calling this
void make_tcp_ack_with_data_noflags(uint8_t *buf,uint16_t dlen)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	807b      	strh	r3, [r7, #2]
        uint16_t j;
        // total length field in the IP header must be set:
        // 20 bytes IP + 20 bytes tcp (when no options) + len of data
        j=IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+dlen;
 8002aa0:	887b      	ldrh	r3, [r7, #2]
 8002aa2:	3328      	adds	r3, #40	; 0x28
 8002aa4:	81fb      	strh	r3, [r7, #14]
        buf[IP_TOTLEN_H_P]=j>>8;
 8002aa6:	89fb      	ldrh	r3, [r7, #14]
 8002aa8:	0a1b      	lsrs	r3, r3, #8
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	3310      	adds	r3, #16
 8002ab0:	b2d2      	uxtb	r2, r2
 8002ab2:	701a      	strb	r2, [r3, #0]
        buf[IP_TOTLEN_L_P]=j& 0xff;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	3311      	adds	r3, #17
 8002ab8:	89fa      	ldrh	r2, [r7, #14]
 8002aba:	b2d2      	uxtb	r2, r2
 8002abc:	701a      	strb	r2, [r3, #0]
        fill_ip_hdr_checksum(buf);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f7ff fd5a 	bl	8002578 <fill_ip_hdr_checksum>
        // zero the checksum
        buf[TCP_CHECKSUM_H_P]=0;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	3332      	adds	r3, #50	; 0x32
 8002ac8:	2200      	movs	r2, #0
 8002aca:	701a      	strb	r2, [r3, #0]
        buf[TCP_CHECKSUM_L_P]=0;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	3333      	adds	r3, #51	; 0x33
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	701a      	strb	r2, [r3, #0]
        // calculate the checksum, len=8 (start from ip.src) + TCP_HEADER_LEN_PLAIN + data len
        j=checksum(&buf[IP_SRC_P], 8+TCP_HEADER_LEN_PLAIN+dlen,2);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f103 001a 	add.w	r0, r3, #26
 8002ada:	887b      	ldrh	r3, [r7, #2]
 8002adc:	331c      	adds	r3, #28
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	2202      	movs	r2, #2
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	f7ff fbfe 	bl	80022e4 <checksum>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	81fb      	strh	r3, [r7, #14]
        buf[TCP_CHECKSUM_H_P]=j>>8;
 8002aec:	89fb      	ldrh	r3, [r7, #14]
 8002aee:	0a1b      	lsrs	r3, r3, #8
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	3332      	adds	r3, #50	; 0x32
 8002af6:	b2d2      	uxtb	r2, r2
 8002af8:	701a      	strb	r2, [r3, #0]
        buf[TCP_CHECKSUM_L_P]=j& 0xff;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	3333      	adds	r3, #51	; 0x33
 8002afe:	89fa      	ldrh	r2, [r7, #14]
 8002b00:	b2d2      	uxtb	r2, r2
 8002b02:	701a      	strb	r2, [r3, #0]
        enc28j60PacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+dlen+ETH_HEADER_LEN,buf);
 8002b04:	887b      	ldrh	r3, [r7, #2]
 8002b06:	3336      	adds	r3, #54	; 0x36
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	6879      	ldr	r1, [r7, #4]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7ff fb41 	bl	8002194 <enc28j60PacketSend>
}
 8002b12:	bf00      	nop
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
	...

08002b1c <www_server_reply>:
// dlen is the amount of tcp data (http data) we send in this packet
// You can use this function only immediately after make_tcp_ack_from_any
// This is because this function will NOT modify the eth/ip/tcp header except for
// length and checksum
void www_server_reply(uint8_t *buf,uint16_t dlen)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	460b      	mov	r3, r1
 8002b26:	807b      	strh	r3, [r7, #2]
        make_tcp_ack_from_any(buf,info_data_len,0); // send ack for http get
 8002b28:	4b0a      	ldr	r3, [pc, #40]	; (8002b54 <www_server_reply+0x38>)
 8002b2a:	881b      	ldrh	r3, [r3, #0]
 8002b2c:	b21b      	sxth	r3, r3
 8002b2e:	2200      	movs	r2, #0
 8002b30:	4619      	mov	r1, r3
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f7ff ff50 	bl	80029d8 <make_tcp_ack_from_any>
        // fill the header:
        // This code requires that we send only one data packet
        // because we keep no state information. We must therefore set
        // the fin here:
        buf[TCP_FLAGS_P]=TCP_FLAGS_ACK_V|TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	332f      	adds	r3, #47	; 0x2f
 8002b3c:	2219      	movs	r2, #25
 8002b3e:	701a      	strb	r2, [r3, #0]
        make_tcp_ack_with_data_noflags(buf,dlen); // send data
 8002b40:	887b      	ldrh	r3, [r7, #2]
 8002b42:	4619      	mov	r1, r3
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f7ff ffa5 	bl	8002a94 <make_tcp_ack_with_data_noflags>
}
 8002b4a:	bf00      	nop
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	20000274 	.word	0x20000274

08002b58 <fill_buf_p>:

#if defined (NTP_client) ||  defined (WOL_client) || defined (UDP_client) || defined (TCP_client) || defined (PING_client)
// fill buffer with a prog-mem string - CHANGED TO NON PROGMEM!
void fill_buf_p(uint8_t *buf,uint16_t len, const char *s)
{   
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	460b      	mov	r3, r1
 8002b62:	607a      	str	r2, [r7, #4]
 8002b64:	817b      	strh	r3, [r7, #10]
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while (len) {
 8002b66:	e00c      	b.n	8002b82 <fill_buf_p+0x2a>
                *buf=*s;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	781a      	ldrb	r2, [r3, #0]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	701a      	strb	r2, [r3, #0]
                buf++;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	3301      	adds	r3, #1
 8002b74:	60fb      	str	r3, [r7, #12]
                s++;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	3301      	adds	r3, #1
 8002b7a:	607b      	str	r3, [r7, #4]
                len--;
 8002b7c:	897b      	ldrh	r3, [r7, #10]
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	817b      	strh	r3, [r7, #10]
        while (len) {
 8002b82:	897b      	ldrh	r3, [r7, #10]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d1ef      	bne.n	8002b68 <fill_buf_p+0x10>
        } 

}
 8002b88:	bf00      	nop
 8002b8a:	3714      	adds	r7, #20
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bc80      	pop	{r7}
 8002b90:	4770      	bx	lr
	...

08002b94 <send_udp_prepare>:
// 2) You just allocate a large enough buffer for you data and you call send_udp and nothing else
// needs to be done.
//
// send_udp sends via gwip, you must call client_set_gwip at startup
void send_udp_prepare(uint8_t *buf,uint16_t sport, uint8_t *dip, uint16_t dport)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	607a      	str	r2, [r7, #4]
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	817b      	strh	r3, [r7, #10]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	813b      	strh	r3, [r7, #8]
        uint8_t i=0;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	75fb      	strb	r3, [r7, #23]
        while(i<6){
 8002bac:	e012      	b.n	8002bd4 <send_udp_prepare+0x40>
                buf[ETH_DST_MAC +i]=gwmacaddr[i]; // gw mac in local lan or host mac
 8002bae:	7dfa      	ldrb	r2, [r7, #23]
 8002bb0:	7dfb      	ldrb	r3, [r7, #23]
 8002bb2:	68f9      	ldr	r1, [r7, #12]
 8002bb4:	440b      	add	r3, r1
 8002bb6:	4936      	ldr	r1, [pc, #216]	; (8002c90 <send_udp_prepare+0xfc>)
 8002bb8:	5c8a      	ldrb	r2, [r1, r2]
 8002bba:	701a      	strb	r2, [r3, #0]
                buf[ETH_SRC_MAC +i]=macaddr[i];
 8002bbc:	7dfa      	ldrb	r2, [r7, #23]
 8002bbe:	7dfb      	ldrb	r3, [r7, #23]
 8002bc0:	3306      	adds	r3, #6
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	440b      	add	r3, r1
 8002bc8:	4932      	ldr	r1, [pc, #200]	; (8002c94 <send_udp_prepare+0x100>)
 8002bca:	5c8a      	ldrb	r2, [r1, r2]
 8002bcc:	701a      	strb	r2, [r3, #0]
                i++;
 8002bce:	7dfb      	ldrb	r3, [r7, #23]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	75fb      	strb	r3, [r7, #23]
        while(i<6){
 8002bd4:	7dfb      	ldrb	r3, [r7, #23]
 8002bd6:	2b05      	cmp	r3, #5
 8002bd8:	d9e9      	bls.n	8002bae <send_udp_prepare+0x1a>
        }
        buf[ETH_TYPE_H_P] = ETHTYPE_IP_H_V;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	330c      	adds	r3, #12
 8002bde:	2208      	movs	r2, #8
 8002be0:	701a      	strb	r2, [r3, #0]
        buf[ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	330d      	adds	r3, #13
 8002be6:	2200      	movs	r2, #0
 8002be8:	701a      	strb	r2, [r3, #0]
        fill_buf_p(&buf[IP_P],9,iphdr);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	330e      	adds	r3, #14
 8002bee:	4a2a      	ldr	r2, [pc, #168]	; (8002c98 <send_udp_prepare+0x104>)
 8002bf0:	2109      	movs	r1, #9
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7ff ffb0 	bl	8002b58 <fill_buf_p>
        // total length field in the IP header must be set:
        buf[IP_TOTLEN_H_P]=0;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	3310      	adds	r3, #16
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	701a      	strb	r2, [r3, #0]
        // done in transmit: buf[IP_TOTLEN_L_P]=IP_HEADER_LEN+UDP_HEADER_LEN+datalen;
        buf[IP_PROTO_P]=IP_PROTO_UDP_V;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	3317      	adds	r3, #23
 8002c04:	2211      	movs	r2, #17
 8002c06:	701a      	strb	r2, [r3, #0]
        i=0;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	75fb      	strb	r3, [r7, #23]
        while(i<4){
 8002c0c:	e015      	b.n	8002c3a <send_udp_prepare+0xa6>
                buf[IP_DST_P+i]=dip[i];
 8002c0e:	7dfb      	ldrb	r3, [r7, #23]
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	441a      	add	r2, r3
 8002c14:	7dfb      	ldrb	r3, [r7, #23]
 8002c16:	331e      	adds	r3, #30
 8002c18:	4619      	mov	r1, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	440b      	add	r3, r1
 8002c1e:	7812      	ldrb	r2, [r2, #0]
 8002c20:	701a      	strb	r2, [r3, #0]
                buf[IP_SRC_P+i]=ipaddr[i];
 8002c22:	7dfa      	ldrb	r2, [r7, #23]
 8002c24:	7dfb      	ldrb	r3, [r7, #23]
 8002c26:	331a      	adds	r3, #26
 8002c28:	4619      	mov	r1, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	440b      	add	r3, r1
 8002c2e:	491b      	ldr	r1, [pc, #108]	; (8002c9c <send_udp_prepare+0x108>)
 8002c30:	5c8a      	ldrb	r2, [r1, r2]
 8002c32:	701a      	strb	r2, [r3, #0]
                i++;
 8002c34:	7dfb      	ldrb	r3, [r7, #23]
 8002c36:	3301      	adds	r3, #1
 8002c38:	75fb      	strb	r3, [r7, #23]
        while(i<4){
 8002c3a:	7dfb      	ldrb	r3, [r7, #23]
 8002c3c:	2b03      	cmp	r3, #3
 8002c3e:	d9e6      	bls.n	8002c0e <send_udp_prepare+0x7a>
        }
        // done in transmit: fill_ip_hdr_checksum(buf);
        buf[UDP_DST_PORT_H_P]=(dport>>8);
 8002c40:	893b      	ldrh	r3, [r7, #8]
 8002c42:	0a1b      	lsrs	r3, r3, #8
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	3324      	adds	r3, #36	; 0x24
 8002c4a:	b2d2      	uxtb	r2, r2
 8002c4c:	701a      	strb	r2, [r3, #0]
        buf[UDP_DST_PORT_L_P]=0xff&dport; 
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	3325      	adds	r3, #37	; 0x25
 8002c52:	893a      	ldrh	r2, [r7, #8]
 8002c54:	b2d2      	uxtb	r2, r2
 8002c56:	701a      	strb	r2, [r3, #0]
        buf[UDP_SRC_PORT_H_P]=(sport>>8);
 8002c58:	897b      	ldrh	r3, [r7, #10]
 8002c5a:	0a1b      	lsrs	r3, r3, #8
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	3322      	adds	r3, #34	; 0x22
 8002c62:	b2d2      	uxtb	r2, r2
 8002c64:	701a      	strb	r2, [r3, #0]
        buf[UDP_SRC_PORT_L_P]=sport&0xff; 
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	3323      	adds	r3, #35	; 0x23
 8002c6a:	897a      	ldrh	r2, [r7, #10]
 8002c6c:	b2d2      	uxtb	r2, r2
 8002c6e:	701a      	strb	r2, [r3, #0]
        buf[UDP_LEN_H_P]=0;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	3326      	adds	r3, #38	; 0x26
 8002c74:	2200      	movs	r2, #0
 8002c76:	701a      	strb	r2, [r3, #0]
        // done in transmit: buf[UDP_LEN_L_P]=UDP_HEADER_LEN+datalen;
        // zero the checksum
        buf[UDP_CHECKSUM_H_P]=0;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	3328      	adds	r3, #40	; 0x28
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	701a      	strb	r2, [r3, #0]
        buf[UDP_CHECKSUM_L_P]=0;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	3329      	adds	r3, #41	; 0x29
 8002c84:	2200      	movs	r2, #0
 8002c86:	701a      	strb	r2, [r3, #0]
        // copy the data:
        // now starting with the first byte at buf[UDP_DATA_P]
}
 8002c88:	bf00      	nop
 8002c8a:	3718      	adds	r7, #24
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	20000264 	.word	0x20000264
 8002c94:	200004d4 	.word	0x200004d4
 8002c98:	08004fcc 	.word	0x08004fcc
 8002c9c:	20000270 	.word	0x20000270

08002ca0 <send_udp_transmit>:

void send_udp_transmit(uint8_t *buf,uint16_t datalen)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	460b      	mov	r3, r1
 8002caa:	807b      	strh	r3, [r7, #2]
        uint16_t ck;
        buf[IP_TOTLEN_H_P]=(IP_HEADER_LEN+UDP_HEADER_LEN+datalen) >> 8;
 8002cac:	887b      	ldrh	r3, [r7, #2]
 8002cae:	331c      	adds	r3, #28
 8002cb0:	121a      	asrs	r2, r3, #8
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	3310      	adds	r3, #16
 8002cb6:	b2d2      	uxtb	r2, r2
 8002cb8:	701a      	strb	r2, [r3, #0]
        buf[IP_TOTLEN_L_P]=(IP_HEADER_LEN+UDP_HEADER_LEN+datalen) & 0xff;
 8002cba:	887b      	ldrh	r3, [r7, #2]
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	3311      	adds	r3, #17
 8002cc2:	321c      	adds	r2, #28
 8002cc4:	b2d2      	uxtb	r2, r2
 8002cc6:	701a      	strb	r2, [r3, #0]
        fill_ip_hdr_checksum(buf);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f7ff fc55 	bl	8002578 <fill_ip_hdr_checksum>
        //buf[UDP_LEN_L_P]=UDP_HEADER_LEN+datalen;
        buf[UDP_LEN_H_P]=(UDP_HEADER_LEN+datalen) >>8;
 8002cce:	887b      	ldrh	r3, [r7, #2]
 8002cd0:	3308      	adds	r3, #8
 8002cd2:	121a      	asrs	r2, r3, #8
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	3326      	adds	r3, #38	; 0x26
 8002cd8:	b2d2      	uxtb	r2, r2
 8002cda:	701a      	strb	r2, [r3, #0]
        buf[UDP_LEN_L_P]=(UDP_HEADER_LEN+datalen) & 0xff;
 8002cdc:	887b      	ldrh	r3, [r7, #2]
 8002cde:	b2da      	uxtb	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	3327      	adds	r3, #39	; 0x27
 8002ce4:	3208      	adds	r2, #8
 8002ce6:	b2d2      	uxtb	r2, r2
 8002ce8:	701a      	strb	r2, [r3, #0]

        //
        ck=checksum(&buf[IP_SRC_P], 16 + datalen,1);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f103 001a 	add.w	r0, r3, #26
 8002cf0:	887b      	ldrh	r3, [r7, #2]
 8002cf2:	3310      	adds	r3, #16
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	f7ff faf3 	bl	80022e4 <checksum>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	81fb      	strh	r3, [r7, #14]
        buf[UDP_CHECKSUM_H_P]=ck>>8;
 8002d02:	89fb      	ldrh	r3, [r7, #14]
 8002d04:	0a1b      	lsrs	r3, r3, #8
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	3328      	adds	r3, #40	; 0x28
 8002d0c:	b2d2      	uxtb	r2, r2
 8002d0e:	701a      	strb	r2, [r3, #0]
        buf[UDP_CHECKSUM_L_P]=ck& 0xff;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	3329      	adds	r3, #41	; 0x29
 8002d14:	89fa      	ldrh	r2, [r7, #14]
 8002d16:	b2d2      	uxtb	r2, r2
 8002d18:	701a      	strb	r2, [r3, #0]
        enc28j60PacketSend(UDP_HEADER_LEN+IP_HEADER_LEN+ETH_HEADER_LEN+datalen,buf);
 8002d1a:	887b      	ldrh	r3, [r7, #2]
 8002d1c:	332a      	adds	r3, #42	; 0x2a
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	6879      	ldr	r1, [r7, #4]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7ff fa36 	bl	8002194 <enc28j60PacketSend>
}
 8002d28:	bf00      	nop
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <client_arp_whohas>:
#endif // WOL_client

#if defined (NTP_client) || defined (UDP_client) || defined (TCP_client) || defined (PING_client)
// make a arp request
void client_arp_whohas(uint8_t *buf,uint8_t *ip_we_search)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
        uint8_t i=0;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	73fb      	strb	r3, [r7, #15]
        //
        while(i<6){
 8002d3e:	e010      	b.n	8002d62 <client_arp_whohas+0x32>
                buf[ETH_DST_MAC +i]=0xff;
 8002d40:	7bfb      	ldrb	r3, [r7, #15]
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	4413      	add	r3, r2
 8002d46:	22ff      	movs	r2, #255	; 0xff
 8002d48:	701a      	strb	r2, [r3, #0]
                buf[ETH_SRC_MAC +i]=macaddr[i];
 8002d4a:	7bfa      	ldrb	r2, [r7, #15]
 8002d4c:	7bfb      	ldrb	r3, [r7, #15]
 8002d4e:	3306      	adds	r3, #6
 8002d50:	4619      	mov	r1, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	440b      	add	r3, r1
 8002d56:	492e      	ldr	r1, [pc, #184]	; (8002e10 <client_arp_whohas+0xe0>)
 8002d58:	5c8a      	ldrb	r2, [r1, r2]
 8002d5a:	701a      	strb	r2, [r3, #0]
                i++;
 8002d5c:	7bfb      	ldrb	r3, [r7, #15]
 8002d5e:	3301      	adds	r3, #1
 8002d60:	73fb      	strb	r3, [r7, #15]
        while(i<6){
 8002d62:	7bfb      	ldrb	r3, [r7, #15]
 8002d64:	2b05      	cmp	r3, #5
 8002d66:	d9eb      	bls.n	8002d40 <client_arp_whohas+0x10>
        }
        buf[ETH_TYPE_H_P] = ETHTYPE_ARP_H_V;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	330c      	adds	r3, #12
 8002d6c:	2208      	movs	r2, #8
 8002d6e:	701a      	strb	r2, [r3, #0]
        buf[ETH_TYPE_L_P] = ETHTYPE_ARP_L_V;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	330d      	adds	r3, #13
 8002d74:	2206      	movs	r2, #6
 8002d76:	701a      	strb	r2, [r3, #0]
        fill_buf_p(&buf[ETH_ARP_P],8,arpreqhdr);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	330e      	adds	r3, #14
 8002d7c:	4a25      	ldr	r2, [pc, #148]	; (8002e14 <client_arp_whohas+0xe4>)
 8002d7e:	2108      	movs	r1, #8
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff fee9 	bl	8002b58 <fill_buf_p>
        i=0;
 8002d86:	2300      	movs	r3, #0
 8002d88:	73fb      	strb	r3, [r7, #15]
        while(i<6){
 8002d8a:	e012      	b.n	8002db2 <client_arp_whohas+0x82>
                buf[ETH_ARP_SRC_MAC_P +i]=macaddr[i];
 8002d8c:	7bfa      	ldrb	r2, [r7, #15]
 8002d8e:	7bfb      	ldrb	r3, [r7, #15]
 8002d90:	3316      	adds	r3, #22
 8002d92:	4619      	mov	r1, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	440b      	add	r3, r1
 8002d98:	491d      	ldr	r1, [pc, #116]	; (8002e10 <client_arp_whohas+0xe0>)
 8002d9a:	5c8a      	ldrb	r2, [r1, r2]
 8002d9c:	701a      	strb	r2, [r3, #0]
                buf[ETH_ARP_DST_MAC_P+i]=0;
 8002d9e:	7bfb      	ldrb	r3, [r7, #15]
 8002da0:	3320      	adds	r3, #32
 8002da2:	461a      	mov	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4413      	add	r3, r2
 8002da8:	2200      	movs	r2, #0
 8002daa:	701a      	strb	r2, [r3, #0]
                i++;
 8002dac:	7bfb      	ldrb	r3, [r7, #15]
 8002dae:	3301      	adds	r3, #1
 8002db0:	73fb      	strb	r3, [r7, #15]
        while(i<6){
 8002db2:	7bfb      	ldrb	r3, [r7, #15]
 8002db4:	2b05      	cmp	r3, #5
 8002db6:	d9e9      	bls.n	8002d8c <client_arp_whohas+0x5c>
        }
        i=0;
 8002db8:	2300      	movs	r3, #0
 8002dba:	73fb      	strb	r3, [r7, #15]
        while(i<4){
 8002dbc:	e015      	b.n	8002dea <client_arp_whohas+0xba>
                buf[ETH_ARP_DST_IP_P+i]=*(ip_we_search +i);
 8002dbe:	7bfb      	ldrb	r3, [r7, #15]
 8002dc0:	683a      	ldr	r2, [r7, #0]
 8002dc2:	441a      	add	r2, r3
 8002dc4:	7bfb      	ldrb	r3, [r7, #15]
 8002dc6:	3326      	adds	r3, #38	; 0x26
 8002dc8:	4619      	mov	r1, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	440b      	add	r3, r1
 8002dce:	7812      	ldrb	r2, [r2, #0]
 8002dd0:	701a      	strb	r2, [r3, #0]
                buf[ETH_ARP_SRC_IP_P+i]=ipaddr[i];
 8002dd2:	7bfa      	ldrb	r2, [r7, #15]
 8002dd4:	7bfb      	ldrb	r3, [r7, #15]
 8002dd6:	331c      	adds	r3, #28
 8002dd8:	4619      	mov	r1, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	440b      	add	r3, r1
 8002dde:	490e      	ldr	r1, [pc, #56]	; (8002e18 <client_arp_whohas+0xe8>)
 8002de0:	5c8a      	ldrb	r2, [r1, r2]
 8002de2:	701a      	strb	r2, [r3, #0]
                i++;
 8002de4:	7bfb      	ldrb	r3, [r7, #15]
 8002de6:	3301      	adds	r3, #1
 8002de8:	73fb      	strb	r3, [r7, #15]
        while(i<4){
 8002dea:	7bfb      	ldrb	r3, [r7, #15]
 8002dec:	2b03      	cmp	r3, #3
 8002dee:	d9e6      	bls.n	8002dbe <client_arp_whohas+0x8e>
        }
       	waitgwmac|=WGW_ACCEPT_ARP_REPLY;
 8002df0:	4b0a      	ldr	r3, [pc, #40]	; (8002e1c <client_arp_whohas+0xec>)
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	f043 0308 	orr.w	r3, r3, #8
 8002dfa:	b2da      	uxtb	r2, r3
 8002dfc:	4b07      	ldr	r3, [pc, #28]	; (8002e1c <client_arp_whohas+0xec>)
 8002dfe:	701a      	strb	r2, [r3, #0]

        // 0x2a=42=len of packet
        enc28j60PacketSend(0x2a,buf);
 8002e00:	6879      	ldr	r1, [r7, #4]
 8002e02:	202a      	movs	r0, #42	; 0x2a
 8002e04:	f7ff f9c6 	bl	8002194 <enc28j60PacketSend>
}
 8002e08:	bf00      	nop
 8002e0a:	3710      	adds	r7, #16
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	200004d4 	.word	0x200004d4
 8002e14:	08004fc4 	.word	0x08004fc4
 8002e18:	20000270 	.word	0x20000270
 8002e1c:	2000001c 	.word	0x2000001c

08002e20 <client_store_gw_mac>:


// store the mac addr from an arp reply
// no len check here, you must first call eth_type_is_arp_and_my_ip
uint8_t client_store_gw_mac(uint8_t *buf)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b085      	sub	sp, #20
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
        uint8_t i=0;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	73fb      	strb	r3, [r7, #15]
        while(i<4){
 8002e2c:	e00f      	b.n	8002e4e <client_store_gw_mac+0x2e>
                if(buf[ETH_ARP_SRC_IP_P+i]!=gwip[i]){
 8002e2e:	7bfb      	ldrb	r3, [r7, #15]
 8002e30:	331c      	adds	r3, #28
 8002e32:	461a      	mov	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4413      	add	r3, r2
 8002e38:	781a      	ldrb	r2, [r3, #0]
 8002e3a:	7bfb      	ldrb	r3, [r7, #15]
 8002e3c:	4911      	ldr	r1, [pc, #68]	; (8002e84 <client_store_gw_mac+0x64>)
 8002e3e:	5ccb      	ldrb	r3, [r1, r3]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d001      	beq.n	8002e48 <client_store_gw_mac+0x28>
                        return(0);
 8002e44:	2300      	movs	r3, #0
 8002e46:	e018      	b.n	8002e7a <client_store_gw_mac+0x5a>
                }
                i++;
 8002e48:	7bfb      	ldrb	r3, [r7, #15]
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	73fb      	strb	r3, [r7, #15]
        while(i<4){
 8002e4e:	7bfb      	ldrb	r3, [r7, #15]
 8002e50:	2b03      	cmp	r3, #3
 8002e52:	d9ec      	bls.n	8002e2e <client_store_gw_mac+0xe>
        }
        i=0;
 8002e54:	2300      	movs	r3, #0
 8002e56:	73fb      	strb	r3, [r7, #15]
        while(i<6){
 8002e58:	e00b      	b.n	8002e72 <client_store_gw_mac+0x52>
                gwmacaddr[i]=buf[ETH_ARP_SRC_MAC_P +i];
 8002e5a:	7bfb      	ldrb	r3, [r7, #15]
 8002e5c:	3316      	adds	r3, #22
 8002e5e:	461a      	mov	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	441a      	add	r2, r3
 8002e64:	7bfb      	ldrb	r3, [r7, #15]
 8002e66:	7811      	ldrb	r1, [r2, #0]
 8002e68:	4a07      	ldr	r2, [pc, #28]	; (8002e88 <client_store_gw_mac+0x68>)
 8002e6a:	54d1      	strb	r1, [r2, r3]
                i++;
 8002e6c:	7bfb      	ldrb	r3, [r7, #15]
 8002e6e:	3301      	adds	r3, #1
 8002e70:	73fb      	strb	r3, [r7, #15]
        while(i<6){
 8002e72:	7bfb      	ldrb	r3, [r7, #15]
 8002e74:	2b05      	cmp	r3, #5
 8002e76:	d9f0      	bls.n	8002e5a <client_store_gw_mac+0x3a>
        }
        return(1);
 8002e78:	2301      	movs	r3, #1
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3714      	adds	r7, #20
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bc80      	pop	{r7}
 8002e82:	4770      	bx	lr
 8002e84:	20000260 	.word	0x20000260
 8002e88:	20000264 	.word	0x20000264

08002e8c <client_set_gwip>:
        }
}
*/

void client_set_gwip(uint8_t *gwipaddr)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b085      	sub	sp, #20
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
        uint8_t i=0;
 8002e94:	2300      	movs	r3, #0
 8002e96:	73fb      	strb	r3, [r7, #15]
        waitgwmac=WGW_INITIAL_ARP; // causes an arp request in the packet loop
 8002e98:	4b0a      	ldr	r3, [pc, #40]	; (8002ec4 <client_set_gwip+0x38>)
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	701a      	strb	r2, [r3, #0]
        while(i<4){
 8002e9e:	e009      	b.n	8002eb4 <client_set_gwip+0x28>
                gwip[i]=gwipaddr[i];
 8002ea0:	7bfb      	ldrb	r3, [r7, #15]
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	441a      	add	r2, r3
 8002ea6:	7bfb      	ldrb	r3, [r7, #15]
 8002ea8:	7811      	ldrb	r1, [r2, #0]
 8002eaa:	4a07      	ldr	r2, [pc, #28]	; (8002ec8 <client_set_gwip+0x3c>)
 8002eac:	54d1      	strb	r1, [r2, r3]
                i++;
 8002eae:	7bfb      	ldrb	r3, [r7, #15]
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	73fb      	strb	r3, [r7, #15]
        while(i<4){
 8002eb4:	7bfb      	ldrb	r3, [r7, #15]
 8002eb6:	2b03      	cmp	r3, #3
 8002eb8:	d9f2      	bls.n	8002ea0 <client_set_gwip+0x14>
        }
}
 8002eba:	bf00      	nop
 8002ebc:	3714      	adds	r7, #20
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bc80      	pop	{r7}
 8002ec2:	4770      	bx	lr
 8002ec4:	2000001c 	.word	0x2000001c
 8002ec8:	20000260 	.word	0x20000260

08002ecc <client_syn>:
}

#if defined (TCP_client)
// Make a tcp syn packet
void client_syn(uint8_t *buf,uint8_t srcport,uint8_t dstport_h,uint8_t dstport_l)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	4608      	mov	r0, r1
 8002ed6:	4611      	mov	r1, r2
 8002ed8:	461a      	mov	r2, r3
 8002eda:	4603      	mov	r3, r0
 8002edc:	70fb      	strb	r3, [r7, #3]
 8002ede:	460b      	mov	r3, r1
 8002ee0:	70bb      	strb	r3, [r7, #2]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	707b      	strb	r3, [r7, #1]
        uint16_t ck;
        uint8_t i=0;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	73fb      	strb	r3, [r7, #15]
        // -- make the main part of the eth/IP/tcp header:
        while(i<6){
 8002eea:	e012      	b.n	8002f12 <client_syn+0x46>
                buf[ETH_DST_MAC +i]=gwmacaddr[i]; // gw mac in local lan or host mac
 8002eec:	7bfa      	ldrb	r2, [r7, #15]
 8002eee:	7bfb      	ldrb	r3, [r7, #15]
 8002ef0:	6879      	ldr	r1, [r7, #4]
 8002ef2:	440b      	add	r3, r1
 8002ef4:	495f      	ldr	r1, [pc, #380]	; (8003074 <client_syn+0x1a8>)
 8002ef6:	5c8a      	ldrb	r2, [r1, r2]
 8002ef8:	701a      	strb	r2, [r3, #0]
                buf[ETH_SRC_MAC +i]=macaddr[i];
 8002efa:	7bfa      	ldrb	r2, [r7, #15]
 8002efc:	7bfb      	ldrb	r3, [r7, #15]
 8002efe:	3306      	adds	r3, #6
 8002f00:	4619      	mov	r1, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	440b      	add	r3, r1
 8002f06:	495c      	ldr	r1, [pc, #368]	; (8003078 <client_syn+0x1ac>)
 8002f08:	5c8a      	ldrb	r2, [r1, r2]
 8002f0a:	701a      	strb	r2, [r3, #0]
                i++;
 8002f0c:	7bfb      	ldrb	r3, [r7, #15]
 8002f0e:	3301      	adds	r3, #1
 8002f10:	73fb      	strb	r3, [r7, #15]
        while(i<6){
 8002f12:	7bfb      	ldrb	r3, [r7, #15]
 8002f14:	2b05      	cmp	r3, #5
 8002f16:	d9e9      	bls.n	8002eec <client_syn+0x20>
        }
        buf[ETH_TYPE_H_P] = ETHTYPE_IP_H_V;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	330c      	adds	r3, #12
 8002f1c:	2208      	movs	r2, #8
 8002f1e:	701a      	strb	r2, [r3, #0]
        buf[ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	330d      	adds	r3, #13
 8002f24:	2200      	movs	r2, #0
 8002f26:	701a      	strb	r2, [r3, #0]
        fill_buf_p(&buf[IP_P],9,iphdr);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	330e      	adds	r3, #14
 8002f2c:	4a53      	ldr	r2, [pc, #332]	; (800307c <client_syn+0x1b0>)
 8002f2e:	2109      	movs	r1, #9
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7ff fe11 	bl	8002b58 <fill_buf_p>
        buf[IP_TOTLEN_L_P]=44; // good for syn
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	3311      	adds	r3, #17
 8002f3a:	222c      	movs	r2, #44	; 0x2c
 8002f3c:	701a      	strb	r2, [r3, #0]
        buf[IP_PROTO_P]=IP_PROTO_TCP_V;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	3317      	adds	r3, #23
 8002f42:	2206      	movs	r2, #6
 8002f44:	701a      	strb	r2, [r3, #0]
        i=0;
 8002f46:	2300      	movs	r3, #0
 8002f48:	73fb      	strb	r3, [r7, #15]
        while(i<4){
 8002f4a:	e014      	b.n	8002f76 <client_syn+0xaa>
                buf[IP_DST_P+i]=tcpsrvip[i];
 8002f4c:	7bfa      	ldrb	r2, [r7, #15]
 8002f4e:	7bfb      	ldrb	r3, [r7, #15]
 8002f50:	331e      	adds	r3, #30
 8002f52:	4619      	mov	r1, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	440b      	add	r3, r1
 8002f58:	4949      	ldr	r1, [pc, #292]	; (8003080 <client_syn+0x1b4>)
 8002f5a:	5c8a      	ldrb	r2, [r1, r2]
 8002f5c:	701a      	strb	r2, [r3, #0]
                buf[IP_SRC_P+i]=ipaddr[i];
 8002f5e:	7bfa      	ldrb	r2, [r7, #15]
 8002f60:	7bfb      	ldrb	r3, [r7, #15]
 8002f62:	331a      	adds	r3, #26
 8002f64:	4619      	mov	r1, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	440b      	add	r3, r1
 8002f6a:	4946      	ldr	r1, [pc, #280]	; (8003084 <client_syn+0x1b8>)
 8002f6c:	5c8a      	ldrb	r2, [r1, r2]
 8002f6e:	701a      	strb	r2, [r3, #0]
                i++;
 8002f70:	7bfb      	ldrb	r3, [r7, #15]
 8002f72:	3301      	adds	r3, #1
 8002f74:	73fb      	strb	r3, [r7, #15]
        while(i<4){
 8002f76:	7bfb      	ldrb	r3, [r7, #15]
 8002f78:	2b03      	cmp	r3, #3
 8002f7a:	d9e7      	bls.n	8002f4c <client_syn+0x80>
        }
        fill_ip_hdr_checksum(buf);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f7ff fafb 	bl	8002578 <fill_ip_hdr_checksum>
        buf[TCP_DST_PORT_H_P]=dstport_h;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	3324      	adds	r3, #36	; 0x24
 8002f86:	78ba      	ldrb	r2, [r7, #2]
 8002f88:	701a      	strb	r2, [r3, #0]
        buf[TCP_DST_PORT_L_P]=dstport_l;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	3325      	adds	r3, #37	; 0x25
 8002f8e:	787a      	ldrb	r2, [r7, #1]
 8002f90:	701a      	strb	r2, [r3, #0]
        buf[TCP_SRC_PORT_H_P]=TCPCLIENT_SRC_PORT_H;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	3322      	adds	r3, #34	; 0x22
 8002f96:	220b      	movs	r2, #11
 8002f98:	701a      	strb	r2, [r3, #0]
        buf[TCP_SRC_PORT_L_P]=srcport; // lower 8 bit of src port
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	3323      	adds	r3, #35	; 0x23
 8002f9e:	78fa      	ldrb	r2, [r7, #3]
 8002fa0:	701a      	strb	r2, [r3, #0]
        i=0;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	73fb      	strb	r3, [r7, #15]
        // zero out sequence number and acknowledgement number
        while(i<8){
 8002fa6:	e009      	b.n	8002fbc <client_syn+0xf0>
                buf[TCP_SEQ_H_P+i]=0;
 8002fa8:	7bfb      	ldrb	r3, [r7, #15]
 8002faa:	3326      	adds	r3, #38	; 0x26
 8002fac:	461a      	mov	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	701a      	strb	r2, [r3, #0]
                i++;
 8002fb6:	7bfb      	ldrb	r3, [r7, #15]
 8002fb8:	3301      	adds	r3, #1
 8002fba:	73fb      	strb	r3, [r7, #15]
        while(i<8){
 8002fbc:	7bfb      	ldrb	r3, [r7, #15]
 8002fbe:	2b07      	cmp	r3, #7
 8002fc0:	d9f2      	bls.n	8002fa8 <client_syn+0xdc>
        // -- header ready 
        // put inital seq number
        // we step only the second byte, this allows us to send packts 
        // with 255 bytes 512 (if we step the initial seqnum by 2)
        // or 765 (step by 3)
        buf[TCP_SEQ_H_P+2]= seqnum; 
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	3328      	adds	r3, #40	; 0x28
 8002fc6:	4a30      	ldr	r2, [pc, #192]	; (8003088 <client_syn+0x1bc>)
 8002fc8:	7812      	ldrb	r2, [r2, #0]
 8002fca:	701a      	strb	r2, [r3, #0]
        // step the inititial seq num by something we will not use
        // during this tcp session:
        seqnum+=3;
 8002fcc:	4b2e      	ldr	r3, [pc, #184]	; (8003088 <client_syn+0x1bc>)
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	3303      	adds	r3, #3
 8002fd2:	b2da      	uxtb	r2, r3
 8002fd4:	4b2c      	ldr	r3, [pc, #176]	; (8003088 <client_syn+0x1bc>)
 8002fd6:	701a      	strb	r2, [r3, #0]
        buf[TCP_HEADER_LEN_P]=0x60; // 0x60=24 len: (0x60>>4) * 4
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	332e      	adds	r3, #46	; 0x2e
 8002fdc:	2260      	movs	r2, #96	; 0x60
 8002fde:	701a      	strb	r2, [r3, #0]
        buf[TCP_FLAGS_P]=TCP_FLAGS_SYN_V;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	332f      	adds	r3, #47	; 0x2f
 8002fe4:	2202      	movs	r2, #2
 8002fe6:	701a      	strb	r2, [r3, #0]
        // use a low window size otherwise we have to have
        // timers and can not just react on every packet.
        buf[TCP_WIN_SIZE]=0x4; // 1024=0x400, 768 = 0x300, initial window
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	3330      	adds	r3, #48	; 0x30
 8002fec:	2204      	movs	r2, #4
 8002fee:	701a      	strb	r2, [r3, #0]
        buf[TCP_WIN_SIZE+1]=0x0;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3331      	adds	r3, #49	; 0x31
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	701a      	strb	r2, [r3, #0]
        // zero the checksum
        buf[TCP_CHECKSUM_H_P]=0;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	3332      	adds	r3, #50	; 0x32
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	701a      	strb	r2, [r3, #0]
        buf[TCP_CHECKSUM_L_P]=0;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	3333      	adds	r3, #51	; 0x33
 8003004:	2200      	movs	r2, #0
 8003006:	701a      	strb	r2, [r3, #0]
        // urgent pointer
        buf[TCP_CHECKSUM_L_P+1]=0;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	3334      	adds	r3, #52	; 0x34
 800300c:	2200      	movs	r2, #0
 800300e:	701a      	strb	r2, [r3, #0]
        buf[TCP_CHECKSUM_L_P+2]=0;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	3335      	adds	r3, #53	; 0x35
 8003014:	2200      	movs	r2, #0
 8003016:	701a      	strb	r2, [r3, #0]
        // MSS=768, must be more than 50% of the window size we use
        // 768 in hex is 0x300
        buf[TCP_OPTIONS_P]=2;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	3336      	adds	r3, #54	; 0x36
 800301c:	2202      	movs	r2, #2
 800301e:	701a      	strb	r2, [r3, #0]
        buf[TCP_OPTIONS_P+1]=4;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	3337      	adds	r3, #55	; 0x37
 8003024:	2204      	movs	r2, #4
 8003026:	701a      	strb	r2, [r3, #0]
        buf[TCP_OPTIONS_P+2]=(CLIENTMSS>>8);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	3338      	adds	r3, #56	; 0x38
 800302c:	2202      	movs	r2, #2
 800302e:	701a      	strb	r2, [r3, #0]
        buf[TCP_OPTIONS_P+3]=CLIENTMSS & 0xff;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	3339      	adds	r3, #57	; 0x39
 8003034:	2226      	movs	r2, #38	; 0x26
 8003036:	701a      	strb	r2, [r3, #0]
        ck=checksum(&buf[IP_SRC_P], 8 +TCP_HEADER_LEN_PLAIN+4,2);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	331a      	adds	r3, #26
 800303c:	2202      	movs	r2, #2
 800303e:	2120      	movs	r1, #32
 8003040:	4618      	mov	r0, r3
 8003042:	f7ff f94f 	bl	80022e4 <checksum>
 8003046:	4603      	mov	r3, r0
 8003048:	81bb      	strh	r3, [r7, #12]
        buf[TCP_CHECKSUM_H_P]=ck>>8;
 800304a:	89bb      	ldrh	r3, [r7, #12]
 800304c:	0a1b      	lsrs	r3, r3, #8
 800304e:	b29a      	uxth	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	3332      	adds	r3, #50	; 0x32
 8003054:	b2d2      	uxtb	r2, r2
 8003056:	701a      	strb	r2, [r3, #0]
        buf[TCP_CHECKSUM_L_P]=ck& 0xff;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	3333      	adds	r3, #51	; 0x33
 800305c:	89ba      	ldrh	r2, [r7, #12]
 800305e:	b2d2      	uxtb	r2, r2
 8003060:	701a      	strb	r2, [r3, #0]
        // 4 is the tcp mss option:
        enc28j60PacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+ETH_HEADER_LEN+4,buf);
 8003062:	6879      	ldr	r1, [r7, #4]
 8003064:	203a      	movs	r0, #58	; 0x3a
 8003066:	f7ff f895 	bl	8002194 <enc28j60PacketSend>
#ifdef ETHERSHIELD_DEBUG
        ethershieldDebug( "Sent TCP Syn\n");
#endif
}
 800306a:	bf00      	nop
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	20000264 	.word	0x20000264
 8003078:	200004d4 	.word	0x200004d4
 800307c:	08004fcc 	.word	0x08004fcc
 8003080:	2000026c 	.word	0x2000026c
 8003084:	20000270 	.word	0x20000270
 8003088:	2000001d 	.word	0x2000001d

0800308c <packetloop_icmp_tcp>:
#endif // PING_client

// return 0 to just continue in the packet loop and return the position 
// of the tcp/udp data if there is tcp/udp data part
uint16_t packetloop_icmp_tcp(uint8_t *buf,uint16_t plen)
{
 800308c:	b590      	push	{r4, r7, lr}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	460b      	mov	r3, r1
 8003096:	807b      	strh	r3, [r7, #2]
        uint16_t len;
#if defined (TCP_client)
        uint8_t send_fin=0;
 8003098:	2300      	movs	r3, #0
 800309a:	737b      	strb	r3, [r7, #13]
#endif

        //plen will be unequal to zero if there is a valid 
        // packet (without crc error):
#if defined (NTP_client) ||  defined (UDP_client) || defined (TCP_client) || defined (PING_client)
        if(plen==0){
 800309c:	887b      	ldrh	r3, [r7, #2]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d14e      	bne.n	8003140 <packetloop_icmp_tcp+0xb4>
                if ((waitgwmac & WGW_INITIAL_ARP||waitgwmac & WGW_REFRESHING) && delaycnt==0 && enc28j60linkup()){
 80030a2:	4b9c      	ldr	r3, [pc, #624]	; (8003314 <packetloop_icmp_tcp+0x288>)
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	f003 0301 	and.w	r3, r3, #1
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d106      	bne.n	80030be <packetloop_icmp_tcp+0x32>
 80030b0:	4b98      	ldr	r3, [pc, #608]	; (8003314 <packetloop_icmp_tcp+0x288>)
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	f003 0304 	and.w	r3, r3, #4
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00d      	beq.n	80030da <packetloop_icmp_tcp+0x4e>
 80030be:	4b96      	ldr	r3, [pc, #600]	; (8003318 <packetloop_icmp_tcp+0x28c>)
 80030c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d108      	bne.n	80030da <packetloop_icmp_tcp+0x4e>
 80030c8:	f7ff f858 	bl	800217c <enc28j60linkup>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d003      	beq.n	80030da <packetloop_icmp_tcp+0x4e>
                        client_arp_whohas(buf,gwip);
 80030d2:	4992      	ldr	r1, [pc, #584]	; (800331c <packetloop_icmp_tcp+0x290>)
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f7ff fe2b 	bl	8002d30 <client_arp_whohas>
                }
                delaycnt++;
 80030da:	4b8f      	ldr	r3, [pc, #572]	; (8003318 <packetloop_icmp_tcp+0x28c>)
 80030dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	3301      	adds	r3, #1
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	b21a      	sxth	r2, r3
 80030e8:	4b8b      	ldr	r3, [pc, #556]	; (8003318 <packetloop_icmp_tcp+0x28c>)
 80030ea:	801a      	strh	r2, [r3, #0]
#if defined (TCP_client)
                if (tcp_client_state==1  && (waitgwmac & WGW_HAVE_GW_MAC)){ // send a syn
 80030ec:	4b8c      	ldr	r3, [pc, #560]	; (8003320 <packetloop_icmp_tcp+0x294>)
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d123      	bne.n	800313c <packetloop_icmp_tcp+0xb0>
 80030f4:	4b87      	ldr	r3, [pc, #540]	; (8003314 <packetloop_icmp_tcp+0x288>)
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d01c      	beq.n	800313c <packetloop_icmp_tcp+0xb0>
                        tcp_client_state= 2;
 8003102:	4b87      	ldr	r3, [pc, #540]	; (8003320 <packetloop_icmp_tcp+0x294>)
 8003104:	2202      	movs	r2, #2
 8003106:	701a      	strb	r2, [r3, #0]
                        tcpclient_src_port_l++; // allocate a new port
 8003108:	4b86      	ldr	r3, [pc, #536]	; (8003324 <packetloop_icmp_tcp+0x298>)
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	3301      	adds	r3, #1
 800310e:	b2da      	uxtb	r2, r3
 8003110:	4b84      	ldr	r3, [pc, #528]	; (8003324 <packetloop_icmp_tcp+0x298>)
 8003112:	701a      	strb	r2, [r3, #0]
                        // we encode our 3 bit fd into the src port this
                        // way we get it back in every message that comes
                        // from the server:
                        client_syn(buf,((tcp_fd<<5) | (0x1f & tcpclient_src_port_l)),tcp_client_port_h,tcp_client_port_l);
 8003114:	4b84      	ldr	r3, [pc, #528]	; (8003328 <packetloop_icmp_tcp+0x29c>)
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	015b      	lsls	r3, r3, #5
 800311a:	b25a      	sxtb	r2, r3
 800311c:	4b81      	ldr	r3, [pc, #516]	; (8003324 <packetloop_icmp_tcp+0x298>)
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	b25b      	sxtb	r3, r3
 8003122:	f003 031f 	and.w	r3, r3, #31
 8003126:	b25b      	sxtb	r3, r3
 8003128:	4313      	orrs	r3, r2
 800312a:	b25b      	sxtb	r3, r3
 800312c:	b2d9      	uxtb	r1, r3
 800312e:	4b7f      	ldr	r3, [pc, #508]	; (800332c <packetloop_icmp_tcp+0x2a0>)
 8003130:	781a      	ldrb	r2, [r3, #0]
 8003132:	4b7f      	ldr	r3, [pc, #508]	; (8003330 <packetloop_icmp_tcp+0x2a4>)
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f7ff fec8 	bl	8002ecc <client_syn>
                }
#endif
                return(0);
 800313c:	2300      	movs	r3, #0
 800313e:	e211      	b.n	8003564 <packetloop_icmp_tcp+0x4d8>
        }
#endif // NTP_client||UDP_client||TCP_client||PING_client
        // arp is broadcast if unknown but a host may also
        // verify the mac address by sending it to 
        // a unicast address.
        if(eth_type_is_arp_and_my_ip(buf,plen)){
 8003140:	887b      	ldrh	r3, [r7, #2]
 8003142:	4619      	mov	r1, r3
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f7ff f97f 	bl	8002448 <eth_type_is_arp_and_my_ip>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d01e      	beq.n	800318e <packetloop_icmp_tcp+0x102>
                if (buf[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REQ_L_V){
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	3315      	adds	r3, #21
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d102      	bne.n	8003160 <packetloop_icmp_tcp+0xd4>
                        // is it an arp request 
                        make_arp_answer_from_request(buf);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f7ff fae4 	bl	8002728 <make_arp_answer_from_request>
                }
#if defined (NTP_client) || defined (UDP_client) || defined (TCP_client) || defined (PING_client)
                if (waitgwmac & WGW_ACCEPT_ARP_REPLY && (buf[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REPLY_L_V)){
 8003160:	4b6c      	ldr	r3, [pc, #432]	; (8003314 <packetloop_icmp_tcp+0x288>)
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	b2db      	uxtb	r3, r3
 8003166:	f003 0308 	and.w	r3, r3, #8
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00d      	beq.n	800318a <packetloop_icmp_tcp+0xfe>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	3315      	adds	r3, #21
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	2b02      	cmp	r3, #2
 8003176:	d108      	bne.n	800318a <packetloop_icmp_tcp+0xfe>
                        // is it an arp reply 
                        if (client_store_gw_mac(buf)){
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f7ff fe51 	bl	8002e20 <client_store_gw_mac>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d002      	beq.n	800318a <packetloop_icmp_tcp+0xfe>
                                waitgwmac=WGW_HAVE_GW_MAC;
 8003184:	4b63      	ldr	r3, [pc, #396]	; (8003314 <packetloop_icmp_tcp+0x288>)
 8003186:	2202      	movs	r2, #2
 8003188:	701a      	strb	r2, [r3, #0]
                        }
                }
#endif // NTP_client||UDP_client||TCP_client||PING_client
                return(0);
 800318a:	2300      	movs	r3, #0
 800318c:	e1ea      	b.n	8003564 <packetloop_icmp_tcp+0x4d8>

        }
        // check if ip packets are for us:
        if(eth_type_is_ip_and_my_ip(buf,plen)==0){
 800318e:	887b      	ldrh	r3, [r7, #2]
 8003190:	4619      	mov	r1, r3
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f7ff f98c 	bl	80024b0 <eth_type_is_ip_and_my_ip>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d101      	bne.n	80031a2 <packetloop_icmp_tcp+0x116>
                return(0);
 800319e:	2300      	movs	r3, #0
 80031a0:	e1e0      	b.n	8003564 <packetloop_icmp_tcp+0x4d8>
        }
#endif // NTP_client
#ifdef DNS_client
        // TODO - does this work?
        // If DNS response, drop out to have it processed elsewhere
        if(buf[IP_PROTO_P] == IP_PROTO_UDP_V && buf[UDP_SRC_PORT_H_P]==0 && buf[UDP_SRC_PORT_L_P]== 53 ) {
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	3317      	adds	r3, #23
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	2b11      	cmp	r3, #17
 80031aa:	d10b      	bne.n	80031c4 <packetloop_icmp_tcp+0x138>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	3322      	adds	r3, #34	; 0x22
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d106      	bne.n	80031c4 <packetloop_icmp_tcp+0x138>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	3323      	adds	r3, #35	; 0x23
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	2b35      	cmp	r3, #53	; 0x35
 80031be:	d101      	bne.n	80031c4 <packetloop_icmp_tcp+0x138>
                return( UDP_DATA_P );
 80031c0:	232a      	movs	r3, #42	; 0x2a
 80031c2:	e1cf      	b.n	8003564 <packetloop_icmp_tcp+0x4d8>
        }
#endif

        if(buf[IP_PROTO_P]==IP_PROTO_ICMP_V && buf[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V){
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	3317      	adds	r3, #23
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d117      	bne.n	80031fe <packetloop_icmp_tcp+0x172>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	3322      	adds	r3, #34	; 0x22
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	2b08      	cmp	r3, #8
 80031d6:	d112      	bne.n	80031fe <packetloop_icmp_tcp+0x172>
                if (icmp_callback){
 80031d8:	4b56      	ldr	r3, [pc, #344]	; (8003334 <packetloop_icmp_tcp+0x2a8>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d005      	beq.n	80031ec <packetloop_icmp_tcp+0x160>
                        (*icmp_callback)(&(buf[IP_SRC_P]));
 80031e0:	4b54      	ldr	r3, [pc, #336]	; (8003334 <packetloop_icmp_tcp+0x2a8>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	321a      	adds	r2, #26
 80031e8:	4610      	mov	r0, r2
 80031ea:	4798      	blx	r3
                }
                // a ping packet, let's send pong
                make_echo_reply_from_request(buf,plen);
 80031ec:	887b      	ldrh	r3, [r7, #2]
 80031ee:	4619      	mov	r1, r3
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f7ff faf1 	bl	80027d8 <make_echo_reply_from_request>
                ES_PingCallback();
 80031f6:	f000 fd21 	bl	8003c3c <ES_PingCallback>
                return(0);
 80031fa:	2300      	movs	r3, #0
 80031fc:	e1b2      	b.n	8003564 <packetloop_icmp_tcp+0x4d8>
        }
        if (plen<54 && buf[IP_PROTO_P]!=IP_PROTO_TCP_V ){
 80031fe:	887b      	ldrh	r3, [r7, #2]
 8003200:	2b35      	cmp	r3, #53	; 0x35
 8003202:	d806      	bhi.n	8003212 <packetloop_icmp_tcp+0x186>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	3317      	adds	r3, #23
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	2b06      	cmp	r3, #6
 800320c:	d001      	beq.n	8003212 <packetloop_icmp_tcp+0x186>
                // smaller than the smallest TCP packet and not tcp port
                return(0);
 800320e:	2300      	movs	r3, #0
 8003210:	e1a8      	b.n	8003564 <packetloop_icmp_tcp+0x4d8>
        }
#if  defined (TCP_client) 
        // a message for the tcp client, client_state is zero if client was never used
        if ( buf[TCP_DST_PORT_H_P]==TCPCLIENT_SRC_PORT_H){
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	3324      	adds	r3, #36	; 0x24
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	2b0b      	cmp	r3, #11
 800321a:	f040 8155 	bne.w	80034c8 <packetloop_icmp_tcp+0x43c>
#if defined (WWW_client)
                // workaround to pass pointer to www_client_internal..
                bufptr=buf; 
 800321e:	4a46      	ldr	r2, [pc, #280]	; (8003338 <packetloop_icmp_tcp+0x2ac>)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6013      	str	r3, [r2, #0]
#endif // WWW_client
                if (check_ip_message_is_from(buf,tcpsrvip)==0){
 8003224:	4945      	ldr	r1, [pc, #276]	; (800333c <packetloop_icmp_tcp+0x2b0>)
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f7ff f8ec 	bl	8002404 <check_ip_message_is_from>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <packetloop_icmp_tcp+0x1aa>
                        return(0);
 8003232:	2300      	movs	r3, #0
 8003234:	e196      	b.n	8003564 <packetloop_icmp_tcp+0x4d8>
                }
                // if we get a reset:
                if (buf[TCP_FLAGS_P] & TCP_FLAGS_RST_V){
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	332f      	adds	r3, #47	; 0x2f
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	f003 0304 	and.w	r3, r3, #4
 8003240:	2b00      	cmp	r3, #0
 8003242:	d013      	beq.n	800326c <packetloop_icmp_tcp+0x1e0>
                        if (client_tcp_result_callback){
 8003244:	4b3e      	ldr	r3, [pc, #248]	; (8003340 <packetloop_icmp_tcp+0x2b4>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d00a      	beq.n	8003262 <packetloop_icmp_tcp+0x1d6>
#ifdef ETHERSHIELD_DEBUG
                                ethershieldDebug( "RST: Calling tcp client callback\n");
#endif
                                // parameters in client_tcp_result_callback: fd, status, buf_start, len
                                (*client_tcp_result_callback)((buf[TCP_DST_PORT_L_P]>>5)&0x7,3,0,0);
 800324c:	4b3c      	ldr	r3, [pc, #240]	; (8003340 <packetloop_icmp_tcp+0x2b4>)
 800324e:	681c      	ldr	r4, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	3325      	adds	r3, #37	; 0x25
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	095b      	lsrs	r3, r3, #5
 8003258:	b2d8      	uxtb	r0, r3
 800325a:	2300      	movs	r3, #0
 800325c:	2200      	movs	r2, #0
 800325e:	2103      	movs	r1, #3
 8003260:	47a0      	blx	r4
                        }
                        tcp_client_state=5;
 8003262:	4b2f      	ldr	r3, [pc, #188]	; (8003320 <packetloop_icmp_tcp+0x294>)
 8003264:	2205      	movs	r2, #5
 8003266:	701a      	strb	r2, [r3, #0]
                        return(0);
 8003268:	2300      	movs	r3, #0
 800326a:	e17b      	b.n	8003564 <packetloop_icmp_tcp+0x4d8>
                }


                // Determine what to do with packed depending on state
 
                len=get_tcp_data_len(buf);
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f7ff fb4d 	bl	800290c <get_tcp_data_len>
 8003272:	4603      	mov	r3, r0
 8003274:	81fb      	strh	r3, [r7, #14]
                if (tcp_client_state== 2){
 8003276:	4b2a      	ldr	r3, [pc, #168]	; (8003320 <packetloop_icmp_tcp+0x294>)
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	2b02      	cmp	r3, #2
 800327c:	d164      	bne.n	8003348 <packetloop_icmp_tcp+0x2bc>
                        if ((buf[TCP_FLAGS_P] & TCP_FLAGS_SYN_V) && (buf[TCP_FLAGS_P] &TCP_FLAGS_ACK_V)){
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	332f      	adds	r3, #47	; 0x2f
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d02b      	beq.n	80032e4 <packetloop_icmp_tcp+0x258>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	332f      	adds	r3, #47	; 0x2f
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	f003 0310 	and.w	r3, r3, #16
 8003296:	2b00      	cmp	r3, #0
 8003298:	d024      	beq.n	80032e4 <packetloop_icmp_tcp+0x258>
#ifdef ETHERSHIELD_DEBUG
                                ethershieldDebug( "Got SYNACK\n");
#endif
                                // synack, answer with ack
                                make_tcp_ack_from_any(buf,0,0);
 800329a:	2200      	movs	r2, #0
 800329c:	2100      	movs	r1, #0
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f7ff fb9a 	bl	80029d8 <make_tcp_ack_from_any>
                                buf[TCP_FLAGS_P]=TCP_FLAGS_ACK_V|TCP_FLAGS_PUSH_V;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	332f      	adds	r3, #47	; 0x2f
 80032a8:	2218      	movs	r2, #24
 80032aa:	701a      	strb	r2, [r3, #0]

                                // Make a tcp message with data. When calling this function we must
                                // still have a valid tcp-ack in the buffer. In other words
                                // you have just called make_tcp_ack_from_any(buf,0).
                                if (client_tcp_datafill_callback){
 80032ac:	4b25      	ldr	r3, [pc, #148]	; (8003344 <packetloop_icmp_tcp+0x2b8>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00b      	beq.n	80032cc <packetloop_icmp_tcp+0x240>
#ifdef ETHERSHIELD_DEBUG
                                        ethershieldDebug( "Datafil Callback\n");
#endif
                                        // in this case it is src port because the above 
                                        // make_tcp_ack_from_any swaps the dst and src port:
                                        len=(*client_tcp_datafill_callback)((buf[TCP_SRC_PORT_L_P]>>5)&0x7);
 80032b4:	4b23      	ldr	r3, [pc, #140]	; (8003344 <packetloop_icmp_tcp+0x2b8>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	3223      	adds	r2, #35	; 0x23
 80032bc:	7812      	ldrb	r2, [r2, #0]
 80032be:	0952      	lsrs	r2, r2, #5
 80032c0:	b2d2      	uxtb	r2, r2
 80032c2:	4610      	mov	r0, r2
 80032c4:	4798      	blx	r3
 80032c6:	4603      	mov	r3, r0
 80032c8:	81fb      	strh	r3, [r7, #14]
 80032ca:	e001      	b.n	80032d0 <packetloop_icmp_tcp+0x244>
                                }else{
                                        // this is just to prevent a crash
                                        len=0;
 80032cc:	2300      	movs	r3, #0
 80032ce:	81fb      	strh	r3, [r7, #14]
                                }
                                tcp_client_state=3;
 80032d0:	4b13      	ldr	r3, [pc, #76]	; (8003320 <packetloop_icmp_tcp+0x294>)
 80032d2:	2203      	movs	r2, #3
 80032d4:	701a      	strb	r2, [r3, #0]
                                make_tcp_ack_with_data_noflags(buf,len);
 80032d6:	89fb      	ldrh	r3, [r7, #14]
 80032d8:	4619      	mov	r1, r3
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f7ff fbda 	bl	8002a94 <make_tcp_ack_with_data_noflags>
#ifdef ETHERSHIELD_DEBUG
                                ethershieldDebug( "Send ACK\n");
#endif
                                return(0);
 80032e0:	2300      	movs	r3, #0
 80032e2:	e13f      	b.n	8003564 <packetloop_icmp_tcp+0x4d8>
                        }else{
                                // reset only if we have sent a syn and don't get syn-ack back.
                                // If we connect to a non listen port then we get a RST
                                // which will be handeled above. In other words there is
                                // normally no danger for an endless loop.
                                tcp_client_state=1; // retry
 80032e4:	4b0e      	ldr	r3, [pc, #56]	; (8003320 <packetloop_icmp_tcp+0x294>)
 80032e6:	2201      	movs	r2, #1
 80032e8:	701a      	strb	r2, [r3, #0]
                                // do not inform application layer as we retry.
                                len++;
 80032ea:	89fb      	ldrh	r3, [r7, #14]
 80032ec:	3301      	adds	r3, #1
 80032ee:	81fb      	strh	r3, [r7, #14]
                                if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V){
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	332f      	adds	r3, #47	; 0x2f
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	f003 0310 	and.w	r3, r3, #16
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <packetloop_icmp_tcp+0x276>
                                        // if packet was an ack then do not step the ack number
                                        len=0;
 80032fe:	2300      	movs	r3, #0
 8003300:	81fb      	strh	r3, [r7, #14]
                                }
                                // refuse and reset the connection
                                make_tcp_ack_from_any(buf,len,TCP_FLAGS_RST_V);
 8003302:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003306:	2204      	movs	r2, #4
 8003308:	4619      	mov	r1, r3
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f7ff fb64 	bl	80029d8 <make_tcp_ack_from_any>
                                return(0);
 8003310:	2300      	movs	r3, #0
 8003312:	e127      	b.n	8003564 <packetloop_icmp_tcp+0x4d8>
 8003314:	2000001c 	.word	0x2000001c
 8003318:	2000001a 	.word	0x2000001a
 800331c:	20000260 	.word	0x20000260
 8003320:	2000024a 	.word	0x2000024a
 8003324:	20000019 	.word	0x20000019
 8003328:	20000249 	.word	0x20000249
 800332c:	2000024b 	.word	0x2000024b
 8003330:	2000024c 	.word	0x2000024c
 8003334:	2000025c 	.word	0x2000025c
 8003338:	20000258 	.word	0x20000258
 800333c:	2000026c 	.word	0x2000026c
 8003340:	20000250 	.word	0x20000250
 8003344:	20000254 	.word	0x20000254
                        }
                } 
                // in tcp_client_state==3 we will normally first get an empty
                // ack-packet and then a ack-packet with data.
                if (tcp_client_state==4 ) {     //&& len>0){ 
 8003348:	4b88      	ldr	r3, [pc, #544]	; (800356c <packetloop_icmp_tcp+0x4e0>)
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	2b04      	cmp	r3, #4
 800334e:	d146      	bne.n	80033de <packetloop_icmp_tcp+0x352>
//                        ethershieldDebug( "First Data Packet\n");
#endif
                        // Removed this as there is no code to handle state 4. Only 1st packet will be available.
                        //tcp_client_state=4;
                        // return the data we received
                        if (client_tcp_result_callback){
 8003350:	4b87      	ldr	r3, [pc, #540]	; (8003570 <packetloop_icmp_tcp+0x4e4>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d02a      	beq.n	80033ae <packetloop_icmp_tcp+0x322>
                                tcpstart=TCP_DATA_START; // TCP_DATA_START is a formula
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	332e      	adds	r3, #46	; 0x2e
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	091b      	lsrs	r3, r3, #4
 8003360:	b2db      	uxtb	r3, r3
 8003362:	b29b      	uxth	r3, r3
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	b29b      	uxth	r3, r3
 8003368:	3322      	adds	r3, #34	; 0x22
 800336a:	817b      	strh	r3, [r7, #10]
                                // out of buffer bounds check, needed in case of fragmented IP packets
                                if (tcpstart>plen-8){
 800336c:	897a      	ldrh	r2, [r7, #10]
 800336e:	887b      	ldrh	r3, [r7, #2]
 8003370:	3b08      	subs	r3, #8
 8003372:	429a      	cmp	r2, r3
 8003374:	dd02      	ble.n	800337c <packetloop_icmp_tcp+0x2f0>
                                        tcpstart=plen-8; // dummy but save
 8003376:	887b      	ldrh	r3, [r7, #2]
 8003378:	3b08      	subs	r3, #8
 800337a:	817b      	strh	r3, [r7, #10]
                                }
                                save_len=len;
 800337c:	89fb      	ldrh	r3, [r7, #14]
 800337e:	813b      	strh	r3, [r7, #8]
                                if (tcpstart+len>plen){
 8003380:	897a      	ldrh	r2, [r7, #10]
 8003382:	89fb      	ldrh	r3, [r7, #14]
 8003384:	441a      	add	r2, r3
 8003386:	887b      	ldrh	r3, [r7, #2]
 8003388:	429a      	cmp	r2, r3
 800338a:	dd03      	ble.n	8003394 <packetloop_icmp_tcp+0x308>
                                        save_len=plen-tcpstart;
 800338c:	887a      	ldrh	r2, [r7, #2]
 800338e:	897b      	ldrh	r3, [r7, #10]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	813b      	strh	r3, [r7, #8]
                                }
#ifdef ETHERSHIELD_DEBUG
                                ethershieldDebug( "Calling Result callback\n");
#endif
                                send_fin=(*client_tcp_result_callback)((buf[TCP_DST_PORT_L_P]>>5)&0x7,0,tcpstart,save_len);
 8003394:	4b76      	ldr	r3, [pc, #472]	; (8003570 <packetloop_icmp_tcp+0x4e4>)
 8003396:	681c      	ldr	r4, [r3, #0]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	3325      	adds	r3, #37	; 0x25
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	095b      	lsrs	r3, r3, #5
 80033a0:	b2d8      	uxtb	r0, r3
 80033a2:	893b      	ldrh	r3, [r7, #8]
 80033a4:	897a      	ldrh	r2, [r7, #10]
 80033a6:	2100      	movs	r1, #0
 80033a8:	47a0      	blx	r4
 80033aa:	4603      	mov	r3, r0
 80033ac:	737b      	strb	r3, [r7, #13]

                        }
                        if (send_fin){
 80033ae:	7b7b      	ldrb	r3, [r7, #13]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00b      	beq.n	80033cc <packetloop_icmp_tcp+0x340>
#ifdef ETHERSHIELD_DEBUG
                                ethershieldDebug( "Send FIN\n");
#endif
                                make_tcp_ack_from_any(buf,len,TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V);
 80033b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80033b8:	2209      	movs	r2, #9
 80033ba:	4619      	mov	r1, r3
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f7ff fb0b 	bl	80029d8 <make_tcp_ack_from_any>
                                tcp_client_state=5;
 80033c2:	4b6a      	ldr	r3, [pc, #424]	; (800356c <packetloop_icmp_tcp+0x4e0>)
 80033c4:	2205      	movs	r2, #5
 80033c6:	701a      	strb	r2, [r3, #0]
                                return(0);
 80033c8:	2300      	movs	r3, #0
 80033ca:	e0cb      	b.n	8003564 <packetloop_icmp_tcp+0x4d8>
                        }
                        make_tcp_ack_from_any(buf,len,0);
 80033cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80033d0:	2200      	movs	r2, #0
 80033d2:	4619      	mov	r1, r3
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f7ff faff 	bl	80029d8 <make_tcp_ack_from_any>
                        return(0);
 80033da:	2300      	movs	r3, #0
 80033dc:	e0c2      	b.n	8003564 <packetloop_icmp_tcp+0x4d8>
                } 
                if (tcp_client_state==3) {      // && len>0){ 
 80033de:	4b63      	ldr	r3, [pc, #396]	; (800356c <packetloop_icmp_tcp+0x4e0>)
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	2b03      	cmp	r3, #3
 80033e4:	d149      	bne.n	800347a <packetloop_icmp_tcp+0x3ee>
                        // our first real data packet
#ifdef ETHERSHIELD_DEBUG
//                        ethershieldDebug( "First Data Packet\n");
#endif
                        // Removed this as there is no code to handle state 4. Only 1st packet will be available.
                        tcp_client_state=4;
 80033e6:	4b61      	ldr	r3, [pc, #388]	; (800356c <packetloop_icmp_tcp+0x4e0>)
 80033e8:	2204      	movs	r2, #4
 80033ea:	701a      	strb	r2, [r3, #0]
                        // return the data we received
                        if (client_tcp_result_callback){
 80033ec:	4b60      	ldr	r3, [pc, #384]	; (8003570 <packetloop_icmp_tcp+0x4e4>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d02a      	beq.n	800344a <packetloop_icmp_tcp+0x3be>
                                tcpstart=TCP_DATA_START; // TCP_DATA_START is a formula
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	332e      	adds	r3, #46	; 0x2e
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	091b      	lsrs	r3, r3, #4
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	b29b      	uxth	r3, r3
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	b29b      	uxth	r3, r3
 8003404:	3322      	adds	r3, #34	; 0x22
 8003406:	817b      	strh	r3, [r7, #10]
                                // out of buffer bounds check, needed in case of fragmented IP packets
                                if (tcpstart>plen-8){
 8003408:	897a      	ldrh	r2, [r7, #10]
 800340a:	887b      	ldrh	r3, [r7, #2]
 800340c:	3b08      	subs	r3, #8
 800340e:	429a      	cmp	r2, r3
 8003410:	dd02      	ble.n	8003418 <packetloop_icmp_tcp+0x38c>
                                        tcpstart=plen-8; // dummy but save
 8003412:	887b      	ldrh	r3, [r7, #2]
 8003414:	3b08      	subs	r3, #8
 8003416:	817b      	strh	r3, [r7, #10]
                                }
                                save_len=len;
 8003418:	89fb      	ldrh	r3, [r7, #14]
 800341a:	813b      	strh	r3, [r7, #8]
                                if (tcpstart+len>plen){
 800341c:	897a      	ldrh	r2, [r7, #10]
 800341e:	89fb      	ldrh	r3, [r7, #14]
 8003420:	441a      	add	r2, r3
 8003422:	887b      	ldrh	r3, [r7, #2]
 8003424:	429a      	cmp	r2, r3
 8003426:	dd03      	ble.n	8003430 <packetloop_icmp_tcp+0x3a4>
                                        save_len=plen-tcpstart;
 8003428:	887a      	ldrh	r2, [r7, #2]
 800342a:	897b      	ldrh	r3, [r7, #10]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	813b      	strh	r3, [r7, #8]
                                }
#ifdef ETHERSHIELD_DEBUG
                                ethershieldDebug( "Calling Result callback\n");
#endif
                                send_fin=(*client_tcp_result_callback)((buf[TCP_DST_PORT_L_P]>>5)&0x7,0,tcpstart,save_len);
 8003430:	4b4f      	ldr	r3, [pc, #316]	; (8003570 <packetloop_icmp_tcp+0x4e4>)
 8003432:	681c      	ldr	r4, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	3325      	adds	r3, #37	; 0x25
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	095b      	lsrs	r3, r3, #5
 800343c:	b2d8      	uxtb	r0, r3
 800343e:	893b      	ldrh	r3, [r7, #8]
 8003440:	897a      	ldrh	r2, [r7, #10]
 8003442:	2100      	movs	r1, #0
 8003444:	47a0      	blx	r4
 8003446:	4603      	mov	r3, r0
 8003448:	737b      	strb	r3, [r7, #13]

                        }
                        if (send_fin){
 800344a:	7b7b      	ldrb	r3, [r7, #13]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00b      	beq.n	8003468 <packetloop_icmp_tcp+0x3dc>
#ifdef ETHERSHIELD_DEBUG
                                ethershieldDebug( "Send FIN\n");
#endif
                                make_tcp_ack_from_any(buf,len,TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V);
 8003450:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003454:	2209      	movs	r2, #9
 8003456:	4619      	mov	r1, r3
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f7ff fabd 	bl	80029d8 <make_tcp_ack_from_any>
                                tcp_client_state=5;
 800345e:	4b43      	ldr	r3, [pc, #268]	; (800356c <packetloop_icmp_tcp+0x4e0>)
 8003460:	2205      	movs	r2, #5
 8003462:	701a      	strb	r2, [r3, #0]
                                return(0);
 8003464:	2300      	movs	r3, #0
 8003466:	e07d      	b.n	8003564 <packetloop_icmp_tcp+0x4d8>
                        }
                        make_tcp_ack_from_any(buf,len,0);
 8003468:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800346c:	2200      	movs	r2, #0
 800346e:	4619      	mov	r1, r3
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f7ff fab1 	bl	80029d8 <make_tcp_ack_from_any>
                        return(0);
 8003476:	2300      	movs	r3, #0
 8003478:	e074      	b.n	8003564 <packetloop_icmp_tcp+0x4d8>
                }
                if(tcp_client_state==5){
 800347a:	4b3c      	ldr	r3, [pc, #240]	; (800356c <packetloop_icmp_tcp+0x4e0>)
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	2b05      	cmp	r3, #5
 8003480:	d101      	bne.n	8003486 <packetloop_icmp_tcp+0x3fa>
                        // no more ack
#ifdef ETHERSHIELD_DEBUG
                        ethershieldDebug( "No more ACK\n");
#endif
                        return(0);
 8003482:	2300      	movs	r3, #0
 8003484:	e06e      	b.n	8003564 <packetloop_icmp_tcp+0x4d8>
                }
                if (buf[TCP_FLAGS_P] & TCP_FLAGS_FIN_V){
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	332f      	adds	r3, #47	; 0x2f
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	2b00      	cmp	r3, #0
 8003492:	d00d      	beq.n	80034b0 <packetloop_icmp_tcp+0x424>
#ifdef ETHERSHIELD_DEBUG
                        ethershieldDebug( "Terminated\n");
#endif
                        make_tcp_ack_from_any(buf,len+1,TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V);
 8003494:	89fb      	ldrh	r3, [r7, #14]
 8003496:	3301      	adds	r3, #1
 8003498:	b29b      	uxth	r3, r3
 800349a:	b21b      	sxth	r3, r3
 800349c:	2209      	movs	r2, #9
 800349e:	4619      	mov	r1, r3
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f7ff fa99 	bl	80029d8 <make_tcp_ack_from_any>
                        tcp_client_state=5; // connection terminated
 80034a6:	4b31      	ldr	r3, [pc, #196]	; (800356c <packetloop_icmp_tcp+0x4e0>)
 80034a8:	2205      	movs	r2, #5
 80034aa:	701a      	strb	r2, [r3, #0]
                        return(0);
 80034ac:	2300      	movs	r3, #0
 80034ae:	e059      	b.n	8003564 <packetloop_icmp_tcp+0x4d8>
                }
                // ack all data (the web page may be long):
                // if we just get a fragment then len will be zero
                // and we ack only once we have the full packet
                if (len>0){
 80034b0:	89fb      	ldrh	r3, [r7, #14]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d006      	beq.n	80034c4 <packetloop_icmp_tcp+0x438>
                        make_tcp_ack_from_any(buf,len,0);
 80034b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80034ba:	2200      	movs	r2, #0
 80034bc:	4619      	mov	r1, r3
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f7ff fa8a 	bl	80029d8 <make_tcp_ack_from_any>
#ifdef ETHERSHIELD_DEBUG
                        ethershieldDebug( "Send ACK\n");
#endif
                }
                return(0);
 80034c4:	2300      	movs	r3, #0
 80034c6:	e04d      	b.n	8003564 <packetloop_icmp_tcp+0x4d8>
        }
#endif // WWW_client||TCP_client
        //
        // tcp port web server start
        if (buf[TCP_DST_PORT_H_P]==wwwport_h && buf[TCP_DST_PORT_L_P]==wwwport_l){
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	3324      	adds	r3, #36	; 0x24
 80034cc:	781a      	ldrb	r2, [r3, #0]
 80034ce:	4b29      	ldr	r3, [pc, #164]	; (8003574 <packetloop_icmp_tcp+0x4e8>)
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d145      	bne.n	8003562 <packetloop_icmp_tcp+0x4d6>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	3325      	adds	r3, #37	; 0x25
 80034da:	781a      	ldrb	r2, [r3, #0]
 80034dc:	4b26      	ldr	r3, [pc, #152]	; (8003578 <packetloop_icmp_tcp+0x4ec>)
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d13e      	bne.n	8003562 <packetloop_icmp_tcp+0x4d6>
                if (buf[TCP_FLAGS_P] & TCP_FLAGS_SYN_V){
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	332f      	adds	r3, #47	; 0x2f
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d004      	beq.n	80034fc <packetloop_icmp_tcp+0x470>
                        make_tcp_synack_from_syn(buf);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f7ff f99c 	bl	8002830 <make_tcp_synack_from_syn>
                        // make_tcp_synack_from_syn does already send the syn,ack
                        return(0);
 80034f8:	2300      	movs	r3, #0
 80034fa:	e033      	b.n	8003564 <packetloop_icmp_tcp+0x4d8>
                }
                if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V){
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	332f      	adds	r3, #47	; 0x2f
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	f003 0310 	and.w	r3, r3, #16
 8003506:	2b00      	cmp	r3, #0
 8003508:	d02b      	beq.n	8003562 <packetloop_icmp_tcp+0x4d6>
                        info_data_len=get_tcp_data_len(buf);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f7ff f9fe 	bl	800290c <get_tcp_data_len>
 8003510:	4603      	mov	r3, r0
 8003512:	461a      	mov	r2, r3
 8003514:	4b19      	ldr	r3, [pc, #100]	; (800357c <packetloop_icmp_tcp+0x4f0>)
 8003516:	801a      	strh	r2, [r3, #0]
                        // we can possibly have no data, just ack:
                        // Here we misuse plen for something else to save a variable.
                        // plen is now the position of start of the tcp user data.
                        if (info_data_len==0){
 8003518:	4b18      	ldr	r3, [pc, #96]	; (800357c <packetloop_icmp_tcp+0x4f0>)
 800351a:	881b      	ldrh	r3, [r3, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d10d      	bne.n	800353c <packetloop_icmp_tcp+0x4b0>
                                if (buf[TCP_FLAGS_P] & TCP_FLAGS_FIN_V){
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	332f      	adds	r3, #47	; 0x2f
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	2b00      	cmp	r3, #0
 800352c:	d004      	beq.n	8003538 <packetloop_icmp_tcp+0x4ac>
                                        // finack, answer with ack
                                        make_tcp_ack_from_any(buf,0,0);
 800352e:	2200      	movs	r2, #0
 8003530:	2100      	movs	r1, #0
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f7ff fa50 	bl	80029d8 <make_tcp_ack_from_any>
                                }
                                // just an ack with no data, wait for next packet
                                return(0);
 8003538:	2300      	movs	r3, #0
 800353a:	e013      	b.n	8003564 <packetloop_icmp_tcp+0x4d8>
                        }
                        // Here we misuse len for something else to save a variable
                        len=TCP_DATA_START; // TCP_DATA_START is a formula
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	332e      	adds	r3, #46	; 0x2e
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	091b      	lsrs	r3, r3, #4
 8003544:	b2db      	uxtb	r3, r3
 8003546:	b29b      	uxth	r3, r3
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	b29b      	uxth	r3, r3
 800354c:	3322      	adds	r3, #34	; 0x22
 800354e:	81fb      	strh	r3, [r7, #14]
                        // check for data corruption
                        if (len>plen-8){
 8003550:	89fa      	ldrh	r2, [r7, #14]
 8003552:	887b      	ldrh	r3, [r7, #2]
 8003554:	3b08      	subs	r3, #8
 8003556:	429a      	cmp	r2, r3
 8003558:	dd01      	ble.n	800355e <packetloop_icmp_tcp+0x4d2>
                                return(0);
 800355a:	2300      	movs	r3, #0
 800355c:	e002      	b.n	8003564 <packetloop_icmp_tcp+0x4d8>
                        }
                        return(len);
 800355e:	89fb      	ldrh	r3, [r7, #14]
 8003560:	e000      	b.n	8003564 <packetloop_icmp_tcp+0x4d8>
                }
        }
        return(0);
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	3714      	adds	r7, #20
 8003568:	46bd      	mov	sp, r7
 800356a:	bd90      	pop	{r4, r7, pc}
 800356c:	2000024a 	.word	0x2000024a
 8003570:	20000250 	.word	0x20000250
 8003574:	20000248 	.word	0x20000248
 8003578:	20000018 	.word	0x20000018
 800357c:	20000274 	.word	0x20000274

08003580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b08c      	sub	sp, #48	; 0x30
 8003584:	af06      	add	r7, sp, #24
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003586:	f7fc fde9 	bl	800015c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800358a:	f000 f961 	bl	8003850 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800358e:	f000 f9db 	bl	8003948 <MX_GPIO_Init>
  MX_SPI1_Init();
 8003592:	f000 f9a3 	bl	80038dc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  // Initialise SPI interface
  ES_enc28j60SpiInit(&hspi1);
 8003596:	489e      	ldr	r0, [pc, #632]	; (8003810 <main+0x290>)
 8003598:	f7fd ff2f 	bl	80013fa <ES_enc28j60SpiInit>

  // initialize enc28j60
  ES_enc28j60Init(mymac);
 800359c:	489d      	ldr	r0, [pc, #628]	; (8003814 <main+0x294>)
 800359e:	f7fd ff37 	bl	8001410 <ES_enc28j60Init>

  // init the ethernet/ip layer:
  //ES_init_ip_arp_udp_tcp(mymac,myip, MYWWWPORT);

  if(ES_enc28j60Revision() <= 0)
 80035a2:	f7fd ff69 	bl	8001478 <ES_enc28j60Revision>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	dc00      	bgt.n	80035ae <main+0x2e>
  {
	// Failed to access ENC28J60
	while (1)
 80035ac:	e7fe      	b.n	80035ac <main+0x2c>
		;    // Just loop here
  }

  // Get IP Address details
  if (allocateIPAddress(buf, BUFFER_SIZE, mymac, 80, myip, mynetmask, gwip, dhcpsvrip, dnsip) > 0)
 80035ae:	4b9a      	ldr	r3, [pc, #616]	; (8003818 <main+0x298>)
 80035b0:	9304      	str	r3, [sp, #16]
 80035b2:	4b9a      	ldr	r3, [pc, #616]	; (800381c <main+0x29c>)
 80035b4:	9303      	str	r3, [sp, #12]
 80035b6:	4b9a      	ldr	r3, [pc, #616]	; (8003820 <main+0x2a0>)
 80035b8:	9302      	str	r3, [sp, #8]
 80035ba:	4b9a      	ldr	r3, [pc, #616]	; (8003824 <main+0x2a4>)
 80035bc:	9301      	str	r3, [sp, #4]
 80035be:	4b9a      	ldr	r3, [pc, #616]	; (8003828 <main+0x2a8>)
 80035c0:	9300      	str	r3, [sp, #0]
 80035c2:	2350      	movs	r3, #80	; 0x50
 80035c4:	4a93      	ldr	r2, [pc, #588]	; (8003814 <main+0x294>)
 80035c6:	f240 2126 	movw	r1, #550	; 0x226
 80035ca:	4898      	ldr	r0, [pc, #608]	; (800382c <main+0x2ac>)
 80035cc:	f7fd ff9c 	bl	8001508 <allocateIPAddress>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	dc00      	bgt.n	80035d8 <main+0x58>
		// Display the results:
  }
  else
  {
	// Failed to get IP address"
	while (1)
 80035d6:	e7fe      	b.n	80035d6 <main+0x56>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		// read packet, handle ping and wait for a tcp packet:
		dat_p = ES_packetloop_icmp_tcp(buf, ES_enc28j60PacketReceive(BUFFER_SIZE, buf));
 80035d8:	4994      	ldr	r1, [pc, #592]	; (800382c <main+0x2ac>)
 80035da:	f240 2026 	movw	r0, #550	; 0x226
 80035de:	f7fd ff52 	bl	8001486 <ES_enc28j60PacketReceive>
 80035e2:	4603      	mov	r3, r0
 80035e4:	4619      	mov	r1, r3
 80035e6:	4891      	ldr	r0, [pc, #580]	; (800382c <main+0x2ac>)
 80035e8:	f7fd ff5d 	bl	80014a6 <ES_packetloop_icmp_tcp>
 80035ec:	4603      	mov	r3, r0
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	4b8f      	ldr	r3, [pc, #572]	; (8003830 <main+0x2b0>)
 80035f2:	801a      	strh	r2, [r3, #0]

		/* dat_p will be unequal to zero if there is a valid
		 * http get */
		if (dat_p == 0)
 80035f4:	4b8e      	ldr	r3, [pc, #568]	; (8003830 <main+0x2b0>)
 80035f6:	881b      	ldrh	r3, [r3, #0]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	f000 8106 	beq.w	800380a <main+0x28a>
			// no http request
			continue;
		}

		// tcp port 80 begin
		if (strncmp("GET ", (char *) &(buf[dat_p]), 4) != 0)
 80035fe:	4b8c      	ldr	r3, [pc, #560]	; (8003830 <main+0x2b0>)
 8003600:	881b      	ldrh	r3, [r3, #0]
 8003602:	461a      	mov	r2, r3
 8003604:	4b89      	ldr	r3, [pc, #548]	; (800382c <main+0x2ac>)
 8003606:	4413      	add	r3, r2
 8003608:	2204      	movs	r2, #4
 800360a:	4619      	mov	r1, r3
 800360c:	4889      	ldr	r0, [pc, #548]	; (8003834 <main+0x2b4>)
 800360e:	f000 fe71 	bl	80042f4 <strncmp>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d011      	beq.n	800363c <main+0xbc>
		{
			// head, post and other methods:
			dat_p = http200ok();
 8003618:	f000 f9f6 	bl	8003a08 <http200ok>
 800361c:	4603      	mov	r3, r0
 800361e:	461a      	mov	r2, r3
 8003620:	4b83      	ldr	r3, [pc, #524]	; (8003830 <main+0x2b0>)
 8003622:	801a      	strh	r2, [r3, #0]
			dat_p = ES_fill_tcp_data(buf, dat_p, "<h1>200 OK</h1>");
 8003624:	4b82      	ldr	r3, [pc, #520]	; (8003830 <main+0x2b0>)
 8003626:	881b      	ldrh	r3, [r3, #0]
 8003628:	4a83      	ldr	r2, [pc, #524]	; (8003838 <main+0x2b8>)
 800362a:	4619      	mov	r1, r3
 800362c:	487f      	ldr	r0, [pc, #508]	; (800382c <main+0x2ac>)
 800362e:	f7fd ff4a 	bl	80014c6 <ES_fill_tcp_data>
 8003632:	4603      	mov	r3, r0
 8003634:	b29a      	uxth	r2, r3
 8003636:	4b7e      	ldr	r3, [pc, #504]	; (8003830 <main+0x2b0>)
 8003638:	801a      	strh	r2, [r3, #0]
			goto SENDTCP;
 800363a:	e0df      	b.n	80037fc <main+0x27c>
		}

		// Página principal
		if (strncmp("/ ", (char *) &(buf[dat_p + 4]), 2) == 0)
 800363c:	4b7c      	ldr	r3, [pc, #496]	; (8003830 <main+0x2b0>)
 800363e:	881b      	ldrh	r3, [r3, #0]
 8003640:	3304      	adds	r3, #4
 8003642:	4a7a      	ldr	r2, [pc, #488]	; (800382c <main+0x2ac>)
 8003644:	4413      	add	r3, r2
 8003646:	2202      	movs	r2, #2
 8003648:	4619      	mov	r1, r3
 800364a:	487c      	ldr	r0, [pc, #496]	; (800383c <main+0x2bc>)
 800364c:	f000 fe52 	bl	80042f4 <strncmp>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d107      	bne.n	8003666 <main+0xe6>
		{
			dat_p = print_webpage(buf);
 8003656:	4875      	ldr	r0, [pc, #468]	; (800382c <main+0x2ac>)
 8003658:	f000 f9e6 	bl	8003a28 <print_webpage>
 800365c:	4603      	mov	r3, r0
 800365e:	461a      	mov	r2, r3
 8003660:	4b73      	ldr	r3, [pc, #460]	; (8003830 <main+0x2b0>)
 8003662:	801a      	strh	r2, [r3, #0]
			goto SENDTCP;
 8003664:	e0ca      	b.n	80037fc <main+0x27c>
		}
		else if (strncmp("/test ", (char *) &(buf[dat_p + 4]), 2) == 0)
 8003666:	4b72      	ldr	r3, [pc, #456]	; (8003830 <main+0x2b0>)
 8003668:	881b      	ldrh	r3, [r3, #0]
 800366a:	3304      	adds	r3, #4
 800366c:	4a6f      	ldr	r2, [pc, #444]	; (800382c <main+0x2ac>)
 800366e:	4413      	add	r3, r2
 8003670:	2202      	movs	r2, #2
 8003672:	4619      	mov	r1, r3
 8003674:	4872      	ldr	r0, [pc, #456]	; (8003840 <main+0x2c0>)
 8003676:	f000 fe3d 	bl	80042f4 <strncmp>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d107      	bne.n	8003690 <main+0x110>
		{
			dat_p = print_webpage2(buf);
 8003680:	486a      	ldr	r0, [pc, #424]	; (800382c <main+0x2ac>)
 8003682:	f000 fa69 	bl	8003b58 <print_webpage2>
 8003686:	4603      	mov	r3, r0
 8003688:	461a      	mov	r2, r3
 800368a:	4b69      	ldr	r3, [pc, #420]	; (8003830 <main+0x2b0>)
 800368c:	801a      	strh	r2, [r3, #0]
			goto SENDTCP;
 800368e:	e0b5      	b.n	80037fc <main+0x27c>
		}
		else if (strncmp("/?", (char *) &(buf[dat_p + 4]), 2) == 0)
 8003690:	4b67      	ldr	r3, [pc, #412]	; (8003830 <main+0x2b0>)
 8003692:	881b      	ldrh	r3, [r3, #0]
 8003694:	3304      	adds	r3, #4
 8003696:	4a65      	ldr	r2, [pc, #404]	; (800382c <main+0x2ac>)
 8003698:	4413      	add	r3, r2
 800369a:	2202      	movs	r2, #2
 800369c:	4619      	mov	r1, r3
 800369e:	4869      	ldr	r0, [pc, #420]	; (8003844 <main+0x2c4>)
 80036a0:	f000 fe28 	bl	80042f4 <strncmp>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f040 809e 	bne.w	80037e8 <main+0x268>
		{
			//Salva valores na flash
			char mat[3]={0, 0, 0};
 80036ac:	2300      	movs	r3, #0
 80036ae:	703b      	strb	r3, [r7, #0]
 80036b0:	2300      	movs	r3, #0
 80036b2:	707b      	strb	r3, [r7, #1]
 80036b4:	2300      	movs	r3, #0
 80036b6:	70bb      	strb	r3, [r7, #2]
			int cont=0, i=4, offset=0, n1=0, n2=1;
 80036b8:	2300      	movs	r3, #0
 80036ba:	617b      	str	r3, [r7, #20]
 80036bc:	2304      	movs	r3, #4
 80036be:	613b      	str	r3, [r7, #16]
 80036c0:	2300      	movs	r3, #0
 80036c2:	60fb      	str	r3, [r7, #12]
 80036c4:	2300      	movs	r3, #0
 80036c6:	60bb      	str	r3, [r7, #8]
 80036c8:	2301      	movs	r3, #1
 80036ca:	607b      	str	r3, [r7, #4]

			while(n1 != n2)
 80036cc:	e07a      	b.n	80037c4 <main+0x244>
			{
				if(buf[dat_p + i] == '=')
 80036ce:	4b58      	ldr	r3, [pc, #352]	; (8003830 <main+0x2b0>)
 80036d0:	881b      	ldrh	r3, [r3, #0]
 80036d2:	461a      	mov	r2, r3
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	4413      	add	r3, r2
 80036d8:	4a54      	ldr	r2, [pc, #336]	; (800382c <main+0x2ac>)
 80036da:	5cd3      	ldrb	r3, [r2, r3]
 80036dc:	2b3d      	cmp	r3, #61	; 0x3d
 80036de:	d16e      	bne.n	80037be <main+0x23e>
				{
					i++;
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	3301      	adds	r3, #1
 80036e4:	613b      	str	r3, [r7, #16]

					if(cont < 2)
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	dc2e      	bgt.n	800374a <main+0x1ca>
					{
						while(buf[dat_p + i] != '&')
 80036ec:	e011      	b.n	8003712 <main+0x192>
						{
							mat[offset] = buf[dat_p + i];
 80036ee:	4b50      	ldr	r3, [pc, #320]	; (8003830 <main+0x2b0>)
 80036f0:	881b      	ldrh	r3, [r3, #0]
 80036f2:	461a      	mov	r2, r3
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	4413      	add	r3, r2
 80036f8:	4a4c      	ldr	r2, [pc, #304]	; (800382c <main+0x2ac>)
 80036fa:	5cd1      	ldrb	r1, [r2, r3]
 80036fc:	463a      	mov	r2, r7
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	4413      	add	r3, r2
 8003702:	460a      	mov	r2, r1
 8003704:	701a      	strb	r2, [r3, #0]
							offset++;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	3301      	adds	r3, #1
 800370a:	60fb      	str	r3, [r7, #12]
							i++;
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	3301      	adds	r3, #1
 8003710:	613b      	str	r3, [r7, #16]
						while(buf[dat_p + i] != '&')
 8003712:	4b47      	ldr	r3, [pc, #284]	; (8003830 <main+0x2b0>)
 8003714:	881b      	ldrh	r3, [r3, #0]
 8003716:	461a      	mov	r2, r3
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	4413      	add	r3, r2
 800371c:	4a43      	ldr	r2, [pc, #268]	; (800382c <main+0x2ac>)
 800371e:	5cd3      	ldrb	r3, [r2, r3]
 8003720:	2b26      	cmp	r3, #38	; 0x26
 8003722:	d1e4      	bne.n	80036ee <main+0x16e>
 8003724:	e01a      	b.n	800375c <main+0x1dc>
					}
					else
					{
						while(buf[dat_p + i] != ' ')
						{
							mat[offset] = buf[dat_p + i];
 8003726:	4b42      	ldr	r3, [pc, #264]	; (8003830 <main+0x2b0>)
 8003728:	881b      	ldrh	r3, [r3, #0]
 800372a:	461a      	mov	r2, r3
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	4413      	add	r3, r2
 8003730:	4a3e      	ldr	r2, [pc, #248]	; (800382c <main+0x2ac>)
 8003732:	5cd1      	ldrb	r1, [r2, r3]
 8003734:	463a      	mov	r2, r7
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	4413      	add	r3, r2
 800373a:	460a      	mov	r2, r1
 800373c:	701a      	strb	r2, [r3, #0]
							offset++;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	3301      	adds	r3, #1
 8003742:	60fb      	str	r3, [r7, #12]
							i++;
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	3301      	adds	r3, #1
 8003748:	613b      	str	r3, [r7, #16]
						while(buf[dat_p + i] != ' ')
 800374a:	4b39      	ldr	r3, [pc, #228]	; (8003830 <main+0x2b0>)
 800374c:	881b      	ldrh	r3, [r3, #0]
 800374e:	461a      	mov	r2, r3
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	4413      	add	r3, r2
 8003754:	4a35      	ldr	r2, [pc, #212]	; (800382c <main+0x2ac>)
 8003756:	5cd3      	ldrb	r3, [r2, r3]
 8003758:	2b20      	cmp	r3, #32
 800375a:	d1e4      	bne.n	8003726 <main+0x1a6>
						}
					}

					offset = 0;
 800375c:	2300      	movs	r3, #0
 800375e:	60fb      	str	r3, [r7, #12]

					if(cont == 0)
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d10b      	bne.n	800377e <main+0x1fe>
					{
						map.data0=atol(mat);
 8003766:	463b      	mov	r3, r7
 8003768:	4618      	mov	r0, r3
 800376a:	f000 fce4 	bl	8004136 <atol>
 800376e:	4603      	mov	r3, r0
 8003770:	461a      	mov	r2, r3
 8003772:	4b35      	ldr	r3, [pc, #212]	; (8003848 <main+0x2c8>)
 8003774:	601a      	str	r2, [r3, #0]
						cont++;
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	3301      	adds	r3, #1
 800377a:	617b      	str	r3, [r7, #20]
 800377c:	e01f      	b.n	80037be <main+0x23e>
					}
					else if(cont == 1)
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d10b      	bne.n	800379c <main+0x21c>
					{
						map.data1=atol(mat);
 8003784:	463b      	mov	r3, r7
 8003786:	4618      	mov	r0, r3
 8003788:	f000 fcd5 	bl	8004136 <atol>
 800378c:	4603      	mov	r3, r0
 800378e:	461a      	mov	r2, r3
 8003790:	4b2d      	ldr	r3, [pc, #180]	; (8003848 <main+0x2c8>)
 8003792:	605a      	str	r2, [r3, #4]
						cont++;
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	3301      	adds	r3, #1
 8003798:	617b      	str	r3, [r7, #20]
 800379a:	e010      	b.n	80037be <main+0x23e>
					}
					else if(cont == 2)
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d10d      	bne.n	80037be <main+0x23e>
					{
						map.data2=atol(mat);
 80037a2:	463b      	mov	r3, r7
 80037a4:	4618      	mov	r0, r3
 80037a6:	f000 fcc6 	bl	8004136 <atol>
 80037aa:	4603      	mov	r3, r0
 80037ac:	461a      	mov	r2, r3
 80037ae:	4b26      	ldr	r3, [pc, #152]	; (8003848 <main+0x2c8>)
 80037b0:	609a      	str	r2, [r3, #8]
						cont++;
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	3301      	adds	r3, #1
 80037b6:	617b      	str	r3, [r7, #20]
						n1++;
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	3301      	adds	r3, #1
 80037bc:	60bb      	str	r3, [r7, #8]
					}
				}
				i++;
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	3301      	adds	r3, #1
 80037c2:	613b      	str	r3, [r7, #16]
			while(n1 != n2)
 80037c4:	68ba      	ldr	r2, [r7, #8]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d180      	bne.n	80036ce <main+0x14e>
			}

			/*Store map to flash*/
			MemMap_WriteAllEntriesToFlash(&map, memoryMapSize);
 80037cc:	2314      	movs	r3, #20
 80037ce:	4619      	mov	r1, r3
 80037d0:	481d      	ldr	r0, [pc, #116]	; (8003848 <main+0x2c8>)
 80037d2:	f000 fb25 	bl	8003e20 <MemMap_WriteAllEntriesToFlash>

			dat_p = print_webpage2(buf);
 80037d6:	4815      	ldr	r0, [pc, #84]	; (800382c <main+0x2ac>)
 80037d8:	f000 f9be 	bl	8003b58 <print_webpage2>
 80037dc:	4603      	mov	r3, r0
 80037de:	461a      	mov	r2, r3
 80037e0:	4b13      	ldr	r3, [pc, #76]	; (8003830 <main+0x2b0>)
 80037e2:	801a      	strh	r2, [r3, #0]
			goto SENDTCP;
 80037e4:	bf00      	nop
 80037e6:	e009      	b.n	80037fc <main+0x27c>
		}
		else
		{
			dat_p = ES_fill_tcp_data(buf, 0, "HTTP/1.0 401 Unauthorized\r\nContent-Type: text/html\r\n\r\n<h1>401 Unauthorized</h1>");
 80037e8:	4a18      	ldr	r2, [pc, #96]	; (800384c <main+0x2cc>)
 80037ea:	2100      	movs	r1, #0
 80037ec:	480f      	ldr	r0, [pc, #60]	; (800382c <main+0x2ac>)
 80037ee:	f7fd fe6a 	bl	80014c6 <ES_fill_tcp_data>
 80037f2:	4603      	mov	r3, r0
 80037f4:	b29a      	uxth	r2, r3
 80037f6:	4b0e      	ldr	r3, [pc, #56]	; (8003830 <main+0x2b0>)
 80037f8:	801a      	strh	r2, [r3, #0]
			goto SENDTCP;
 80037fa:	bf00      	nop
		}
		SENDTCP: ES_www_server_reply(buf, dat_p); // send web page data
 80037fc:	4b0c      	ldr	r3, [pc, #48]	; (8003830 <main+0x2b0>)
 80037fe:	881b      	ldrh	r3, [r3, #0]
 8003800:	4619      	mov	r1, r3
 8003802:	480a      	ldr	r0, [pc, #40]	; (800382c <main+0x2ac>)
 8003804:	f7fd fe71 	bl	80014ea <ES_www_server_reply>
 8003808:	e6e6      	b.n	80035d8 <main+0x58>
			continue;
 800380a:	bf00      	nop
  {
 800380c:	e6e4      	b.n	80035d8 <main+0x58>
 800380e:	bf00      	nop
 8003810:	20000530 	.word	0x20000530
 8003814:	20000020 	.word	0x20000020
 8003818:	200004a8 	.word	0x200004a8
 800381c:	200004ac 	.word	0x200004ac
 8003820:	20000028 	.word	0x20000028
 8003824:	200004a4 	.word	0x200004a4
 8003828:	200004a0 	.word	0x200004a0
 800382c:	20000278 	.word	0x20000278
 8003830:	2000052e 	.word	0x2000052e
 8003834:	08004c64 	.word	0x08004c64
 8003838:	08004c6c 	.word	0x08004c6c
 800383c:	08004c7c 	.word	0x08004c7c
 8003840:	08004c80 	.word	0x08004c80
 8003844:	08004c88 	.word	0x08004c88
 8003848:	200004dc 	.word	0x200004dc
 800384c:	08004c8c 	.word	0x08004c8c

08003850 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b090      	sub	sp, #64	; 0x40
 8003854:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003856:	f107 0318 	add.w	r3, r7, #24
 800385a:	2228      	movs	r2, #40	; 0x28
 800385c:	2100      	movs	r1, #0
 800385e:	4618      	mov	r0, r3
 8003860:	f000 fcc7 	bl	80041f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003864:	1d3b      	adds	r3, r7, #4
 8003866:	2200      	movs	r2, #0
 8003868:	601a      	str	r2, [r3, #0]
 800386a:	605a      	str	r2, [r3, #4]
 800386c:	609a      	str	r2, [r3, #8]
 800386e:	60da      	str	r2, [r3, #12]
 8003870:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003872:	2301      	movs	r3, #1
 8003874:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003876:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800387a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800387c:	2300      	movs	r3, #0
 800387e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003880:	2301      	movs	r3, #1
 8003882:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003884:	2302      	movs	r3, #2
 8003886:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003888:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800388c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800388e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003892:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003894:	f107 0318 	add.w	r3, r7, #24
 8003898:	4618      	mov	r0, r3
 800389a:	f7fc ff39 	bl	8000710 <HAL_RCC_OscConfig>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d001      	beq.n	80038a8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80038a4:	f000 f9d0 	bl	8003c48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80038a8:	230f      	movs	r3, #15
 80038aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038ac:	2302      	movs	r3, #2
 80038ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80038b0:	2300      	movs	r3, #0
 80038b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80038b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80038ba:	2300      	movs	r3, #0
 80038bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80038be:	1d3b      	adds	r3, r7, #4
 80038c0:	2102      	movs	r1, #2
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7fd f9a4 	bl	8000c10 <HAL_RCC_ClockConfig>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80038ce:	f000 f9bb 	bl	8003c48 <Error_Handler>
  }
}
 80038d2:	bf00      	nop
 80038d4:	3740      	adds	r7, #64	; 0x40
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
	...

080038dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80038e0:	4b17      	ldr	r3, [pc, #92]	; (8003940 <MX_SPI1_Init+0x64>)
 80038e2:	4a18      	ldr	r2, [pc, #96]	; (8003944 <MX_SPI1_Init+0x68>)
 80038e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80038e6:	4b16      	ldr	r3, [pc, #88]	; (8003940 <MX_SPI1_Init+0x64>)
 80038e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80038ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80038ee:	4b14      	ldr	r3, [pc, #80]	; (8003940 <MX_SPI1_Init+0x64>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80038f4:	4b12      	ldr	r3, [pc, #72]	; (8003940 <MX_SPI1_Init+0x64>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80038fa:	4b11      	ldr	r3, [pc, #68]	; (8003940 <MX_SPI1_Init+0x64>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003900:	4b0f      	ldr	r3, [pc, #60]	; (8003940 <MX_SPI1_Init+0x64>)
 8003902:	2200      	movs	r2, #0
 8003904:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003906:	4b0e      	ldr	r3, [pc, #56]	; (8003940 <MX_SPI1_Init+0x64>)
 8003908:	f44f 7200 	mov.w	r2, #512	; 0x200
 800390c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800390e:	4b0c      	ldr	r3, [pc, #48]	; (8003940 <MX_SPI1_Init+0x64>)
 8003910:	2228      	movs	r2, #40	; 0x28
 8003912:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003914:	4b0a      	ldr	r3, [pc, #40]	; (8003940 <MX_SPI1_Init+0x64>)
 8003916:	2200      	movs	r2, #0
 8003918:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800391a:	4b09      	ldr	r3, [pc, #36]	; (8003940 <MX_SPI1_Init+0x64>)
 800391c:	2200      	movs	r2, #0
 800391e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003920:	4b07      	ldr	r3, [pc, #28]	; (8003940 <MX_SPI1_Init+0x64>)
 8003922:	2200      	movs	r2, #0
 8003924:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003926:	4b06      	ldr	r3, [pc, #24]	; (8003940 <MX_SPI1_Init+0x64>)
 8003928:	220a      	movs	r2, #10
 800392a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800392c:	4804      	ldr	r0, [pc, #16]	; (8003940 <MX_SPI1_Init+0x64>)
 800392e:	f7fd fad9 	bl	8000ee4 <HAL_SPI_Init>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d001      	beq.n	800393c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003938:	f000 f986 	bl	8003c48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800393c:	bf00      	nop
 800393e:	bd80      	pop	{r7, pc}
 8003940:	20000530 	.word	0x20000530
 8003944:	40013000 	.word	0x40013000

08003948 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b088      	sub	sp, #32
 800394c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800394e:	f107 0310 	add.w	r3, r7, #16
 8003952:	2200      	movs	r2, #0
 8003954:	601a      	str	r2, [r3, #0]
 8003956:	605a      	str	r2, [r3, #4]
 8003958:	609a      	str	r2, [r3, #8]
 800395a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800395c:	4b27      	ldr	r3, [pc, #156]	; (80039fc <MX_GPIO_Init+0xb4>)
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	4a26      	ldr	r2, [pc, #152]	; (80039fc <MX_GPIO_Init+0xb4>)
 8003962:	f043 0310 	orr.w	r3, r3, #16
 8003966:	6193      	str	r3, [r2, #24]
 8003968:	4b24      	ldr	r3, [pc, #144]	; (80039fc <MX_GPIO_Init+0xb4>)
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	f003 0310 	and.w	r3, r3, #16
 8003970:	60fb      	str	r3, [r7, #12]
 8003972:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003974:	4b21      	ldr	r3, [pc, #132]	; (80039fc <MX_GPIO_Init+0xb4>)
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	4a20      	ldr	r2, [pc, #128]	; (80039fc <MX_GPIO_Init+0xb4>)
 800397a:	f043 0320 	orr.w	r3, r3, #32
 800397e:	6193      	str	r3, [r2, #24]
 8003980:	4b1e      	ldr	r3, [pc, #120]	; (80039fc <MX_GPIO_Init+0xb4>)
 8003982:	699b      	ldr	r3, [r3, #24]
 8003984:	f003 0320 	and.w	r3, r3, #32
 8003988:	60bb      	str	r3, [r7, #8]
 800398a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800398c:	4b1b      	ldr	r3, [pc, #108]	; (80039fc <MX_GPIO_Init+0xb4>)
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	4a1a      	ldr	r2, [pc, #104]	; (80039fc <MX_GPIO_Init+0xb4>)
 8003992:	f043 0304 	orr.w	r3, r3, #4
 8003996:	6193      	str	r3, [r2, #24]
 8003998:	4b18      	ldr	r3, [pc, #96]	; (80039fc <MX_GPIO_Init+0xb4>)
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	f003 0304 	and.w	r3, r3, #4
 80039a0:	607b      	str	r3, [r7, #4]
 80039a2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80039a4:	2200      	movs	r2, #0
 80039a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80039aa:	4815      	ldr	r0, [pc, #84]	; (8003a00 <MX_GPIO_Init+0xb8>)
 80039ac:	f7fc fe98 	bl	80006e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80039b0:	2200      	movs	r2, #0
 80039b2:	2110      	movs	r1, #16
 80039b4:	4813      	ldr	r0, [pc, #76]	; (8003a04 <MX_GPIO_Init+0xbc>)
 80039b6:	f7fc fe93 	bl	80006e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80039ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039c0:	2301      	movs	r3, #1
 80039c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039c4:	2300      	movs	r3, #0
 80039c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039c8:	2302      	movs	r3, #2
 80039ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80039cc:	f107 0310 	add.w	r3, r7, #16
 80039d0:	4619      	mov	r1, r3
 80039d2:	480b      	ldr	r0, [pc, #44]	; (8003a00 <MX_GPIO_Init+0xb8>)
 80039d4:	f7fc fd2a 	bl	800042c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80039d8:	2310      	movs	r3, #16
 80039da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039dc:	2301      	movs	r3, #1
 80039de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e0:	2300      	movs	r3, #0
 80039e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039e4:	2302      	movs	r3, #2
 80039e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80039e8:	f107 0310 	add.w	r3, r7, #16
 80039ec:	4619      	mov	r1, r3
 80039ee:	4805      	ldr	r0, [pc, #20]	; (8003a04 <MX_GPIO_Init+0xbc>)
 80039f0:	f7fc fd1c 	bl	800042c <HAL_GPIO_Init>

}
 80039f4:	bf00      	nop
 80039f6:	3720      	adds	r7, #32
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	40021000 	.word	0x40021000
 8003a00:	40011000 	.word	0x40011000
 8003a04:	40010800 	.word	0x40010800

08003a08 <http200ok>:

/* USER CODE BEGIN 4 */
uint16_t http200ok(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	af00      	add	r7, sp, #0
	return (ES_fill_tcp_data(buf, 0, "HTTP/1.0 200 OK\r\nContent-Type: text/html\r\nPragma: no-cache\r\n\r\n"));
 8003a0c:	4a04      	ldr	r2, [pc, #16]	; (8003a20 <http200ok+0x18>)
 8003a0e:	2100      	movs	r1, #0
 8003a10:	4804      	ldr	r0, [pc, #16]	; (8003a24 <http200ok+0x1c>)
 8003a12:	f7fd fd58 	bl	80014c6 <ES_fill_tcp_data>
 8003a16:	4603      	mov	r3, r0
 8003a18:	b29b      	uxth	r3, r3
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	08004cdc 	.word	0x08004cdc
 8003a24:	20000278 	.word	0x20000278

08003a28 <print_webpage>:

// prepare the webpage by writing the data to the tcp send buffer
uint16_t print_webpage(uint8_t *buf)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b094      	sub	sp, #80	; 0x50
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
	uint16_t plen;
	char writeValue[50];
	int var1, var2, var3;

	plen = http200ok();
 8003a30:	f7ff ffea 	bl	8003a08 <http200ok>
 8003a34:	4603      	mov	r3, r0
 8003a36:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	plen = ES_fill_tcp_data(buf, plen, "<!DOCTYPE html><head><title>STM32F1 ENC28J60 Ethernet Demo</title></head>");
 8003a3a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003a3e:	4a3d      	ldr	r2, [pc, #244]	; (8003b34 <print_webpage+0x10c>)
 8003a40:	4619      	mov	r1, r3
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f7fd fd3f 	bl	80014c6 <ES_fill_tcp_data>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

	plen = ES_fill_tcp_data(buf, plen, "<body><h2>Dados na memoria:</h2>");
 8003a4e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003a52:	4a39      	ldr	r2, [pc, #228]	; (8003b38 <print_webpage+0x110>)
 8003a54:	4619      	mov	r1, r3
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7fd fd35 	bl	80014c6 <ES_fill_tcp_data>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

	MemMap_ReadAllEntriesFromFlash(&map, memoryMapSize);
 8003a62:	2314      	movs	r3, #20
 8003a64:	4619      	mov	r1, r3
 8003a66:	4835      	ldr	r0, [pc, #212]	; (8003b3c <print_webpage+0x114>)
 8003a68:	f000 fa10 	bl	8003e8c <MemMap_ReadAllEntriesFromFlash>

	var1 = (int) map.data0;
 8003a6c:	4b33      	ldr	r3, [pc, #204]	; (8003b3c <print_webpage+0x114>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	64bb      	str	r3, [r7, #72]	; 0x48
	sprintf(writeValue,"<br>O valor da variavel 1 = %d",var1);
 8003a72:	f107 030c 	add.w	r3, r7, #12
 8003a76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a78:	4931      	ldr	r1, [pc, #196]	; (8003b40 <print_webpage+0x118>)
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f000 fc1a 	bl	80042b4 <siprintf>
	plen = ES_fill_tcp_data(buf, plen, writeValue);
 8003a80:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003a84:	f107 020c 	add.w	r2, r7, #12
 8003a88:	4619      	mov	r1, r3
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f7fd fd1b 	bl	80014c6 <ES_fill_tcp_data>
 8003a90:	4603      	mov	r3, r0
 8003a92:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

	var2 = (int) map.data1;
 8003a96:	4b29      	ldr	r3, [pc, #164]	; (8003b3c <print_webpage+0x114>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	647b      	str	r3, [r7, #68]	; 0x44
	sprintf(writeValue,"<br>O valor da variavel 2 = %d",var2);
 8003a9c:	f107 030c 	add.w	r3, r7, #12
 8003aa0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003aa2:	4928      	ldr	r1, [pc, #160]	; (8003b44 <print_webpage+0x11c>)
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f000 fc05 	bl	80042b4 <siprintf>
	plen = ES_fill_tcp_data(buf, plen, writeValue);
 8003aaa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003aae:	f107 020c 	add.w	r2, r7, #12
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f7fd fd06 	bl	80014c6 <ES_fill_tcp_data>
 8003aba:	4603      	mov	r3, r0
 8003abc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

	var3 = (int) map.data2;
 8003ac0:	4b1e      	ldr	r3, [pc, #120]	; (8003b3c <print_webpage+0x114>)
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	643b      	str	r3, [r7, #64]	; 0x40
	sprintf(writeValue,"<br>O valor da variavel 3 = %d",var3);
 8003ac6:	f107 030c 	add.w	r3, r7, #12
 8003aca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003acc:	491e      	ldr	r1, [pc, #120]	; (8003b48 <print_webpage+0x120>)
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f000 fbf0 	bl	80042b4 <siprintf>
	plen = ES_fill_tcp_data(buf, plen, writeValue);
 8003ad4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003ad8:	f107 020c 	add.w	r2, r7, #12
 8003adc:	4619      	mov	r1, r3
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f7fd fcf1 	bl	80014c6 <ES_fill_tcp_data>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

	plen = ES_fill_tcp_data(buf, plen, "<br> ");
 8003aea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003aee:	4a17      	ldr	r2, [pc, #92]	; (8003b4c <print_webpage+0x124>)
 8003af0:	4619      	mov	r1, r3
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f7fd fce7 	bl	80014c6 <ES_fill_tcp_data>
 8003af8:	4603      	mov	r3, r0
 8003afa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

	plen = ES_fill_tcp_data(buf, plen, "<br> <a href='/test'><button>Alterar dados</button></a>");
 8003afe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b02:	4a13      	ldr	r2, [pc, #76]	; (8003b50 <print_webpage+0x128>)
 8003b04:	4619      	mov	r1, r3
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f7fd fcdd 	bl	80014c6 <ES_fill_tcp_data>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	plen = ES_fill_tcp_data(buf, plen, "</body></html>");
 8003b12:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b16:	4a0f      	ldr	r2, [pc, #60]	; (8003b54 <print_webpage+0x12c>)
 8003b18:	4619      	mov	r1, r3
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f7fd fcd3 	bl	80014c6 <ES_fill_tcp_data>
 8003b20:	4603      	mov	r3, r0
 8003b22:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

	return (plen);
 8003b26:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3750      	adds	r7, #80	; 0x50
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	08004d1c 	.word	0x08004d1c
 8003b38:	08004d68 	.word	0x08004d68
 8003b3c:	200004dc 	.word	0x200004dc
 8003b40:	08004d8c 	.word	0x08004d8c
 8003b44:	08004dac 	.word	0x08004dac
 8003b48:	08004dcc 	.word	0x08004dcc
 8003b4c:	08004dec 	.word	0x08004dec
 8003b50:	08004df4 	.word	0x08004df4
 8003b54:	08004e2c 	.word	0x08004e2c

08003b58 <print_webpage2>:

// prepare the webpage by writing the data to the tcp send buffer
uint16_t print_webpage2(uint8_t *buf)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
	uint16_t plen;

	plen = http200ok();
 8003b60:	f7ff ff52 	bl	8003a08 <http200ok>
 8003b64:	4603      	mov	r3, r0
 8003b66:	81fb      	strh	r3, [r7, #14]
	plen = ES_fill_tcp_data(buf, plen, "<!DOCTYPE html><head><title>Test page</title></head><body>");
 8003b68:	89fb      	ldrh	r3, [r7, #14]
 8003b6a:	4a2a      	ldr	r2, [pc, #168]	; (8003c14 <print_webpage2+0xbc>)
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7fd fca9 	bl	80014c6 <ES_fill_tcp_data>
 8003b74:	4603      	mov	r3, r0
 8003b76:	81fb      	strh	r3, [r7, #14]
	plen = ES_fill_tcp_data(buf, plen, "<h1>Alterar dados: </h1>");
 8003b78:	89fb      	ldrh	r3, [r7, #14]
 8003b7a:	4a27      	ldr	r2, [pc, #156]	; (8003c18 <print_webpage2+0xc0>)
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f7fd fca1 	bl	80014c6 <ES_fill_tcp_data>
 8003b84:	4603      	mov	r3, r0
 8003b86:	81fb      	strh	r3, [r7, #14]

	plen = ES_fill_tcp_data(buf, plen, "<form method='GET' action='/ '>");
 8003b88:	89fb      	ldrh	r3, [r7, #14]
 8003b8a:	4a24      	ldr	r2, [pc, #144]	; (8003c1c <print_webpage2+0xc4>)
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f7fd fc99 	bl	80014c6 <ES_fill_tcp_data>
 8003b94:	4603      	mov	r3, r0
 8003b96:	81fb      	strh	r3, [r7, #14]
	plen = ES_fill_tcp_data(buf, plen, "<br>Variavel 1: <input type='text' name='var1'/><br/>");
 8003b98:	89fb      	ldrh	r3, [r7, #14]
 8003b9a:	4a21      	ldr	r2, [pc, #132]	; (8003c20 <print_webpage2+0xc8>)
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f7fd fc91 	bl	80014c6 <ES_fill_tcp_data>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	81fb      	strh	r3, [r7, #14]
	plen = ES_fill_tcp_data(buf, plen, "<br>Variavel 2: <input type='text' name='var2'/><br/>");
 8003ba8:	89fb      	ldrh	r3, [r7, #14]
 8003baa:	4a1e      	ldr	r2, [pc, #120]	; (8003c24 <print_webpage2+0xcc>)
 8003bac:	4619      	mov	r1, r3
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f7fd fc89 	bl	80014c6 <ES_fill_tcp_data>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	81fb      	strh	r3, [r7, #14]
	plen = ES_fill_tcp_data(buf, plen, "<br>Variavel 3: <input type='text' name='var3'/><br/>");
 8003bb8:	89fb      	ldrh	r3, [r7, #14]
 8003bba:	4a1b      	ldr	r2, [pc, #108]	; (8003c28 <print_webpage2+0xd0>)
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f7fd fc81 	bl	80014c6 <ES_fill_tcp_data>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	81fb      	strh	r3, [r7, #14]
	plen = ES_fill_tcp_data(buf, plen, "<br><input type='submit' value='Insere dados'/>");
 8003bc8:	89fb      	ldrh	r3, [r7, #14]
 8003bca:	4a18      	ldr	r2, [pc, #96]	; (8003c2c <print_webpage2+0xd4>)
 8003bcc:	4619      	mov	r1, r3
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f7fd fc79 	bl	80014c6 <ES_fill_tcp_data>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	81fb      	strh	r3, [r7, #14]
	plen = ES_fill_tcp_data(buf, plen, "</form>");
 8003bd8:	89fb      	ldrh	r3, [r7, #14]
 8003bda:	4a15      	ldr	r2, [pc, #84]	; (8003c30 <print_webpage2+0xd8>)
 8003bdc:	4619      	mov	r1, r3
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f7fd fc71 	bl	80014c6 <ES_fill_tcp_data>
 8003be4:	4603      	mov	r3, r0
 8003be6:	81fb      	strh	r3, [r7, #14]

	plen = ES_fill_tcp_data(buf, plen, "<br> <a href='/'><button>Voltar</button></a>");
 8003be8:	89fb      	ldrh	r3, [r7, #14]
 8003bea:	4a12      	ldr	r2, [pc, #72]	; (8003c34 <print_webpage2+0xdc>)
 8003bec:	4619      	mov	r1, r3
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f7fd fc69 	bl	80014c6 <ES_fill_tcp_data>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	81fb      	strh	r3, [r7, #14]

	plen = ES_fill_tcp_data(buf, plen, "</body></html>");
 8003bf8:	89fb      	ldrh	r3, [r7, #14]
 8003bfa:	4a0f      	ldr	r2, [pc, #60]	; (8003c38 <print_webpage2+0xe0>)
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f7fd fc61 	bl	80014c6 <ES_fill_tcp_data>
 8003c04:	4603      	mov	r3, r0
 8003c06:	81fb      	strh	r3, [r7, #14]

	return (plen);
 8003c08:	89fb      	ldrh	r3, [r7, #14]
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3710      	adds	r7, #16
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	08004e3c 	.word	0x08004e3c
 8003c18:	08004e78 	.word	0x08004e78
 8003c1c:	08004e94 	.word	0x08004e94
 8003c20:	08004eb4 	.word	0x08004eb4
 8003c24:	08004eec 	.word	0x08004eec
 8003c28:	08004f24 	.word	0x08004f24
 8003c2c:	08004f5c 	.word	0x08004f5c
 8003c30:	08004f8c 	.word	0x08004f8c
 8003c34:	08004f94 	.word	0x08004f94
 8003c38:	08004e2c 	.word	0x08004e2c

08003c3c <ES_PingCallback>:

void ES_PingCallback(void)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	af00      	add	r7, sp, #0
	//STM_EVAL_LEDToggle(LED4);
}
 8003c40:	bf00      	nop
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bc80      	pop	{r7}
 8003c46:	4770      	bx	lr

08003c48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003c4c:	bf00      	nop
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bc80      	pop	{r7}
 8003c52:	4770      	bx	lr

08003c54 <MemMap_Flash_Unlock>:


#include "memory.h"

static inline void MemMap_Flash_Unlock(void)
{
 8003c54:	b480      	push	{r7}
 8003c56:	af00      	add	r7, sp, #0
	if(FLASH->CR & FLASH_CR_LOCK)
 8003c58:	4b07      	ldr	r3, [pc, #28]	; (8003c78 <MemMap_Flash_Unlock+0x24>)
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d005      	beq.n	8003c70 <MemMap_Flash_Unlock+0x1c>
	{
		FLASH->KEYR = FLASH_UNLOCK_KEY1;
 8003c64:	4b04      	ldr	r3, [pc, #16]	; (8003c78 <MemMap_Flash_Unlock+0x24>)
 8003c66:	4a05      	ldr	r2, [pc, #20]	; (8003c7c <MemMap_Flash_Unlock+0x28>)
 8003c68:	605a      	str	r2, [r3, #4]
		FLASH->KEYR = FLASH_UNLOCK_KEY2;
 8003c6a:	4b03      	ldr	r3, [pc, #12]	; (8003c78 <MemMap_Flash_Unlock+0x24>)
 8003c6c:	4a04      	ldr	r2, [pc, #16]	; (8003c80 <MemMap_Flash_Unlock+0x2c>)
 8003c6e:	605a      	str	r2, [r3, #4]
	}
}
 8003c70:	bf00      	nop
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bc80      	pop	{r7}
 8003c76:	4770      	bx	lr
 8003c78:	40022000 	.word	0x40022000
 8003c7c:	45670123 	.word	0x45670123
 8003c80:	cdef89ab 	.word	0xcdef89ab

08003c84 <MemMap_Flash_Lock>:


static inline void MemMap_Flash_Lock(void)
{
 8003c84:	b480      	push	{r7}
 8003c86:	af00      	add	r7, sp, #0
	FLASH->CR |= FLASH_CR_LOCK;
 8003c88:	4b04      	ldr	r3, [pc, #16]	; (8003c9c <MemMap_Flash_Lock+0x18>)
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	4a03      	ldr	r2, [pc, #12]	; (8003c9c <MemMap_Flash_Lock+0x18>)
 8003c8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c92:	6113      	str	r3, [r2, #16]
}
 8003c94:	bf00      	nop
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bc80      	pop	{r7}
 8003c9a:	4770      	bx	lr
 8003c9c:	40022000 	.word	0x40022000

08003ca0 <MemMap_Flash_WriteWord>:


static int8_t MemMap_Flash_WriteWord(uint32_t address, uint32_t word)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
	uint32_t timeout = FLASH_TIMEOUT;
 8003caa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003cae:	60fb      	str	r3, [r7, #12]

	while(FLASH->SR & FLASH_SR_BSY)
 8003cb0:	e008      	b.n	8003cc4 <MemMap_Flash_WriteWord+0x24>
	{
		if(--timeout == 0)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	60fb      	str	r3, [r7, #12]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d102      	bne.n	8003cc4 <MemMap_Flash_WriteWord+0x24>
		{
			return -1;
 8003cbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003cc2:	e044      	b.n	8003d4e <MemMap_Flash_WriteWord+0xae>
	while(FLASH->SR & FLASH_SR_BSY)
 8003cc4:	4b24      	ldr	r3, [pc, #144]	; (8003d58 <MemMap_Flash_WriteWord+0xb8>)
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	f003 0301 	and.w	r3, r3, #1
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1f0      	bne.n	8003cb2 <MemMap_Flash_WriteWord+0x12>
		}
	}

	FLASH->CR |= FLASH_CR_PG;
 8003cd0:	4b21      	ldr	r3, [pc, #132]	; (8003d58 <MemMap_Flash_WriteWord+0xb8>)
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	4a20      	ldr	r2, [pc, #128]	; (8003d58 <MemMap_Flash_WriteWord+0xb8>)
 8003cd6:	f043 0301 	orr.w	r3, r3, #1
 8003cda:	6113      	str	r3, [r2, #16]

	*(__IO uint16_t*)address = (uint16_t)word;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	b292      	uxth	r2, r2
 8003ce2:	801a      	strh	r2, [r3, #0]

	timeout = FLASH_TIMEOUT;
 8003ce4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ce8:	60fb      	str	r3, [r7, #12]
	while(FLASH->SR & FLASH_SR_BSY)
 8003cea:	e008      	b.n	8003cfe <MemMap_Flash_WriteWord+0x5e>
	{
		if(--timeout == 0)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	60fb      	str	r3, [r7, #12]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d102      	bne.n	8003cfe <MemMap_Flash_WriteWord+0x5e>
		{
			return -1;
 8003cf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003cfc:	e027      	b.n	8003d4e <MemMap_Flash_WriteWord+0xae>
	while(FLASH->SR & FLASH_SR_BSY)
 8003cfe:	4b16      	ldr	r3, [pc, #88]	; (8003d58 <MemMap_Flash_WriteWord+0xb8>)
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1f0      	bne.n	8003cec <MemMap_Flash_WriteWord+0x4c>
		}
	}

	address += 2;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	3302      	adds	r3, #2
 8003d0e:	607b      	str	r3, [r7, #4]
	*(__IO uint16_t*)address = (uint16_t)(word >> 16);
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	0c1a      	lsrs	r2, r3, #16
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	b292      	uxth	r2, r2
 8003d18:	801a      	strh	r2, [r3, #0]

	timeout = FLASH_TIMEOUT;
 8003d1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d1e:	60fb      	str	r3, [r7, #12]
	while(FLASH->SR & FLASH_SR_BSY)
 8003d20:	e008      	b.n	8003d34 <MemMap_Flash_WriteWord+0x94>
	{
		if(--timeout == 0)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	3b01      	subs	r3, #1
 8003d26:	60fb      	str	r3, [r7, #12]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d102      	bne.n	8003d34 <MemMap_Flash_WriteWord+0x94>
		{
			return -1;
 8003d2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d32:	e00c      	b.n	8003d4e <MemMap_Flash_WriteWord+0xae>
	while(FLASH->SR & FLASH_SR_BSY)
 8003d34:	4b08      	ldr	r3, [pc, #32]	; (8003d58 <MemMap_Flash_WriteWord+0xb8>)
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	f003 0301 	and.w	r3, r3, #1
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1f0      	bne.n	8003d22 <MemMap_Flash_WriteWord+0x82>
		}
	}

	FLASH->CR &= ~FLASH_CR_PG;
 8003d40:	4b05      	ldr	r3, [pc, #20]	; (8003d58 <MemMap_Flash_WriteWord+0xb8>)
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	4a04      	ldr	r2, [pc, #16]	; (8003d58 <MemMap_Flash_WriteWord+0xb8>)
 8003d46:	f023 0301 	bic.w	r3, r3, #1
 8003d4a:	6113      	str	r3, [r2, #16]

	return 1;
 8003d4c:	2301      	movs	r3, #1
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3714      	adds	r7, #20
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bc80      	pop	{r7}
 8003d56:	4770      	bx	lr
 8003d58:	40022000 	.word	0x40022000

08003d5c <MemMap_Flash_ReadWord>:


static uint32_t MemMap_Flash_ReadWord(uint32_t address)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
	return *(uint32_t*)address;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bc80      	pop	{r7}
 8003d70:	4770      	bx	lr
	...

08003d74 <MemMap_Flash_ErasePage>:


static int8_t MemMap_Flash_ErasePage(uint32_t pageAddress)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
	uint32_t timeout = FLASH_TIMEOUT;
 8003d7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d80:	60fb      	str	r3, [r7, #12]

	while(FLASH->SR & FLASH_SR_BSY)
 8003d82:	e008      	b.n	8003d96 <MemMap_Flash_ErasePage+0x22>
	{
		if(--timeout == 0)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	3b01      	subs	r3, #1
 8003d88:	60fb      	str	r3, [r7, #12]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d102      	bne.n	8003d96 <MemMap_Flash_ErasePage+0x22>
		{
			return -1;
 8003d90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d94:	e03d      	b.n	8003e12 <MemMap_Flash_ErasePage+0x9e>
	while(FLASH->SR & FLASH_SR_BSY)
 8003d96:	4b21      	ldr	r3, [pc, #132]	; (8003e1c <MemMap_Flash_ErasePage+0xa8>)
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	f003 0301 	and.w	r3, r3, #1
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1f0      	bne.n	8003d84 <MemMap_Flash_ErasePage+0x10>
		}
	}

	FLASH->CR |= FLASH_CR_PER;
 8003da2:	4b1e      	ldr	r3, [pc, #120]	; (8003e1c <MemMap_Flash_ErasePage+0xa8>)
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	4a1d      	ldr	r2, [pc, #116]	; (8003e1c <MemMap_Flash_ErasePage+0xa8>)
 8003da8:	f043 0302 	orr.w	r3, r3, #2
 8003dac:	6113      	str	r3, [r2, #16]
	FLASH->AR = pageAddress;
 8003dae:	4a1b      	ldr	r2, [pc, #108]	; (8003e1c <MemMap_Flash_ErasePage+0xa8>)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6153      	str	r3, [r2, #20]
	FLASH->CR |= FLASH_CR_STRT;
 8003db4:	4b19      	ldr	r3, [pc, #100]	; (8003e1c <MemMap_Flash_ErasePage+0xa8>)
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	4a18      	ldr	r2, [pc, #96]	; (8003e1c <MemMap_Flash_ErasePage+0xa8>)
 8003dba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dbe:	6113      	str	r3, [r2, #16]

	timeout = FLASH_TIMEOUT;
 8003dc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003dc4:	60fb      	str	r3, [r7, #12]
	while(FLASH->SR & FLASH_SR_BSY)
 8003dc6:	e008      	b.n	8003dda <MemMap_Flash_ErasePage+0x66>
	{
		if(--timeout == 0)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	60fb      	str	r3, [r7, #12]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d102      	bne.n	8003dda <MemMap_Flash_ErasePage+0x66>
		{
			return -1;
 8003dd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003dd8:	e01b      	b.n	8003e12 <MemMap_Flash_ErasePage+0x9e>
	while(FLASH->SR & FLASH_SR_BSY)
 8003dda:	4b10      	ldr	r3, [pc, #64]	; (8003e1c <MemMap_Flash_ErasePage+0xa8>)
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1f0      	bne.n	8003dc8 <MemMap_Flash_ErasePage+0x54>
		}
	}

	if(FLASH->SR & FLASH_SR_EOP)
 8003de6:	4b0d      	ldr	r3, [pc, #52]	; (8003e1c <MemMap_Flash_ErasePage+0xa8>)
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	f003 0320 	and.w	r3, r3, #32
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00d      	beq.n	8003e0e <MemMap_Flash_ErasePage+0x9a>
	{
		FLASH->SR &= ~FLASH_SR_EOP;
 8003df2:	4b0a      	ldr	r3, [pc, #40]	; (8003e1c <MemMap_Flash_ErasePage+0xa8>)
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	4a09      	ldr	r2, [pc, #36]	; (8003e1c <MemMap_Flash_ErasePage+0xa8>)
 8003df8:	f023 0320 	bic.w	r3, r3, #32
 8003dfc:	60d3      	str	r3, [r2, #12]
		FLASH->CR &= ~FLASH_CR_PER;
 8003dfe:	4b07      	ldr	r3, [pc, #28]	; (8003e1c <MemMap_Flash_ErasePage+0xa8>)
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	4a06      	ldr	r2, [pc, #24]	; (8003e1c <MemMap_Flash_ErasePage+0xa8>)
 8003e04:	f023 0302 	bic.w	r3, r3, #2
 8003e08:	6113      	str	r3, [r2, #16]
		return 1;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e001      	b.n	8003e12 <MemMap_Flash_ErasePage+0x9e>
	}
	else
		return -1;
 8003e0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3714      	adds	r7, #20
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bc80      	pop	{r7}
 8003e1a:	4770      	bx	lr
 8003e1c:	40022000 	.word	0x40022000

08003e20 <MemMap_WriteAllEntriesToFlash>:

///*
void MemMap_WriteAllEntriesToFlash(MemoryMap* map, uint32_t size)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b088      	sub	sp, #32
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
	uint32_t sizeOfUint32 = sizeof(uint32_t);
 8003e2a:	2304      	movs	r3, #4
 8003e2c:	61bb      	str	r3, [r7, #24]
	MemMap_Flash_Unlock();
 8003e2e:	f7ff ff11 	bl	8003c54 <MemMap_Flash_Unlock>

	if(MemMap_Flash_ErasePage(FLASH_MEMORYMAP_BASE_ADDR))
 8003e32:	4815      	ldr	r0, [pc, #84]	; (8003e88 <MemMap_WriteAllEntriesToFlash+0x68>)
 8003e34:	f7ff ff9e 	bl	8003d74 <MemMap_Flash_ErasePage>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d01e      	beq.n	8003e7c <MemMap_WriteAllEntriesToFlash+0x5c>
	{

		uint32_t* elemPtr = (uint32_t*)map;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	617b      	str	r3, [r7, #20]
		for(uint32_t elemCnt = 0; elemCnt < size; elemCnt++)
 8003e42:	2300      	movs	r3, #0
 8003e44:	61fb      	str	r3, [r7, #28]
 8003e46:	e015      	b.n	8003e74 <MemMap_WriteAllEntriesToFlash+0x54>
		{
			uint32_t word = *(elemPtr + elemCnt);
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	697a      	ldr	r2, [r7, #20]
 8003e4e:	4413      	add	r3, r2
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	613b      	str	r3, [r7, #16]
			uint32_t address = (uint32_t)(FLASH_MEMORYMAP_BASE_ADDR + (elemCnt * sizeOfUint32));
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	69ba      	ldr	r2, [r7, #24]
 8003e58:	fb02 f303 	mul.w	r3, r2, r3
 8003e5c:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8003e60:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003e64:	60fb      	str	r3, [r7, #12]
			MemMap_Flash_WriteWord(address, word);
 8003e66:	6939      	ldr	r1, [r7, #16]
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f7ff ff19 	bl	8003ca0 <MemMap_Flash_WriteWord>
		for(uint32_t elemCnt = 0; elemCnt < size; elemCnt++)
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	3301      	adds	r3, #1
 8003e72:	61fb      	str	r3, [r7, #28]
 8003e74:	69fa      	ldr	r2, [r7, #28]
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d3e5      	bcc.n	8003e48 <MemMap_WriteAllEntriesToFlash+0x28>
		}
	}

	MemMap_Flash_Lock();
 8003e7c:	f7ff ff02 	bl	8003c84 <MemMap_Flash_Lock>
}
 8003e80:	bf00      	nop
 8003e82:	3720      	adds	r7, #32
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	08010000 	.word	0x08010000

08003e8c <MemMap_ReadAllEntriesFromFlash>:


void MemMap_ReadAllEntriesFromFlash(MemoryMap* map, uint32_t size)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b088      	sub	sp, #32
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
	uint32_t sizeOfUint32 = sizeof(uint32_t);
 8003e96:	2304      	movs	r3, #4
 8003e98:	61bb      	str	r3, [r7, #24]
	uint32_t* elemPtr = (uint32_t*)map;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	617b      	str	r3, [r7, #20]
	for(uint32_t elemCnt = 0; elemCnt < size; elemCnt++)
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	61fb      	str	r3, [r7, #28]
 8003ea2:	e015      	b.n	8003ed0 <MemMap_ReadAllEntriesFromFlash+0x44>
	{
		uint32_t address = (uint32_t)(FLASH_MEMORYMAP_BASE_ADDR + (elemCnt * sizeOfUint32));
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	69ba      	ldr	r2, [r7, #24]
 8003ea8:	fb02 f303 	mul.w	r3, r2, r3
 8003eac:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8003eb0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003eb4:	613b      	str	r3, [r7, #16]
		uint32_t elemVal = MemMap_Flash_ReadWord(address);
 8003eb6:	6938      	ldr	r0, [r7, #16]
 8003eb8:	f7ff ff50 	bl	8003d5c <MemMap_Flash_ReadWord>
 8003ebc:	60f8      	str	r0, [r7, #12]
		*(elemPtr + elemCnt) = elemVal;
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	601a      	str	r2, [r3, #0]
	for(uint32_t elemCnt = 0; elemCnt < size; elemCnt++)
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	3301      	adds	r3, #1
 8003ece:	61fb      	str	r3, [r7, #28]
 8003ed0:	69fa      	ldr	r2, [r7, #28]
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d3e5      	bcc.n	8003ea4 <MemMap_ReadAllEntriesFromFlash+0x18>
	}
}
 8003ed8:	bf00      	nop
 8003eda:	3720      	adds	r7, #32
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b085      	sub	sp, #20
 8003ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003ee6:	4b15      	ldr	r3, [pc, #84]	; (8003f3c <HAL_MspInit+0x5c>)
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	4a14      	ldr	r2, [pc, #80]	; (8003f3c <HAL_MspInit+0x5c>)
 8003eec:	f043 0301 	orr.w	r3, r3, #1
 8003ef0:	6193      	str	r3, [r2, #24]
 8003ef2:	4b12      	ldr	r3, [pc, #72]	; (8003f3c <HAL_MspInit+0x5c>)
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	60bb      	str	r3, [r7, #8]
 8003efc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003efe:	4b0f      	ldr	r3, [pc, #60]	; (8003f3c <HAL_MspInit+0x5c>)
 8003f00:	69db      	ldr	r3, [r3, #28]
 8003f02:	4a0e      	ldr	r2, [pc, #56]	; (8003f3c <HAL_MspInit+0x5c>)
 8003f04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f08:	61d3      	str	r3, [r2, #28]
 8003f0a:	4b0c      	ldr	r3, [pc, #48]	; (8003f3c <HAL_MspInit+0x5c>)
 8003f0c:	69db      	ldr	r3, [r3, #28]
 8003f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f12:	607b      	str	r3, [r7, #4]
 8003f14:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003f16:	4b0a      	ldr	r3, [pc, #40]	; (8003f40 <HAL_MspInit+0x60>)
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	60fb      	str	r3, [r7, #12]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003f22:	60fb      	str	r3, [r7, #12]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f2a:	60fb      	str	r3, [r7, #12]
 8003f2c:	4a04      	ldr	r2, [pc, #16]	; (8003f40 <HAL_MspInit+0x60>)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f32:	bf00      	nop
 8003f34:	3714      	adds	r7, #20
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bc80      	pop	{r7}
 8003f3a:	4770      	bx	lr
 8003f3c:	40021000 	.word	0x40021000
 8003f40:	40010000 	.word	0x40010000

08003f44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b088      	sub	sp, #32
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f4c:	f107 0310 	add.w	r3, r7, #16
 8003f50:	2200      	movs	r2, #0
 8003f52:	601a      	str	r2, [r3, #0]
 8003f54:	605a      	str	r2, [r3, #4]
 8003f56:	609a      	str	r2, [r3, #8]
 8003f58:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a1b      	ldr	r2, [pc, #108]	; (8003fcc <HAL_SPI_MspInit+0x88>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d12f      	bne.n	8003fc4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003f64:	4b1a      	ldr	r3, [pc, #104]	; (8003fd0 <HAL_SPI_MspInit+0x8c>)
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	4a19      	ldr	r2, [pc, #100]	; (8003fd0 <HAL_SPI_MspInit+0x8c>)
 8003f6a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003f6e:	6193      	str	r3, [r2, #24]
 8003f70:	4b17      	ldr	r3, [pc, #92]	; (8003fd0 <HAL_SPI_MspInit+0x8c>)
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f78:	60fb      	str	r3, [r7, #12]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f7c:	4b14      	ldr	r3, [pc, #80]	; (8003fd0 <HAL_SPI_MspInit+0x8c>)
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	4a13      	ldr	r2, [pc, #76]	; (8003fd0 <HAL_SPI_MspInit+0x8c>)
 8003f82:	f043 0304 	orr.w	r3, r3, #4
 8003f86:	6193      	str	r3, [r2, #24]
 8003f88:	4b11      	ldr	r3, [pc, #68]	; (8003fd0 <HAL_SPI_MspInit+0x8c>)
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	f003 0304 	and.w	r3, r3, #4
 8003f90:	60bb      	str	r3, [r7, #8]
 8003f92:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003f94:	23a0      	movs	r3, #160	; 0xa0
 8003f96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f98:	2302      	movs	r3, #2
 8003f9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fa0:	f107 0310 	add.w	r3, r7, #16
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	480b      	ldr	r0, [pc, #44]	; (8003fd4 <HAL_SPI_MspInit+0x90>)
 8003fa8:	f7fc fa40 	bl	800042c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003fac:	2340      	movs	r3, #64	; 0x40
 8003fae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fb8:	f107 0310 	add.w	r3, r7, #16
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	4805      	ldr	r0, [pc, #20]	; (8003fd4 <HAL_SPI_MspInit+0x90>)
 8003fc0:	f7fc fa34 	bl	800042c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003fc4:	bf00      	nop
 8003fc6:	3720      	adds	r7, #32
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	40013000 	.word	0x40013000
 8003fd0:	40021000 	.word	0x40021000
 8003fd4:	40010800 	.word	0x40010800

08003fd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003fdc:	bf00      	nop
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bc80      	pop	{r7}
 8003fe2:	4770      	bx	lr

08003fe4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003fe8:	e7fe      	b.n	8003fe8 <HardFault_Handler+0x4>

08003fea <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003fea:	b480      	push	{r7}
 8003fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003fee:	e7fe      	b.n	8003fee <MemManage_Handler+0x4>

08003ff0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ff4:	e7fe      	b.n	8003ff4 <BusFault_Handler+0x4>

08003ff6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ff6:	b480      	push	{r7}
 8003ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ffa:	e7fe      	b.n	8003ffa <UsageFault_Handler+0x4>

08003ffc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004000:	bf00      	nop
 8004002:	46bd      	mov	sp, r7
 8004004:	bc80      	pop	{r7}
 8004006:	4770      	bx	lr

08004008 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004008:	b480      	push	{r7}
 800400a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800400c:	bf00      	nop
 800400e:	46bd      	mov	sp, r7
 8004010:	bc80      	pop	{r7}
 8004012:	4770      	bx	lr

08004014 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004014:	b480      	push	{r7}
 8004016:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004018:	bf00      	nop
 800401a:	46bd      	mov	sp, r7
 800401c:	bc80      	pop	{r7}
 800401e:	4770      	bx	lr

08004020 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004024:	f7fc f8e0 	bl	80001e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004028:	bf00      	nop
 800402a:	bd80      	pop	{r7, pc}

0800402c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004034:	4b11      	ldr	r3, [pc, #68]	; (800407c <_sbrk+0x50>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d102      	bne.n	8004042 <_sbrk+0x16>
		heap_end = &end;
 800403c:	4b0f      	ldr	r3, [pc, #60]	; (800407c <_sbrk+0x50>)
 800403e:	4a10      	ldr	r2, [pc, #64]	; (8004080 <_sbrk+0x54>)
 8004040:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004042:	4b0e      	ldr	r3, [pc, #56]	; (800407c <_sbrk+0x50>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004048:	4b0c      	ldr	r3, [pc, #48]	; (800407c <_sbrk+0x50>)
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4413      	add	r3, r2
 8004050:	466a      	mov	r2, sp
 8004052:	4293      	cmp	r3, r2
 8004054:	d907      	bls.n	8004066 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004056:	f000 f873 	bl	8004140 <__errno>
 800405a:	4602      	mov	r2, r0
 800405c:	230c      	movs	r3, #12
 800405e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004060:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004064:	e006      	b.n	8004074 <_sbrk+0x48>
	}

	heap_end += incr;
 8004066:	4b05      	ldr	r3, [pc, #20]	; (800407c <_sbrk+0x50>)
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4413      	add	r3, r2
 800406e:	4a03      	ldr	r2, [pc, #12]	; (800407c <_sbrk+0x50>)
 8004070:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004072:	68fb      	ldr	r3, [r7, #12]
}
 8004074:	4618      	mov	r0, r3
 8004076:	3710      	adds	r7, #16
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	200004b0 	.word	0x200004b0
 8004080:	20000590 	.word	0x20000590

08004084 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004084:	b480      	push	{r7}
 8004086:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004088:	4b15      	ldr	r3, [pc, #84]	; (80040e0 <SystemInit+0x5c>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a14      	ldr	r2, [pc, #80]	; (80040e0 <SystemInit+0x5c>)
 800408e:	f043 0301 	orr.w	r3, r3, #1
 8004092:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8004094:	4b12      	ldr	r3, [pc, #72]	; (80040e0 <SystemInit+0x5c>)
 8004096:	685a      	ldr	r2, [r3, #4]
 8004098:	4911      	ldr	r1, [pc, #68]	; (80040e0 <SystemInit+0x5c>)
 800409a:	4b12      	ldr	r3, [pc, #72]	; (80040e4 <SystemInit+0x60>)
 800409c:	4013      	ands	r3, r2
 800409e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80040a0:	4b0f      	ldr	r3, [pc, #60]	; (80040e0 <SystemInit+0x5c>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a0e      	ldr	r2, [pc, #56]	; (80040e0 <SystemInit+0x5c>)
 80040a6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80040aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040ae:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80040b0:	4b0b      	ldr	r3, [pc, #44]	; (80040e0 <SystemInit+0x5c>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a0a      	ldr	r2, [pc, #40]	; (80040e0 <SystemInit+0x5c>)
 80040b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040ba:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80040bc:	4b08      	ldr	r3, [pc, #32]	; (80040e0 <SystemInit+0x5c>)
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	4a07      	ldr	r2, [pc, #28]	; (80040e0 <SystemInit+0x5c>)
 80040c2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80040c6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80040c8:	4b05      	ldr	r3, [pc, #20]	; (80040e0 <SystemInit+0x5c>)
 80040ca:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80040ce:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80040d0:	4b05      	ldr	r3, [pc, #20]	; (80040e8 <SystemInit+0x64>)
 80040d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80040d6:	609a      	str	r2, [r3, #8]
#endif 
}
 80040d8:	bf00      	nop
 80040da:	46bd      	mov	sp, r7
 80040dc:	bc80      	pop	{r7}
 80040de:	4770      	bx	lr
 80040e0:	40021000 	.word	0x40021000
 80040e4:	f8ff0000 	.word	0xf8ff0000
 80040e8:	e000ed00 	.word	0xe000ed00

080040ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80040ec:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80040ee:	e003      	b.n	80040f8 <LoopCopyDataInit>

080040f0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80040f0:	4b0b      	ldr	r3, [pc, #44]	; (8004120 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80040f2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80040f4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80040f6:	3104      	adds	r1, #4

080040f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80040f8:	480a      	ldr	r0, [pc, #40]	; (8004124 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80040fa:	4b0b      	ldr	r3, [pc, #44]	; (8004128 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80040fc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80040fe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004100:	d3f6      	bcc.n	80040f0 <CopyDataInit>
  ldr r2, =_sbss
 8004102:	4a0a      	ldr	r2, [pc, #40]	; (800412c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004104:	e002      	b.n	800410c <LoopFillZerobss>

08004106 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004106:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004108:	f842 3b04 	str.w	r3, [r2], #4

0800410c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800410c:	4b08      	ldr	r3, [pc, #32]	; (8004130 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800410e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004110:	d3f9      	bcc.n	8004106 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004112:	f7ff ffb7 	bl	8004084 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004116:	f000 f819 	bl	800414c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800411a:	f7ff fa31 	bl	8003580 <main>
  bx lr
 800411e:	4770      	bx	lr
  ldr r3, =_sidata
 8004120:	08005130 	.word	0x08005130
  ldr r0, =_sdata
 8004124:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004128:	20000200 	.word	0x20000200
  ldr r2, =_sbss
 800412c:	20000200 	.word	0x20000200
  ldr r3, = _ebss
 8004130:	2000058c 	.word	0x2000058c

08004134 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004134:	e7fe      	b.n	8004134 <ADC1_2_IRQHandler>

08004136 <atol>:
 8004136:	220a      	movs	r2, #10
 8004138:	2100      	movs	r1, #0
 800413a:	f000 b969 	b.w	8004410 <strtol>
	...

08004140 <__errno>:
 8004140:	4b01      	ldr	r3, [pc, #4]	; (8004148 <__errno+0x8>)
 8004142:	6818      	ldr	r0, [r3, #0]
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	20000030 	.word	0x20000030

0800414c <__libc_init_array>:
 800414c:	b570      	push	{r4, r5, r6, lr}
 800414e:	2500      	movs	r5, #0
 8004150:	4e0c      	ldr	r6, [pc, #48]	; (8004184 <__libc_init_array+0x38>)
 8004152:	4c0d      	ldr	r4, [pc, #52]	; (8004188 <__libc_init_array+0x3c>)
 8004154:	1ba4      	subs	r4, r4, r6
 8004156:	10a4      	asrs	r4, r4, #2
 8004158:	42a5      	cmp	r5, r4
 800415a:	d109      	bne.n	8004170 <__libc_init_array+0x24>
 800415c:	f000 fd6c 	bl	8004c38 <_init>
 8004160:	2500      	movs	r5, #0
 8004162:	4e0a      	ldr	r6, [pc, #40]	; (800418c <__libc_init_array+0x40>)
 8004164:	4c0a      	ldr	r4, [pc, #40]	; (8004190 <__libc_init_array+0x44>)
 8004166:	1ba4      	subs	r4, r4, r6
 8004168:	10a4      	asrs	r4, r4, #2
 800416a:	42a5      	cmp	r5, r4
 800416c:	d105      	bne.n	800417a <__libc_init_array+0x2e>
 800416e:	bd70      	pop	{r4, r5, r6, pc}
 8004170:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004174:	4798      	blx	r3
 8004176:	3501      	adds	r5, #1
 8004178:	e7ee      	b.n	8004158 <__libc_init_array+0xc>
 800417a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800417e:	4798      	blx	r3
 8004180:	3501      	adds	r5, #1
 8004182:	e7f2      	b.n	800416a <__libc_init_array+0x1e>
 8004184:	08005128 	.word	0x08005128
 8004188:	08005128 	.word	0x08005128
 800418c:	08005128 	.word	0x08005128
 8004190:	0800512c 	.word	0x0800512c

08004194 <__locale_ctype_ptr_l>:
 8004194:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8004198:	4770      	bx	lr

0800419a <__ascii_mbtowc>:
 800419a:	b082      	sub	sp, #8
 800419c:	b901      	cbnz	r1, 80041a0 <__ascii_mbtowc+0x6>
 800419e:	a901      	add	r1, sp, #4
 80041a0:	b142      	cbz	r2, 80041b4 <__ascii_mbtowc+0x1a>
 80041a2:	b14b      	cbz	r3, 80041b8 <__ascii_mbtowc+0x1e>
 80041a4:	7813      	ldrb	r3, [r2, #0]
 80041a6:	600b      	str	r3, [r1, #0]
 80041a8:	7812      	ldrb	r2, [r2, #0]
 80041aa:	1c10      	adds	r0, r2, #0
 80041ac:	bf18      	it	ne
 80041ae:	2001      	movne	r0, #1
 80041b0:	b002      	add	sp, #8
 80041b2:	4770      	bx	lr
 80041b4:	4610      	mov	r0, r2
 80041b6:	e7fb      	b.n	80041b0 <__ascii_mbtowc+0x16>
 80041b8:	f06f 0001 	mvn.w	r0, #1
 80041bc:	e7f8      	b.n	80041b0 <__ascii_mbtowc+0x16>

080041be <memcmp>:
 80041be:	b530      	push	{r4, r5, lr}
 80041c0:	2400      	movs	r4, #0
 80041c2:	42a2      	cmp	r2, r4
 80041c4:	d101      	bne.n	80041ca <memcmp+0xc>
 80041c6:	2000      	movs	r0, #0
 80041c8:	e007      	b.n	80041da <memcmp+0x1c>
 80041ca:	5d03      	ldrb	r3, [r0, r4]
 80041cc:	3401      	adds	r4, #1
 80041ce:	190d      	adds	r5, r1, r4
 80041d0:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80041d4:	42ab      	cmp	r3, r5
 80041d6:	d0f4      	beq.n	80041c2 <memcmp+0x4>
 80041d8:	1b58      	subs	r0, r3, r5
 80041da:	bd30      	pop	{r4, r5, pc}

080041dc <memcpy>:
 80041dc:	b510      	push	{r4, lr}
 80041de:	1e43      	subs	r3, r0, #1
 80041e0:	440a      	add	r2, r1
 80041e2:	4291      	cmp	r1, r2
 80041e4:	d100      	bne.n	80041e8 <memcpy+0xc>
 80041e6:	bd10      	pop	{r4, pc}
 80041e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041f0:	e7f7      	b.n	80041e2 <memcpy+0x6>

080041f2 <memset>:
 80041f2:	4603      	mov	r3, r0
 80041f4:	4402      	add	r2, r0
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d100      	bne.n	80041fc <memset+0xa>
 80041fa:	4770      	bx	lr
 80041fc:	f803 1b01 	strb.w	r1, [r3], #1
 8004200:	e7f9      	b.n	80041f6 <memset+0x4>
	...

08004204 <srand>:
 8004204:	b538      	push	{r3, r4, r5, lr}
 8004206:	4b0d      	ldr	r3, [pc, #52]	; (800423c <srand+0x38>)
 8004208:	4605      	mov	r5, r0
 800420a:	681c      	ldr	r4, [r3, #0]
 800420c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800420e:	b97b      	cbnz	r3, 8004230 <srand+0x2c>
 8004210:	2018      	movs	r0, #24
 8004212:	f000 f921 	bl	8004458 <malloc>
 8004216:	4a0a      	ldr	r2, [pc, #40]	; (8004240 <srand+0x3c>)
 8004218:	4b0a      	ldr	r3, [pc, #40]	; (8004244 <srand+0x40>)
 800421a:	63a0      	str	r0, [r4, #56]	; 0x38
 800421c:	e9c0 2300 	strd	r2, r3, [r0]
 8004220:	4b09      	ldr	r3, [pc, #36]	; (8004248 <srand+0x44>)
 8004222:	2201      	movs	r2, #1
 8004224:	6083      	str	r3, [r0, #8]
 8004226:	230b      	movs	r3, #11
 8004228:	8183      	strh	r3, [r0, #12]
 800422a:	2300      	movs	r3, #0
 800422c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8004230:	2200      	movs	r2, #0
 8004232:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004234:	611d      	str	r5, [r3, #16]
 8004236:	615a      	str	r2, [r3, #20]
 8004238:	bd38      	pop	{r3, r4, r5, pc}
 800423a:	bf00      	nop
 800423c:	20000030 	.word	0x20000030
 8004240:	abcd330e 	.word	0xabcd330e
 8004244:	e66d1234 	.word	0xe66d1234
 8004248:	0005deec 	.word	0x0005deec

0800424c <rand>:
 800424c:	b538      	push	{r3, r4, r5, lr}
 800424e:	4b13      	ldr	r3, [pc, #76]	; (800429c <rand+0x50>)
 8004250:	681c      	ldr	r4, [r3, #0]
 8004252:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004254:	b97b      	cbnz	r3, 8004276 <rand+0x2a>
 8004256:	2018      	movs	r0, #24
 8004258:	f000 f8fe 	bl	8004458 <malloc>
 800425c:	4a10      	ldr	r2, [pc, #64]	; (80042a0 <rand+0x54>)
 800425e:	4b11      	ldr	r3, [pc, #68]	; (80042a4 <rand+0x58>)
 8004260:	63a0      	str	r0, [r4, #56]	; 0x38
 8004262:	e9c0 2300 	strd	r2, r3, [r0]
 8004266:	4b10      	ldr	r3, [pc, #64]	; (80042a8 <rand+0x5c>)
 8004268:	2201      	movs	r2, #1
 800426a:	6083      	str	r3, [r0, #8]
 800426c:	230b      	movs	r3, #11
 800426e:	8183      	strh	r3, [r0, #12]
 8004270:	2300      	movs	r3, #0
 8004272:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8004276:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004278:	480c      	ldr	r0, [pc, #48]	; (80042ac <rand+0x60>)
 800427a:	690a      	ldr	r2, [r1, #16]
 800427c:	694b      	ldr	r3, [r1, #20]
 800427e:	4350      	muls	r0, r2
 8004280:	4c0b      	ldr	r4, [pc, #44]	; (80042b0 <rand+0x64>)
 8004282:	fb04 0003 	mla	r0, r4, r3, r0
 8004286:	fba2 2304 	umull	r2, r3, r2, r4
 800428a:	4403      	add	r3, r0
 800428c:	1c54      	adds	r4, r2, #1
 800428e:	f143 0500 	adc.w	r5, r3, #0
 8004292:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8004296:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800429a:	bd38      	pop	{r3, r4, r5, pc}
 800429c:	20000030 	.word	0x20000030
 80042a0:	abcd330e 	.word	0xabcd330e
 80042a4:	e66d1234 	.word	0xe66d1234
 80042a8:	0005deec 	.word	0x0005deec
 80042ac:	5851f42d 	.word	0x5851f42d
 80042b0:	4c957f2d 	.word	0x4c957f2d

080042b4 <siprintf>:
 80042b4:	b40e      	push	{r1, r2, r3}
 80042b6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80042ba:	b500      	push	{lr}
 80042bc:	b09c      	sub	sp, #112	; 0x70
 80042be:	ab1d      	add	r3, sp, #116	; 0x74
 80042c0:	9002      	str	r0, [sp, #8]
 80042c2:	9006      	str	r0, [sp, #24]
 80042c4:	9107      	str	r1, [sp, #28]
 80042c6:	9104      	str	r1, [sp, #16]
 80042c8:	4808      	ldr	r0, [pc, #32]	; (80042ec <siprintf+0x38>)
 80042ca:	4909      	ldr	r1, [pc, #36]	; (80042f0 <siprintf+0x3c>)
 80042cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80042d0:	9105      	str	r1, [sp, #20]
 80042d2:	6800      	ldr	r0, [r0, #0]
 80042d4:	a902      	add	r1, sp, #8
 80042d6:	9301      	str	r3, [sp, #4]
 80042d8:	f000 f9c6 	bl	8004668 <_svfiprintf_r>
 80042dc:	2200      	movs	r2, #0
 80042de:	9b02      	ldr	r3, [sp, #8]
 80042e0:	701a      	strb	r2, [r3, #0]
 80042e2:	b01c      	add	sp, #112	; 0x70
 80042e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80042e8:	b003      	add	sp, #12
 80042ea:	4770      	bx	lr
 80042ec:	20000030 	.word	0x20000030
 80042f0:	ffff0208 	.word	0xffff0208

080042f4 <strncmp>:
 80042f4:	b510      	push	{r4, lr}
 80042f6:	b16a      	cbz	r2, 8004314 <strncmp+0x20>
 80042f8:	3901      	subs	r1, #1
 80042fa:	1884      	adds	r4, r0, r2
 80042fc:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004300:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8004304:	4293      	cmp	r3, r2
 8004306:	d103      	bne.n	8004310 <strncmp+0x1c>
 8004308:	42a0      	cmp	r0, r4
 800430a:	d001      	beq.n	8004310 <strncmp+0x1c>
 800430c:	2b00      	cmp	r3, #0
 800430e:	d1f5      	bne.n	80042fc <strncmp+0x8>
 8004310:	1a98      	subs	r0, r3, r2
 8004312:	bd10      	pop	{r4, pc}
 8004314:	4610      	mov	r0, r2
 8004316:	e7fc      	b.n	8004312 <strncmp+0x1e>

08004318 <_strtol_l.isra.0>:
 8004318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800431c:	4680      	mov	r8, r0
 800431e:	4689      	mov	r9, r1
 8004320:	4692      	mov	sl, r2
 8004322:	461e      	mov	r6, r3
 8004324:	460f      	mov	r7, r1
 8004326:	463d      	mov	r5, r7
 8004328:	9808      	ldr	r0, [sp, #32]
 800432a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800432e:	f7ff ff31 	bl	8004194 <__locale_ctype_ptr_l>
 8004332:	4420      	add	r0, r4
 8004334:	7843      	ldrb	r3, [r0, #1]
 8004336:	f013 0308 	ands.w	r3, r3, #8
 800433a:	d132      	bne.n	80043a2 <_strtol_l.isra.0+0x8a>
 800433c:	2c2d      	cmp	r4, #45	; 0x2d
 800433e:	d132      	bne.n	80043a6 <_strtol_l.isra.0+0x8e>
 8004340:	2201      	movs	r2, #1
 8004342:	787c      	ldrb	r4, [r7, #1]
 8004344:	1cbd      	adds	r5, r7, #2
 8004346:	2e00      	cmp	r6, #0
 8004348:	d05d      	beq.n	8004406 <_strtol_l.isra.0+0xee>
 800434a:	2e10      	cmp	r6, #16
 800434c:	d109      	bne.n	8004362 <_strtol_l.isra.0+0x4a>
 800434e:	2c30      	cmp	r4, #48	; 0x30
 8004350:	d107      	bne.n	8004362 <_strtol_l.isra.0+0x4a>
 8004352:	782b      	ldrb	r3, [r5, #0]
 8004354:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004358:	2b58      	cmp	r3, #88	; 0x58
 800435a:	d14f      	bne.n	80043fc <_strtol_l.isra.0+0xe4>
 800435c:	2610      	movs	r6, #16
 800435e:	786c      	ldrb	r4, [r5, #1]
 8004360:	3502      	adds	r5, #2
 8004362:	2a00      	cmp	r2, #0
 8004364:	bf14      	ite	ne
 8004366:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800436a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800436e:	2700      	movs	r7, #0
 8004370:	fbb1 fcf6 	udiv	ip, r1, r6
 8004374:	4638      	mov	r0, r7
 8004376:	fb06 1e1c 	mls	lr, r6, ip, r1
 800437a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800437e:	2b09      	cmp	r3, #9
 8004380:	d817      	bhi.n	80043b2 <_strtol_l.isra.0+0x9a>
 8004382:	461c      	mov	r4, r3
 8004384:	42a6      	cmp	r6, r4
 8004386:	dd23      	ble.n	80043d0 <_strtol_l.isra.0+0xb8>
 8004388:	1c7b      	adds	r3, r7, #1
 800438a:	d007      	beq.n	800439c <_strtol_l.isra.0+0x84>
 800438c:	4584      	cmp	ip, r0
 800438e:	d31c      	bcc.n	80043ca <_strtol_l.isra.0+0xb2>
 8004390:	d101      	bne.n	8004396 <_strtol_l.isra.0+0x7e>
 8004392:	45a6      	cmp	lr, r4
 8004394:	db19      	blt.n	80043ca <_strtol_l.isra.0+0xb2>
 8004396:	2701      	movs	r7, #1
 8004398:	fb00 4006 	mla	r0, r0, r6, r4
 800439c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80043a0:	e7eb      	b.n	800437a <_strtol_l.isra.0+0x62>
 80043a2:	462f      	mov	r7, r5
 80043a4:	e7bf      	b.n	8004326 <_strtol_l.isra.0+0xe>
 80043a6:	2c2b      	cmp	r4, #43	; 0x2b
 80043a8:	bf04      	itt	eq
 80043aa:	1cbd      	addeq	r5, r7, #2
 80043ac:	787c      	ldrbeq	r4, [r7, #1]
 80043ae:	461a      	mov	r2, r3
 80043b0:	e7c9      	b.n	8004346 <_strtol_l.isra.0+0x2e>
 80043b2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80043b6:	2b19      	cmp	r3, #25
 80043b8:	d801      	bhi.n	80043be <_strtol_l.isra.0+0xa6>
 80043ba:	3c37      	subs	r4, #55	; 0x37
 80043bc:	e7e2      	b.n	8004384 <_strtol_l.isra.0+0x6c>
 80043be:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80043c2:	2b19      	cmp	r3, #25
 80043c4:	d804      	bhi.n	80043d0 <_strtol_l.isra.0+0xb8>
 80043c6:	3c57      	subs	r4, #87	; 0x57
 80043c8:	e7dc      	b.n	8004384 <_strtol_l.isra.0+0x6c>
 80043ca:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80043ce:	e7e5      	b.n	800439c <_strtol_l.isra.0+0x84>
 80043d0:	1c7b      	adds	r3, r7, #1
 80043d2:	d108      	bne.n	80043e6 <_strtol_l.isra.0+0xce>
 80043d4:	2322      	movs	r3, #34	; 0x22
 80043d6:	4608      	mov	r0, r1
 80043d8:	f8c8 3000 	str.w	r3, [r8]
 80043dc:	f1ba 0f00 	cmp.w	sl, #0
 80043e0:	d107      	bne.n	80043f2 <_strtol_l.isra.0+0xda>
 80043e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043e6:	b102      	cbz	r2, 80043ea <_strtol_l.isra.0+0xd2>
 80043e8:	4240      	negs	r0, r0
 80043ea:	f1ba 0f00 	cmp.w	sl, #0
 80043ee:	d0f8      	beq.n	80043e2 <_strtol_l.isra.0+0xca>
 80043f0:	b10f      	cbz	r7, 80043f6 <_strtol_l.isra.0+0xde>
 80043f2:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 80043f6:	f8ca 9000 	str.w	r9, [sl]
 80043fa:	e7f2      	b.n	80043e2 <_strtol_l.isra.0+0xca>
 80043fc:	2430      	movs	r4, #48	; 0x30
 80043fe:	2e00      	cmp	r6, #0
 8004400:	d1af      	bne.n	8004362 <_strtol_l.isra.0+0x4a>
 8004402:	2608      	movs	r6, #8
 8004404:	e7ad      	b.n	8004362 <_strtol_l.isra.0+0x4a>
 8004406:	2c30      	cmp	r4, #48	; 0x30
 8004408:	d0a3      	beq.n	8004352 <_strtol_l.isra.0+0x3a>
 800440a:	260a      	movs	r6, #10
 800440c:	e7a9      	b.n	8004362 <_strtol_l.isra.0+0x4a>
	...

08004410 <strtol>:
 8004410:	4b08      	ldr	r3, [pc, #32]	; (8004434 <strtol+0x24>)
 8004412:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004414:	681c      	ldr	r4, [r3, #0]
 8004416:	4d08      	ldr	r5, [pc, #32]	; (8004438 <strtol+0x28>)
 8004418:	6a23      	ldr	r3, [r4, #32]
 800441a:	2b00      	cmp	r3, #0
 800441c:	bf08      	it	eq
 800441e:	462b      	moveq	r3, r5
 8004420:	9300      	str	r3, [sp, #0]
 8004422:	4613      	mov	r3, r2
 8004424:	460a      	mov	r2, r1
 8004426:	4601      	mov	r1, r0
 8004428:	4620      	mov	r0, r4
 800442a:	f7ff ff75 	bl	8004318 <_strtol_l.isra.0>
 800442e:	b003      	add	sp, #12
 8004430:	bd30      	pop	{r4, r5, pc}
 8004432:	bf00      	nop
 8004434:	20000030 	.word	0x20000030
 8004438:	20000094 	.word	0x20000094

0800443c <__ascii_wctomb>:
 800443c:	b149      	cbz	r1, 8004452 <__ascii_wctomb+0x16>
 800443e:	2aff      	cmp	r2, #255	; 0xff
 8004440:	bf8b      	itete	hi
 8004442:	238a      	movhi	r3, #138	; 0x8a
 8004444:	700a      	strbls	r2, [r1, #0]
 8004446:	6003      	strhi	r3, [r0, #0]
 8004448:	2001      	movls	r0, #1
 800444a:	bf88      	it	hi
 800444c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8004450:	4770      	bx	lr
 8004452:	4608      	mov	r0, r1
 8004454:	4770      	bx	lr
	...

08004458 <malloc>:
 8004458:	4b02      	ldr	r3, [pc, #8]	; (8004464 <malloc+0xc>)
 800445a:	4601      	mov	r1, r0
 800445c:	6818      	ldr	r0, [r3, #0]
 800445e:	f000 b84f 	b.w	8004500 <_malloc_r>
 8004462:	bf00      	nop
 8004464:	20000030 	.word	0x20000030

08004468 <_free_r>:
 8004468:	b538      	push	{r3, r4, r5, lr}
 800446a:	4605      	mov	r5, r0
 800446c:	2900      	cmp	r1, #0
 800446e:	d043      	beq.n	80044f8 <_free_r+0x90>
 8004470:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004474:	1f0c      	subs	r4, r1, #4
 8004476:	2b00      	cmp	r3, #0
 8004478:	bfb8      	it	lt
 800447a:	18e4      	addlt	r4, r4, r3
 800447c:	f000 fbab 	bl	8004bd6 <__malloc_lock>
 8004480:	4a1e      	ldr	r2, [pc, #120]	; (80044fc <_free_r+0x94>)
 8004482:	6813      	ldr	r3, [r2, #0]
 8004484:	4610      	mov	r0, r2
 8004486:	b933      	cbnz	r3, 8004496 <_free_r+0x2e>
 8004488:	6063      	str	r3, [r4, #4]
 800448a:	6014      	str	r4, [r2, #0]
 800448c:	4628      	mov	r0, r5
 800448e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004492:	f000 bba1 	b.w	8004bd8 <__malloc_unlock>
 8004496:	42a3      	cmp	r3, r4
 8004498:	d90b      	bls.n	80044b2 <_free_r+0x4a>
 800449a:	6821      	ldr	r1, [r4, #0]
 800449c:	1862      	adds	r2, r4, r1
 800449e:	4293      	cmp	r3, r2
 80044a0:	bf01      	itttt	eq
 80044a2:	681a      	ldreq	r2, [r3, #0]
 80044a4:	685b      	ldreq	r3, [r3, #4]
 80044a6:	1852      	addeq	r2, r2, r1
 80044a8:	6022      	streq	r2, [r4, #0]
 80044aa:	6063      	str	r3, [r4, #4]
 80044ac:	6004      	str	r4, [r0, #0]
 80044ae:	e7ed      	b.n	800448c <_free_r+0x24>
 80044b0:	4613      	mov	r3, r2
 80044b2:	685a      	ldr	r2, [r3, #4]
 80044b4:	b10a      	cbz	r2, 80044ba <_free_r+0x52>
 80044b6:	42a2      	cmp	r2, r4
 80044b8:	d9fa      	bls.n	80044b0 <_free_r+0x48>
 80044ba:	6819      	ldr	r1, [r3, #0]
 80044bc:	1858      	adds	r0, r3, r1
 80044be:	42a0      	cmp	r0, r4
 80044c0:	d10b      	bne.n	80044da <_free_r+0x72>
 80044c2:	6820      	ldr	r0, [r4, #0]
 80044c4:	4401      	add	r1, r0
 80044c6:	1858      	adds	r0, r3, r1
 80044c8:	4282      	cmp	r2, r0
 80044ca:	6019      	str	r1, [r3, #0]
 80044cc:	d1de      	bne.n	800448c <_free_r+0x24>
 80044ce:	6810      	ldr	r0, [r2, #0]
 80044d0:	6852      	ldr	r2, [r2, #4]
 80044d2:	4401      	add	r1, r0
 80044d4:	6019      	str	r1, [r3, #0]
 80044d6:	605a      	str	r2, [r3, #4]
 80044d8:	e7d8      	b.n	800448c <_free_r+0x24>
 80044da:	d902      	bls.n	80044e2 <_free_r+0x7a>
 80044dc:	230c      	movs	r3, #12
 80044de:	602b      	str	r3, [r5, #0]
 80044e0:	e7d4      	b.n	800448c <_free_r+0x24>
 80044e2:	6820      	ldr	r0, [r4, #0]
 80044e4:	1821      	adds	r1, r4, r0
 80044e6:	428a      	cmp	r2, r1
 80044e8:	bf01      	itttt	eq
 80044ea:	6811      	ldreq	r1, [r2, #0]
 80044ec:	6852      	ldreq	r2, [r2, #4]
 80044ee:	1809      	addeq	r1, r1, r0
 80044f0:	6021      	streq	r1, [r4, #0]
 80044f2:	6062      	str	r2, [r4, #4]
 80044f4:	605c      	str	r4, [r3, #4]
 80044f6:	e7c9      	b.n	800448c <_free_r+0x24>
 80044f8:	bd38      	pop	{r3, r4, r5, pc}
 80044fa:	bf00      	nop
 80044fc:	200004b4 	.word	0x200004b4

08004500 <_malloc_r>:
 8004500:	b570      	push	{r4, r5, r6, lr}
 8004502:	1ccd      	adds	r5, r1, #3
 8004504:	f025 0503 	bic.w	r5, r5, #3
 8004508:	3508      	adds	r5, #8
 800450a:	2d0c      	cmp	r5, #12
 800450c:	bf38      	it	cc
 800450e:	250c      	movcc	r5, #12
 8004510:	2d00      	cmp	r5, #0
 8004512:	4606      	mov	r6, r0
 8004514:	db01      	blt.n	800451a <_malloc_r+0x1a>
 8004516:	42a9      	cmp	r1, r5
 8004518:	d903      	bls.n	8004522 <_malloc_r+0x22>
 800451a:	230c      	movs	r3, #12
 800451c:	6033      	str	r3, [r6, #0]
 800451e:	2000      	movs	r0, #0
 8004520:	bd70      	pop	{r4, r5, r6, pc}
 8004522:	f000 fb58 	bl	8004bd6 <__malloc_lock>
 8004526:	4a21      	ldr	r2, [pc, #132]	; (80045ac <_malloc_r+0xac>)
 8004528:	6814      	ldr	r4, [r2, #0]
 800452a:	4621      	mov	r1, r4
 800452c:	b991      	cbnz	r1, 8004554 <_malloc_r+0x54>
 800452e:	4c20      	ldr	r4, [pc, #128]	; (80045b0 <_malloc_r+0xb0>)
 8004530:	6823      	ldr	r3, [r4, #0]
 8004532:	b91b      	cbnz	r3, 800453c <_malloc_r+0x3c>
 8004534:	4630      	mov	r0, r6
 8004536:	f000 fb17 	bl	8004b68 <_sbrk_r>
 800453a:	6020      	str	r0, [r4, #0]
 800453c:	4629      	mov	r1, r5
 800453e:	4630      	mov	r0, r6
 8004540:	f000 fb12 	bl	8004b68 <_sbrk_r>
 8004544:	1c43      	adds	r3, r0, #1
 8004546:	d124      	bne.n	8004592 <_malloc_r+0x92>
 8004548:	230c      	movs	r3, #12
 800454a:	4630      	mov	r0, r6
 800454c:	6033      	str	r3, [r6, #0]
 800454e:	f000 fb43 	bl	8004bd8 <__malloc_unlock>
 8004552:	e7e4      	b.n	800451e <_malloc_r+0x1e>
 8004554:	680b      	ldr	r3, [r1, #0]
 8004556:	1b5b      	subs	r3, r3, r5
 8004558:	d418      	bmi.n	800458c <_malloc_r+0x8c>
 800455a:	2b0b      	cmp	r3, #11
 800455c:	d90f      	bls.n	800457e <_malloc_r+0x7e>
 800455e:	600b      	str	r3, [r1, #0]
 8004560:	18cc      	adds	r4, r1, r3
 8004562:	50cd      	str	r5, [r1, r3]
 8004564:	4630      	mov	r0, r6
 8004566:	f000 fb37 	bl	8004bd8 <__malloc_unlock>
 800456a:	f104 000b 	add.w	r0, r4, #11
 800456e:	1d23      	adds	r3, r4, #4
 8004570:	f020 0007 	bic.w	r0, r0, #7
 8004574:	1ac3      	subs	r3, r0, r3
 8004576:	d0d3      	beq.n	8004520 <_malloc_r+0x20>
 8004578:	425a      	negs	r2, r3
 800457a:	50e2      	str	r2, [r4, r3]
 800457c:	e7d0      	b.n	8004520 <_malloc_r+0x20>
 800457e:	684b      	ldr	r3, [r1, #4]
 8004580:	428c      	cmp	r4, r1
 8004582:	bf16      	itet	ne
 8004584:	6063      	strne	r3, [r4, #4]
 8004586:	6013      	streq	r3, [r2, #0]
 8004588:	460c      	movne	r4, r1
 800458a:	e7eb      	b.n	8004564 <_malloc_r+0x64>
 800458c:	460c      	mov	r4, r1
 800458e:	6849      	ldr	r1, [r1, #4]
 8004590:	e7cc      	b.n	800452c <_malloc_r+0x2c>
 8004592:	1cc4      	adds	r4, r0, #3
 8004594:	f024 0403 	bic.w	r4, r4, #3
 8004598:	42a0      	cmp	r0, r4
 800459a:	d005      	beq.n	80045a8 <_malloc_r+0xa8>
 800459c:	1a21      	subs	r1, r4, r0
 800459e:	4630      	mov	r0, r6
 80045a0:	f000 fae2 	bl	8004b68 <_sbrk_r>
 80045a4:	3001      	adds	r0, #1
 80045a6:	d0cf      	beq.n	8004548 <_malloc_r+0x48>
 80045a8:	6025      	str	r5, [r4, #0]
 80045aa:	e7db      	b.n	8004564 <_malloc_r+0x64>
 80045ac:	200004b4 	.word	0x200004b4
 80045b0:	200004b8 	.word	0x200004b8

080045b4 <__ssputs_r>:
 80045b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045b8:	688e      	ldr	r6, [r1, #8]
 80045ba:	4682      	mov	sl, r0
 80045bc:	429e      	cmp	r6, r3
 80045be:	460c      	mov	r4, r1
 80045c0:	4690      	mov	r8, r2
 80045c2:	4699      	mov	r9, r3
 80045c4:	d837      	bhi.n	8004636 <__ssputs_r+0x82>
 80045c6:	898a      	ldrh	r2, [r1, #12]
 80045c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80045cc:	d031      	beq.n	8004632 <__ssputs_r+0x7e>
 80045ce:	2302      	movs	r3, #2
 80045d0:	6825      	ldr	r5, [r4, #0]
 80045d2:	6909      	ldr	r1, [r1, #16]
 80045d4:	1a6f      	subs	r7, r5, r1
 80045d6:	6965      	ldr	r5, [r4, #20]
 80045d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80045dc:	fb95 f5f3 	sdiv	r5, r5, r3
 80045e0:	f109 0301 	add.w	r3, r9, #1
 80045e4:	443b      	add	r3, r7
 80045e6:	429d      	cmp	r5, r3
 80045e8:	bf38      	it	cc
 80045ea:	461d      	movcc	r5, r3
 80045ec:	0553      	lsls	r3, r2, #21
 80045ee:	d530      	bpl.n	8004652 <__ssputs_r+0x9e>
 80045f0:	4629      	mov	r1, r5
 80045f2:	f7ff ff85 	bl	8004500 <_malloc_r>
 80045f6:	4606      	mov	r6, r0
 80045f8:	b950      	cbnz	r0, 8004610 <__ssputs_r+0x5c>
 80045fa:	230c      	movs	r3, #12
 80045fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004600:	f8ca 3000 	str.w	r3, [sl]
 8004604:	89a3      	ldrh	r3, [r4, #12]
 8004606:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800460a:	81a3      	strh	r3, [r4, #12]
 800460c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004610:	463a      	mov	r2, r7
 8004612:	6921      	ldr	r1, [r4, #16]
 8004614:	f7ff fde2 	bl	80041dc <memcpy>
 8004618:	89a3      	ldrh	r3, [r4, #12]
 800461a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800461e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004622:	81a3      	strh	r3, [r4, #12]
 8004624:	6126      	str	r6, [r4, #16]
 8004626:	443e      	add	r6, r7
 8004628:	6026      	str	r6, [r4, #0]
 800462a:	464e      	mov	r6, r9
 800462c:	6165      	str	r5, [r4, #20]
 800462e:	1bed      	subs	r5, r5, r7
 8004630:	60a5      	str	r5, [r4, #8]
 8004632:	454e      	cmp	r6, r9
 8004634:	d900      	bls.n	8004638 <__ssputs_r+0x84>
 8004636:	464e      	mov	r6, r9
 8004638:	4632      	mov	r2, r6
 800463a:	4641      	mov	r1, r8
 800463c:	6820      	ldr	r0, [r4, #0]
 800463e:	f000 fab1 	bl	8004ba4 <memmove>
 8004642:	68a3      	ldr	r3, [r4, #8]
 8004644:	2000      	movs	r0, #0
 8004646:	1b9b      	subs	r3, r3, r6
 8004648:	60a3      	str	r3, [r4, #8]
 800464a:	6823      	ldr	r3, [r4, #0]
 800464c:	441e      	add	r6, r3
 800464e:	6026      	str	r6, [r4, #0]
 8004650:	e7dc      	b.n	800460c <__ssputs_r+0x58>
 8004652:	462a      	mov	r2, r5
 8004654:	f000 fac1 	bl	8004bda <_realloc_r>
 8004658:	4606      	mov	r6, r0
 800465a:	2800      	cmp	r0, #0
 800465c:	d1e2      	bne.n	8004624 <__ssputs_r+0x70>
 800465e:	6921      	ldr	r1, [r4, #16]
 8004660:	4650      	mov	r0, sl
 8004662:	f7ff ff01 	bl	8004468 <_free_r>
 8004666:	e7c8      	b.n	80045fa <__ssputs_r+0x46>

08004668 <_svfiprintf_r>:
 8004668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800466c:	461d      	mov	r5, r3
 800466e:	898b      	ldrh	r3, [r1, #12]
 8004670:	b09d      	sub	sp, #116	; 0x74
 8004672:	061f      	lsls	r7, r3, #24
 8004674:	4680      	mov	r8, r0
 8004676:	460c      	mov	r4, r1
 8004678:	4616      	mov	r6, r2
 800467a:	d50f      	bpl.n	800469c <_svfiprintf_r+0x34>
 800467c:	690b      	ldr	r3, [r1, #16]
 800467e:	b96b      	cbnz	r3, 800469c <_svfiprintf_r+0x34>
 8004680:	2140      	movs	r1, #64	; 0x40
 8004682:	f7ff ff3d 	bl	8004500 <_malloc_r>
 8004686:	6020      	str	r0, [r4, #0]
 8004688:	6120      	str	r0, [r4, #16]
 800468a:	b928      	cbnz	r0, 8004698 <_svfiprintf_r+0x30>
 800468c:	230c      	movs	r3, #12
 800468e:	f8c8 3000 	str.w	r3, [r8]
 8004692:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004696:	e0c8      	b.n	800482a <_svfiprintf_r+0x1c2>
 8004698:	2340      	movs	r3, #64	; 0x40
 800469a:	6163      	str	r3, [r4, #20]
 800469c:	2300      	movs	r3, #0
 800469e:	9309      	str	r3, [sp, #36]	; 0x24
 80046a0:	2320      	movs	r3, #32
 80046a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80046a6:	2330      	movs	r3, #48	; 0x30
 80046a8:	f04f 0b01 	mov.w	fp, #1
 80046ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80046b0:	9503      	str	r5, [sp, #12]
 80046b2:	4637      	mov	r7, r6
 80046b4:	463d      	mov	r5, r7
 80046b6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80046ba:	b10b      	cbz	r3, 80046c0 <_svfiprintf_r+0x58>
 80046bc:	2b25      	cmp	r3, #37	; 0x25
 80046be:	d13e      	bne.n	800473e <_svfiprintf_r+0xd6>
 80046c0:	ebb7 0a06 	subs.w	sl, r7, r6
 80046c4:	d00b      	beq.n	80046de <_svfiprintf_r+0x76>
 80046c6:	4653      	mov	r3, sl
 80046c8:	4632      	mov	r2, r6
 80046ca:	4621      	mov	r1, r4
 80046cc:	4640      	mov	r0, r8
 80046ce:	f7ff ff71 	bl	80045b4 <__ssputs_r>
 80046d2:	3001      	adds	r0, #1
 80046d4:	f000 80a4 	beq.w	8004820 <_svfiprintf_r+0x1b8>
 80046d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046da:	4453      	add	r3, sl
 80046dc:	9309      	str	r3, [sp, #36]	; 0x24
 80046de:	783b      	ldrb	r3, [r7, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f000 809d 	beq.w	8004820 <_svfiprintf_r+0x1b8>
 80046e6:	2300      	movs	r3, #0
 80046e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80046ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80046f0:	9304      	str	r3, [sp, #16]
 80046f2:	9307      	str	r3, [sp, #28]
 80046f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80046f8:	931a      	str	r3, [sp, #104]	; 0x68
 80046fa:	462f      	mov	r7, r5
 80046fc:	2205      	movs	r2, #5
 80046fe:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004702:	4850      	ldr	r0, [pc, #320]	; (8004844 <_svfiprintf_r+0x1dc>)
 8004704:	f000 fa40 	bl	8004b88 <memchr>
 8004708:	9b04      	ldr	r3, [sp, #16]
 800470a:	b9d0      	cbnz	r0, 8004742 <_svfiprintf_r+0xda>
 800470c:	06d9      	lsls	r1, r3, #27
 800470e:	bf44      	itt	mi
 8004710:	2220      	movmi	r2, #32
 8004712:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004716:	071a      	lsls	r2, r3, #28
 8004718:	bf44      	itt	mi
 800471a:	222b      	movmi	r2, #43	; 0x2b
 800471c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004720:	782a      	ldrb	r2, [r5, #0]
 8004722:	2a2a      	cmp	r2, #42	; 0x2a
 8004724:	d015      	beq.n	8004752 <_svfiprintf_r+0xea>
 8004726:	462f      	mov	r7, r5
 8004728:	2000      	movs	r0, #0
 800472a:	250a      	movs	r5, #10
 800472c:	9a07      	ldr	r2, [sp, #28]
 800472e:	4639      	mov	r1, r7
 8004730:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004734:	3b30      	subs	r3, #48	; 0x30
 8004736:	2b09      	cmp	r3, #9
 8004738:	d94d      	bls.n	80047d6 <_svfiprintf_r+0x16e>
 800473a:	b1b8      	cbz	r0, 800476c <_svfiprintf_r+0x104>
 800473c:	e00f      	b.n	800475e <_svfiprintf_r+0xf6>
 800473e:	462f      	mov	r7, r5
 8004740:	e7b8      	b.n	80046b4 <_svfiprintf_r+0x4c>
 8004742:	4a40      	ldr	r2, [pc, #256]	; (8004844 <_svfiprintf_r+0x1dc>)
 8004744:	463d      	mov	r5, r7
 8004746:	1a80      	subs	r0, r0, r2
 8004748:	fa0b f000 	lsl.w	r0, fp, r0
 800474c:	4318      	orrs	r0, r3
 800474e:	9004      	str	r0, [sp, #16]
 8004750:	e7d3      	b.n	80046fa <_svfiprintf_r+0x92>
 8004752:	9a03      	ldr	r2, [sp, #12]
 8004754:	1d11      	adds	r1, r2, #4
 8004756:	6812      	ldr	r2, [r2, #0]
 8004758:	9103      	str	r1, [sp, #12]
 800475a:	2a00      	cmp	r2, #0
 800475c:	db01      	blt.n	8004762 <_svfiprintf_r+0xfa>
 800475e:	9207      	str	r2, [sp, #28]
 8004760:	e004      	b.n	800476c <_svfiprintf_r+0x104>
 8004762:	4252      	negs	r2, r2
 8004764:	f043 0302 	orr.w	r3, r3, #2
 8004768:	9207      	str	r2, [sp, #28]
 800476a:	9304      	str	r3, [sp, #16]
 800476c:	783b      	ldrb	r3, [r7, #0]
 800476e:	2b2e      	cmp	r3, #46	; 0x2e
 8004770:	d10c      	bne.n	800478c <_svfiprintf_r+0x124>
 8004772:	787b      	ldrb	r3, [r7, #1]
 8004774:	2b2a      	cmp	r3, #42	; 0x2a
 8004776:	d133      	bne.n	80047e0 <_svfiprintf_r+0x178>
 8004778:	9b03      	ldr	r3, [sp, #12]
 800477a:	3702      	adds	r7, #2
 800477c:	1d1a      	adds	r2, r3, #4
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	9203      	str	r2, [sp, #12]
 8004782:	2b00      	cmp	r3, #0
 8004784:	bfb8      	it	lt
 8004786:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800478a:	9305      	str	r3, [sp, #20]
 800478c:	4d2e      	ldr	r5, [pc, #184]	; (8004848 <_svfiprintf_r+0x1e0>)
 800478e:	2203      	movs	r2, #3
 8004790:	7839      	ldrb	r1, [r7, #0]
 8004792:	4628      	mov	r0, r5
 8004794:	f000 f9f8 	bl	8004b88 <memchr>
 8004798:	b138      	cbz	r0, 80047aa <_svfiprintf_r+0x142>
 800479a:	2340      	movs	r3, #64	; 0x40
 800479c:	1b40      	subs	r0, r0, r5
 800479e:	fa03 f000 	lsl.w	r0, r3, r0
 80047a2:	9b04      	ldr	r3, [sp, #16]
 80047a4:	3701      	adds	r7, #1
 80047a6:	4303      	orrs	r3, r0
 80047a8:	9304      	str	r3, [sp, #16]
 80047aa:	7839      	ldrb	r1, [r7, #0]
 80047ac:	2206      	movs	r2, #6
 80047ae:	4827      	ldr	r0, [pc, #156]	; (800484c <_svfiprintf_r+0x1e4>)
 80047b0:	1c7e      	adds	r6, r7, #1
 80047b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80047b6:	f000 f9e7 	bl	8004b88 <memchr>
 80047ba:	2800      	cmp	r0, #0
 80047bc:	d038      	beq.n	8004830 <_svfiprintf_r+0x1c8>
 80047be:	4b24      	ldr	r3, [pc, #144]	; (8004850 <_svfiprintf_r+0x1e8>)
 80047c0:	bb13      	cbnz	r3, 8004808 <_svfiprintf_r+0x1a0>
 80047c2:	9b03      	ldr	r3, [sp, #12]
 80047c4:	3307      	adds	r3, #7
 80047c6:	f023 0307 	bic.w	r3, r3, #7
 80047ca:	3308      	adds	r3, #8
 80047cc:	9303      	str	r3, [sp, #12]
 80047ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047d0:	444b      	add	r3, r9
 80047d2:	9309      	str	r3, [sp, #36]	; 0x24
 80047d4:	e76d      	b.n	80046b2 <_svfiprintf_r+0x4a>
 80047d6:	fb05 3202 	mla	r2, r5, r2, r3
 80047da:	2001      	movs	r0, #1
 80047dc:	460f      	mov	r7, r1
 80047de:	e7a6      	b.n	800472e <_svfiprintf_r+0xc6>
 80047e0:	2300      	movs	r3, #0
 80047e2:	250a      	movs	r5, #10
 80047e4:	4619      	mov	r1, r3
 80047e6:	3701      	adds	r7, #1
 80047e8:	9305      	str	r3, [sp, #20]
 80047ea:	4638      	mov	r0, r7
 80047ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80047f0:	3a30      	subs	r2, #48	; 0x30
 80047f2:	2a09      	cmp	r2, #9
 80047f4:	d903      	bls.n	80047fe <_svfiprintf_r+0x196>
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d0c8      	beq.n	800478c <_svfiprintf_r+0x124>
 80047fa:	9105      	str	r1, [sp, #20]
 80047fc:	e7c6      	b.n	800478c <_svfiprintf_r+0x124>
 80047fe:	fb05 2101 	mla	r1, r5, r1, r2
 8004802:	2301      	movs	r3, #1
 8004804:	4607      	mov	r7, r0
 8004806:	e7f0      	b.n	80047ea <_svfiprintf_r+0x182>
 8004808:	ab03      	add	r3, sp, #12
 800480a:	9300      	str	r3, [sp, #0]
 800480c:	4622      	mov	r2, r4
 800480e:	4b11      	ldr	r3, [pc, #68]	; (8004854 <_svfiprintf_r+0x1ec>)
 8004810:	a904      	add	r1, sp, #16
 8004812:	4640      	mov	r0, r8
 8004814:	f3af 8000 	nop.w
 8004818:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800481c:	4681      	mov	r9, r0
 800481e:	d1d6      	bne.n	80047ce <_svfiprintf_r+0x166>
 8004820:	89a3      	ldrh	r3, [r4, #12]
 8004822:	065b      	lsls	r3, r3, #25
 8004824:	f53f af35 	bmi.w	8004692 <_svfiprintf_r+0x2a>
 8004828:	9809      	ldr	r0, [sp, #36]	; 0x24
 800482a:	b01d      	add	sp, #116	; 0x74
 800482c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004830:	ab03      	add	r3, sp, #12
 8004832:	9300      	str	r3, [sp, #0]
 8004834:	4622      	mov	r2, r4
 8004836:	4b07      	ldr	r3, [pc, #28]	; (8004854 <_svfiprintf_r+0x1ec>)
 8004838:	a904      	add	r1, sp, #16
 800483a:	4640      	mov	r0, r8
 800483c:	f000 f882 	bl	8004944 <_printf_i>
 8004840:	e7ea      	b.n	8004818 <_svfiprintf_r+0x1b0>
 8004842:	bf00      	nop
 8004844:	080050f3 	.word	0x080050f3
 8004848:	080050f9 	.word	0x080050f9
 800484c:	080050fd 	.word	0x080050fd
 8004850:	00000000 	.word	0x00000000
 8004854:	080045b5 	.word	0x080045b5

08004858 <_printf_common>:
 8004858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800485c:	4691      	mov	r9, r2
 800485e:	461f      	mov	r7, r3
 8004860:	688a      	ldr	r2, [r1, #8]
 8004862:	690b      	ldr	r3, [r1, #16]
 8004864:	4606      	mov	r6, r0
 8004866:	4293      	cmp	r3, r2
 8004868:	bfb8      	it	lt
 800486a:	4613      	movlt	r3, r2
 800486c:	f8c9 3000 	str.w	r3, [r9]
 8004870:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004874:	460c      	mov	r4, r1
 8004876:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800487a:	b112      	cbz	r2, 8004882 <_printf_common+0x2a>
 800487c:	3301      	adds	r3, #1
 800487e:	f8c9 3000 	str.w	r3, [r9]
 8004882:	6823      	ldr	r3, [r4, #0]
 8004884:	0699      	lsls	r1, r3, #26
 8004886:	bf42      	ittt	mi
 8004888:	f8d9 3000 	ldrmi.w	r3, [r9]
 800488c:	3302      	addmi	r3, #2
 800488e:	f8c9 3000 	strmi.w	r3, [r9]
 8004892:	6825      	ldr	r5, [r4, #0]
 8004894:	f015 0506 	ands.w	r5, r5, #6
 8004898:	d107      	bne.n	80048aa <_printf_common+0x52>
 800489a:	f104 0a19 	add.w	sl, r4, #25
 800489e:	68e3      	ldr	r3, [r4, #12]
 80048a0:	f8d9 2000 	ldr.w	r2, [r9]
 80048a4:	1a9b      	subs	r3, r3, r2
 80048a6:	42ab      	cmp	r3, r5
 80048a8:	dc29      	bgt.n	80048fe <_printf_common+0xa6>
 80048aa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80048ae:	6822      	ldr	r2, [r4, #0]
 80048b0:	3300      	adds	r3, #0
 80048b2:	bf18      	it	ne
 80048b4:	2301      	movne	r3, #1
 80048b6:	0692      	lsls	r2, r2, #26
 80048b8:	d42e      	bmi.n	8004918 <_printf_common+0xc0>
 80048ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048be:	4639      	mov	r1, r7
 80048c0:	4630      	mov	r0, r6
 80048c2:	47c0      	blx	r8
 80048c4:	3001      	adds	r0, #1
 80048c6:	d021      	beq.n	800490c <_printf_common+0xb4>
 80048c8:	6823      	ldr	r3, [r4, #0]
 80048ca:	68e5      	ldr	r5, [r4, #12]
 80048cc:	f003 0306 	and.w	r3, r3, #6
 80048d0:	2b04      	cmp	r3, #4
 80048d2:	bf18      	it	ne
 80048d4:	2500      	movne	r5, #0
 80048d6:	f8d9 2000 	ldr.w	r2, [r9]
 80048da:	f04f 0900 	mov.w	r9, #0
 80048de:	bf08      	it	eq
 80048e0:	1aad      	subeq	r5, r5, r2
 80048e2:	68a3      	ldr	r3, [r4, #8]
 80048e4:	6922      	ldr	r2, [r4, #16]
 80048e6:	bf08      	it	eq
 80048e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048ec:	4293      	cmp	r3, r2
 80048ee:	bfc4      	itt	gt
 80048f0:	1a9b      	subgt	r3, r3, r2
 80048f2:	18ed      	addgt	r5, r5, r3
 80048f4:	341a      	adds	r4, #26
 80048f6:	454d      	cmp	r5, r9
 80048f8:	d11a      	bne.n	8004930 <_printf_common+0xd8>
 80048fa:	2000      	movs	r0, #0
 80048fc:	e008      	b.n	8004910 <_printf_common+0xb8>
 80048fe:	2301      	movs	r3, #1
 8004900:	4652      	mov	r2, sl
 8004902:	4639      	mov	r1, r7
 8004904:	4630      	mov	r0, r6
 8004906:	47c0      	blx	r8
 8004908:	3001      	adds	r0, #1
 800490a:	d103      	bne.n	8004914 <_printf_common+0xbc>
 800490c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004914:	3501      	adds	r5, #1
 8004916:	e7c2      	b.n	800489e <_printf_common+0x46>
 8004918:	2030      	movs	r0, #48	; 0x30
 800491a:	18e1      	adds	r1, r4, r3
 800491c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004920:	1c5a      	adds	r2, r3, #1
 8004922:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004926:	4422      	add	r2, r4
 8004928:	3302      	adds	r3, #2
 800492a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800492e:	e7c4      	b.n	80048ba <_printf_common+0x62>
 8004930:	2301      	movs	r3, #1
 8004932:	4622      	mov	r2, r4
 8004934:	4639      	mov	r1, r7
 8004936:	4630      	mov	r0, r6
 8004938:	47c0      	blx	r8
 800493a:	3001      	adds	r0, #1
 800493c:	d0e6      	beq.n	800490c <_printf_common+0xb4>
 800493e:	f109 0901 	add.w	r9, r9, #1
 8004942:	e7d8      	b.n	80048f6 <_printf_common+0x9e>

08004944 <_printf_i>:
 8004944:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004948:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800494c:	460c      	mov	r4, r1
 800494e:	7e09      	ldrb	r1, [r1, #24]
 8004950:	b085      	sub	sp, #20
 8004952:	296e      	cmp	r1, #110	; 0x6e
 8004954:	4617      	mov	r7, r2
 8004956:	4606      	mov	r6, r0
 8004958:	4698      	mov	r8, r3
 800495a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800495c:	f000 80b3 	beq.w	8004ac6 <_printf_i+0x182>
 8004960:	d822      	bhi.n	80049a8 <_printf_i+0x64>
 8004962:	2963      	cmp	r1, #99	; 0x63
 8004964:	d036      	beq.n	80049d4 <_printf_i+0x90>
 8004966:	d80a      	bhi.n	800497e <_printf_i+0x3a>
 8004968:	2900      	cmp	r1, #0
 800496a:	f000 80b9 	beq.w	8004ae0 <_printf_i+0x19c>
 800496e:	2958      	cmp	r1, #88	; 0x58
 8004970:	f000 8083 	beq.w	8004a7a <_printf_i+0x136>
 8004974:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004978:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800497c:	e032      	b.n	80049e4 <_printf_i+0xa0>
 800497e:	2964      	cmp	r1, #100	; 0x64
 8004980:	d001      	beq.n	8004986 <_printf_i+0x42>
 8004982:	2969      	cmp	r1, #105	; 0x69
 8004984:	d1f6      	bne.n	8004974 <_printf_i+0x30>
 8004986:	6820      	ldr	r0, [r4, #0]
 8004988:	6813      	ldr	r3, [r2, #0]
 800498a:	0605      	lsls	r5, r0, #24
 800498c:	f103 0104 	add.w	r1, r3, #4
 8004990:	d52a      	bpl.n	80049e8 <_printf_i+0xa4>
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	6011      	str	r1, [r2, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	da03      	bge.n	80049a2 <_printf_i+0x5e>
 800499a:	222d      	movs	r2, #45	; 0x2d
 800499c:	425b      	negs	r3, r3
 800499e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80049a2:	486f      	ldr	r0, [pc, #444]	; (8004b60 <_printf_i+0x21c>)
 80049a4:	220a      	movs	r2, #10
 80049a6:	e039      	b.n	8004a1c <_printf_i+0xd8>
 80049a8:	2973      	cmp	r1, #115	; 0x73
 80049aa:	f000 809d 	beq.w	8004ae8 <_printf_i+0x1a4>
 80049ae:	d808      	bhi.n	80049c2 <_printf_i+0x7e>
 80049b0:	296f      	cmp	r1, #111	; 0x6f
 80049b2:	d020      	beq.n	80049f6 <_printf_i+0xb2>
 80049b4:	2970      	cmp	r1, #112	; 0x70
 80049b6:	d1dd      	bne.n	8004974 <_printf_i+0x30>
 80049b8:	6823      	ldr	r3, [r4, #0]
 80049ba:	f043 0320 	orr.w	r3, r3, #32
 80049be:	6023      	str	r3, [r4, #0]
 80049c0:	e003      	b.n	80049ca <_printf_i+0x86>
 80049c2:	2975      	cmp	r1, #117	; 0x75
 80049c4:	d017      	beq.n	80049f6 <_printf_i+0xb2>
 80049c6:	2978      	cmp	r1, #120	; 0x78
 80049c8:	d1d4      	bne.n	8004974 <_printf_i+0x30>
 80049ca:	2378      	movs	r3, #120	; 0x78
 80049cc:	4865      	ldr	r0, [pc, #404]	; (8004b64 <_printf_i+0x220>)
 80049ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80049d2:	e055      	b.n	8004a80 <_printf_i+0x13c>
 80049d4:	6813      	ldr	r3, [r2, #0]
 80049d6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049da:	1d19      	adds	r1, r3, #4
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	6011      	str	r1, [r2, #0]
 80049e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049e4:	2301      	movs	r3, #1
 80049e6:	e08c      	b.n	8004b02 <_printf_i+0x1be>
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 80049ee:	6011      	str	r1, [r2, #0]
 80049f0:	bf18      	it	ne
 80049f2:	b21b      	sxthne	r3, r3
 80049f4:	e7cf      	b.n	8004996 <_printf_i+0x52>
 80049f6:	6813      	ldr	r3, [r2, #0]
 80049f8:	6825      	ldr	r5, [r4, #0]
 80049fa:	1d18      	adds	r0, r3, #4
 80049fc:	6010      	str	r0, [r2, #0]
 80049fe:	0628      	lsls	r0, r5, #24
 8004a00:	d501      	bpl.n	8004a06 <_printf_i+0xc2>
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	e002      	b.n	8004a0c <_printf_i+0xc8>
 8004a06:	0668      	lsls	r0, r5, #25
 8004a08:	d5fb      	bpl.n	8004a02 <_printf_i+0xbe>
 8004a0a:	881b      	ldrh	r3, [r3, #0]
 8004a0c:	296f      	cmp	r1, #111	; 0x6f
 8004a0e:	bf14      	ite	ne
 8004a10:	220a      	movne	r2, #10
 8004a12:	2208      	moveq	r2, #8
 8004a14:	4852      	ldr	r0, [pc, #328]	; (8004b60 <_printf_i+0x21c>)
 8004a16:	2100      	movs	r1, #0
 8004a18:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a1c:	6865      	ldr	r5, [r4, #4]
 8004a1e:	2d00      	cmp	r5, #0
 8004a20:	60a5      	str	r5, [r4, #8]
 8004a22:	f2c0 8095 	blt.w	8004b50 <_printf_i+0x20c>
 8004a26:	6821      	ldr	r1, [r4, #0]
 8004a28:	f021 0104 	bic.w	r1, r1, #4
 8004a2c:	6021      	str	r1, [r4, #0]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d13d      	bne.n	8004aae <_printf_i+0x16a>
 8004a32:	2d00      	cmp	r5, #0
 8004a34:	f040 808e 	bne.w	8004b54 <_printf_i+0x210>
 8004a38:	4665      	mov	r5, ip
 8004a3a:	2a08      	cmp	r2, #8
 8004a3c:	d10b      	bne.n	8004a56 <_printf_i+0x112>
 8004a3e:	6823      	ldr	r3, [r4, #0]
 8004a40:	07db      	lsls	r3, r3, #31
 8004a42:	d508      	bpl.n	8004a56 <_printf_i+0x112>
 8004a44:	6923      	ldr	r3, [r4, #16]
 8004a46:	6862      	ldr	r2, [r4, #4]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	bfde      	ittt	le
 8004a4c:	2330      	movle	r3, #48	; 0x30
 8004a4e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a52:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004a56:	ebac 0305 	sub.w	r3, ip, r5
 8004a5a:	6123      	str	r3, [r4, #16]
 8004a5c:	f8cd 8000 	str.w	r8, [sp]
 8004a60:	463b      	mov	r3, r7
 8004a62:	aa03      	add	r2, sp, #12
 8004a64:	4621      	mov	r1, r4
 8004a66:	4630      	mov	r0, r6
 8004a68:	f7ff fef6 	bl	8004858 <_printf_common>
 8004a6c:	3001      	adds	r0, #1
 8004a6e:	d14d      	bne.n	8004b0c <_printf_i+0x1c8>
 8004a70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a74:	b005      	add	sp, #20
 8004a76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004a7a:	4839      	ldr	r0, [pc, #228]	; (8004b60 <_printf_i+0x21c>)
 8004a7c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004a80:	6813      	ldr	r3, [r2, #0]
 8004a82:	6821      	ldr	r1, [r4, #0]
 8004a84:	1d1d      	adds	r5, r3, #4
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	6015      	str	r5, [r2, #0]
 8004a8a:	060a      	lsls	r2, r1, #24
 8004a8c:	d50b      	bpl.n	8004aa6 <_printf_i+0x162>
 8004a8e:	07ca      	lsls	r2, r1, #31
 8004a90:	bf44      	itt	mi
 8004a92:	f041 0120 	orrmi.w	r1, r1, #32
 8004a96:	6021      	strmi	r1, [r4, #0]
 8004a98:	b91b      	cbnz	r3, 8004aa2 <_printf_i+0x15e>
 8004a9a:	6822      	ldr	r2, [r4, #0]
 8004a9c:	f022 0220 	bic.w	r2, r2, #32
 8004aa0:	6022      	str	r2, [r4, #0]
 8004aa2:	2210      	movs	r2, #16
 8004aa4:	e7b7      	b.n	8004a16 <_printf_i+0xd2>
 8004aa6:	064d      	lsls	r5, r1, #25
 8004aa8:	bf48      	it	mi
 8004aaa:	b29b      	uxthmi	r3, r3
 8004aac:	e7ef      	b.n	8004a8e <_printf_i+0x14a>
 8004aae:	4665      	mov	r5, ip
 8004ab0:	fbb3 f1f2 	udiv	r1, r3, r2
 8004ab4:	fb02 3311 	mls	r3, r2, r1, r3
 8004ab8:	5cc3      	ldrb	r3, [r0, r3]
 8004aba:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004abe:	460b      	mov	r3, r1
 8004ac0:	2900      	cmp	r1, #0
 8004ac2:	d1f5      	bne.n	8004ab0 <_printf_i+0x16c>
 8004ac4:	e7b9      	b.n	8004a3a <_printf_i+0xf6>
 8004ac6:	6813      	ldr	r3, [r2, #0]
 8004ac8:	6825      	ldr	r5, [r4, #0]
 8004aca:	1d18      	adds	r0, r3, #4
 8004acc:	6961      	ldr	r1, [r4, #20]
 8004ace:	6010      	str	r0, [r2, #0]
 8004ad0:	0628      	lsls	r0, r5, #24
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	d501      	bpl.n	8004ada <_printf_i+0x196>
 8004ad6:	6019      	str	r1, [r3, #0]
 8004ad8:	e002      	b.n	8004ae0 <_printf_i+0x19c>
 8004ada:	066a      	lsls	r2, r5, #25
 8004adc:	d5fb      	bpl.n	8004ad6 <_printf_i+0x192>
 8004ade:	8019      	strh	r1, [r3, #0]
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	4665      	mov	r5, ip
 8004ae4:	6123      	str	r3, [r4, #16]
 8004ae6:	e7b9      	b.n	8004a5c <_printf_i+0x118>
 8004ae8:	6813      	ldr	r3, [r2, #0]
 8004aea:	1d19      	adds	r1, r3, #4
 8004aec:	6011      	str	r1, [r2, #0]
 8004aee:	681d      	ldr	r5, [r3, #0]
 8004af0:	6862      	ldr	r2, [r4, #4]
 8004af2:	2100      	movs	r1, #0
 8004af4:	4628      	mov	r0, r5
 8004af6:	f000 f847 	bl	8004b88 <memchr>
 8004afa:	b108      	cbz	r0, 8004b00 <_printf_i+0x1bc>
 8004afc:	1b40      	subs	r0, r0, r5
 8004afe:	6060      	str	r0, [r4, #4]
 8004b00:	6863      	ldr	r3, [r4, #4]
 8004b02:	6123      	str	r3, [r4, #16]
 8004b04:	2300      	movs	r3, #0
 8004b06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b0a:	e7a7      	b.n	8004a5c <_printf_i+0x118>
 8004b0c:	6923      	ldr	r3, [r4, #16]
 8004b0e:	462a      	mov	r2, r5
 8004b10:	4639      	mov	r1, r7
 8004b12:	4630      	mov	r0, r6
 8004b14:	47c0      	blx	r8
 8004b16:	3001      	adds	r0, #1
 8004b18:	d0aa      	beq.n	8004a70 <_printf_i+0x12c>
 8004b1a:	6823      	ldr	r3, [r4, #0]
 8004b1c:	079b      	lsls	r3, r3, #30
 8004b1e:	d413      	bmi.n	8004b48 <_printf_i+0x204>
 8004b20:	68e0      	ldr	r0, [r4, #12]
 8004b22:	9b03      	ldr	r3, [sp, #12]
 8004b24:	4298      	cmp	r0, r3
 8004b26:	bfb8      	it	lt
 8004b28:	4618      	movlt	r0, r3
 8004b2a:	e7a3      	b.n	8004a74 <_printf_i+0x130>
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	464a      	mov	r2, r9
 8004b30:	4639      	mov	r1, r7
 8004b32:	4630      	mov	r0, r6
 8004b34:	47c0      	blx	r8
 8004b36:	3001      	adds	r0, #1
 8004b38:	d09a      	beq.n	8004a70 <_printf_i+0x12c>
 8004b3a:	3501      	adds	r5, #1
 8004b3c:	68e3      	ldr	r3, [r4, #12]
 8004b3e:	9a03      	ldr	r2, [sp, #12]
 8004b40:	1a9b      	subs	r3, r3, r2
 8004b42:	42ab      	cmp	r3, r5
 8004b44:	dcf2      	bgt.n	8004b2c <_printf_i+0x1e8>
 8004b46:	e7eb      	b.n	8004b20 <_printf_i+0x1dc>
 8004b48:	2500      	movs	r5, #0
 8004b4a:	f104 0919 	add.w	r9, r4, #25
 8004b4e:	e7f5      	b.n	8004b3c <_printf_i+0x1f8>
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1ac      	bne.n	8004aae <_printf_i+0x16a>
 8004b54:	7803      	ldrb	r3, [r0, #0]
 8004b56:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b5a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b5e:	e76c      	b.n	8004a3a <_printf_i+0xf6>
 8004b60:	08005104 	.word	0x08005104
 8004b64:	08005115 	.word	0x08005115

08004b68 <_sbrk_r>:
 8004b68:	b538      	push	{r3, r4, r5, lr}
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	4c05      	ldr	r4, [pc, #20]	; (8004b84 <_sbrk_r+0x1c>)
 8004b6e:	4605      	mov	r5, r0
 8004b70:	4608      	mov	r0, r1
 8004b72:	6023      	str	r3, [r4, #0]
 8004b74:	f7ff fa5a 	bl	800402c <_sbrk>
 8004b78:	1c43      	adds	r3, r0, #1
 8004b7a:	d102      	bne.n	8004b82 <_sbrk_r+0x1a>
 8004b7c:	6823      	ldr	r3, [r4, #0]
 8004b7e:	b103      	cbz	r3, 8004b82 <_sbrk_r+0x1a>
 8004b80:	602b      	str	r3, [r5, #0]
 8004b82:	bd38      	pop	{r3, r4, r5, pc}
 8004b84:	20000588 	.word	0x20000588

08004b88 <memchr>:
 8004b88:	b510      	push	{r4, lr}
 8004b8a:	b2c9      	uxtb	r1, r1
 8004b8c:	4402      	add	r2, r0
 8004b8e:	4290      	cmp	r0, r2
 8004b90:	4603      	mov	r3, r0
 8004b92:	d101      	bne.n	8004b98 <memchr+0x10>
 8004b94:	2300      	movs	r3, #0
 8004b96:	e003      	b.n	8004ba0 <memchr+0x18>
 8004b98:	781c      	ldrb	r4, [r3, #0]
 8004b9a:	3001      	adds	r0, #1
 8004b9c:	428c      	cmp	r4, r1
 8004b9e:	d1f6      	bne.n	8004b8e <memchr+0x6>
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	bd10      	pop	{r4, pc}

08004ba4 <memmove>:
 8004ba4:	4288      	cmp	r0, r1
 8004ba6:	b510      	push	{r4, lr}
 8004ba8:	eb01 0302 	add.w	r3, r1, r2
 8004bac:	d807      	bhi.n	8004bbe <memmove+0x1a>
 8004bae:	1e42      	subs	r2, r0, #1
 8004bb0:	4299      	cmp	r1, r3
 8004bb2:	d00a      	beq.n	8004bca <memmove+0x26>
 8004bb4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bb8:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004bbc:	e7f8      	b.n	8004bb0 <memmove+0xc>
 8004bbe:	4283      	cmp	r3, r0
 8004bc0:	d9f5      	bls.n	8004bae <memmove+0xa>
 8004bc2:	1881      	adds	r1, r0, r2
 8004bc4:	1ad2      	subs	r2, r2, r3
 8004bc6:	42d3      	cmn	r3, r2
 8004bc8:	d100      	bne.n	8004bcc <memmove+0x28>
 8004bca:	bd10      	pop	{r4, pc}
 8004bcc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004bd0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004bd4:	e7f7      	b.n	8004bc6 <memmove+0x22>

08004bd6 <__malloc_lock>:
 8004bd6:	4770      	bx	lr

08004bd8 <__malloc_unlock>:
 8004bd8:	4770      	bx	lr

08004bda <_realloc_r>:
 8004bda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bdc:	4607      	mov	r7, r0
 8004bde:	4614      	mov	r4, r2
 8004be0:	460e      	mov	r6, r1
 8004be2:	b921      	cbnz	r1, 8004bee <_realloc_r+0x14>
 8004be4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004be8:	4611      	mov	r1, r2
 8004bea:	f7ff bc89 	b.w	8004500 <_malloc_r>
 8004bee:	b922      	cbnz	r2, 8004bfa <_realloc_r+0x20>
 8004bf0:	f7ff fc3a 	bl	8004468 <_free_r>
 8004bf4:	4625      	mov	r5, r4
 8004bf6:	4628      	mov	r0, r5
 8004bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bfa:	f000 f814 	bl	8004c26 <_malloc_usable_size_r>
 8004bfe:	42a0      	cmp	r0, r4
 8004c00:	d20f      	bcs.n	8004c22 <_realloc_r+0x48>
 8004c02:	4621      	mov	r1, r4
 8004c04:	4638      	mov	r0, r7
 8004c06:	f7ff fc7b 	bl	8004500 <_malloc_r>
 8004c0a:	4605      	mov	r5, r0
 8004c0c:	2800      	cmp	r0, #0
 8004c0e:	d0f2      	beq.n	8004bf6 <_realloc_r+0x1c>
 8004c10:	4631      	mov	r1, r6
 8004c12:	4622      	mov	r2, r4
 8004c14:	f7ff fae2 	bl	80041dc <memcpy>
 8004c18:	4631      	mov	r1, r6
 8004c1a:	4638      	mov	r0, r7
 8004c1c:	f7ff fc24 	bl	8004468 <_free_r>
 8004c20:	e7e9      	b.n	8004bf6 <_realloc_r+0x1c>
 8004c22:	4635      	mov	r5, r6
 8004c24:	e7e7      	b.n	8004bf6 <_realloc_r+0x1c>

08004c26 <_malloc_usable_size_r>:
 8004c26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c2a:	1f18      	subs	r0, r3, #4
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	bfbc      	itt	lt
 8004c30:	580b      	ldrlt	r3, [r1, r0]
 8004c32:	18c0      	addlt	r0, r0, r3
 8004c34:	4770      	bx	lr
	...

08004c38 <_init>:
 8004c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c3a:	bf00      	nop
 8004c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c3e:	bc08      	pop	{r3}
 8004c40:	469e      	mov	lr, r3
 8004c42:	4770      	bx	lr

08004c44 <_fini>:
 8004c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c46:	bf00      	nop
 8004c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c4a:	bc08      	pop	{r3}
 8004c4c:	469e      	mov	lr, r3
 8004c4e:	4770      	bx	lr
