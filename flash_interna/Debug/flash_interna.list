
flash_interna.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001438  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08001544  08001544  00011544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001578  08001578  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001578  08001578  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001578  08001578  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001578  08001578  00011578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800157c  0800157c  0001157c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001580  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000010  0800158c  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000050  0800158c  00020050  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000488a  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001233  00000000  00000000  000248bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000004c0  00000000  00000000  00025af8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000418  00000000  00000000  00025fb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00012ec3  00000000  00000000  000263d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004952  00000000  00000000  00039293  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00066ed8  00000000  00000000  0003dbe5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a4abd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000010e8  00000000  00000000  000a4b38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	0800152c 	.word	0x0800152c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	0800152c 	.word	0x0800152c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000160:	4b08      	ldr	r3, [pc, #32]	; (8000184 <HAL_Init+0x28>)
 8000162:	681b      	ldr	r3, [r3, #0]
 8000164:	4a07      	ldr	r2, [pc, #28]	; (8000184 <HAL_Init+0x28>)
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800016c:	2003      	movs	r0, #3
 800016e:	f000 f907 	bl	8000380 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000172:	2000      	movs	r0, #0
 8000174:	f000 f808 	bl	8000188 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000178:	f001 f8ee 	bl	8001358 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800017c:	2300      	movs	r3, #0
}
 800017e:	4618      	mov	r0, r3
 8000180:	bd80      	pop	{r7, pc}
 8000182:	bf00      	nop
 8000184:	40022000 	.word	0x40022000

08000188 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b082      	sub	sp, #8
 800018c:	af00      	add	r7, sp, #0
 800018e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000190:	4b12      	ldr	r3, [pc, #72]	; (80001dc <HAL_InitTick+0x54>)
 8000192:	681a      	ldr	r2, [r3, #0]
 8000194:	4b12      	ldr	r3, [pc, #72]	; (80001e0 <HAL_InitTick+0x58>)
 8000196:	781b      	ldrb	r3, [r3, #0]
 8000198:	4619      	mov	r1, r3
 800019a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800019e:	fbb3 f3f1 	udiv	r3, r3, r1
 80001a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80001a6:	4618      	mov	r0, r3
 80001a8:	f000 f911 	bl	80003ce <HAL_SYSTICK_Config>
 80001ac:	4603      	mov	r3, r0
 80001ae:	2b00      	cmp	r3, #0
 80001b0:	d001      	beq.n	80001b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001b2:	2301      	movs	r3, #1
 80001b4:	e00e      	b.n	80001d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	2b0f      	cmp	r3, #15
 80001ba:	d80a      	bhi.n	80001d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001bc:	2200      	movs	r2, #0
 80001be:	6879      	ldr	r1, [r7, #4]
 80001c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80001c4:	f000 f8e7 	bl	8000396 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001c8:	4a06      	ldr	r2, [pc, #24]	; (80001e4 <HAL_InitTick+0x5c>)
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001ce:	2300      	movs	r3, #0
 80001d0:	e000      	b.n	80001d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001d2:	2301      	movs	r3, #1
}
 80001d4:	4618      	mov	r0, r3
 80001d6:	3708      	adds	r7, #8
 80001d8:	46bd      	mov	sp, r7
 80001da:	bd80      	pop	{r7, pc}
 80001dc:	20000008 	.word	0x20000008
 80001e0:	20000004 	.word	0x20000004
 80001e4:	20000000 	.word	0x20000000

080001e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001ec:	4b05      	ldr	r3, [pc, #20]	; (8000204 <HAL_IncTick+0x1c>)
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	461a      	mov	r2, r3
 80001f2:	4b05      	ldr	r3, [pc, #20]	; (8000208 <HAL_IncTick+0x20>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4413      	add	r3, r2
 80001f8:	4a03      	ldr	r2, [pc, #12]	; (8000208 <HAL_IncTick+0x20>)
 80001fa:	6013      	str	r3, [r2, #0]
}
 80001fc:	bf00      	nop
 80001fe:	46bd      	mov	sp, r7
 8000200:	bc80      	pop	{r7}
 8000202:	4770      	bx	lr
 8000204:	20000004 	.word	0x20000004
 8000208:	2000002c 	.word	0x2000002c

0800020c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800020c:	b480      	push	{r7}
 800020e:	af00      	add	r7, sp, #0
  return uwTick;
 8000210:	4b02      	ldr	r3, [pc, #8]	; (800021c <HAL_GetTick+0x10>)
 8000212:	681b      	ldr	r3, [r3, #0]
}
 8000214:	4618      	mov	r0, r3
 8000216:	46bd      	mov	sp, r7
 8000218:	bc80      	pop	{r7}
 800021a:	4770      	bx	lr
 800021c:	2000002c 	.word	0x2000002c

08000220 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000220:	b480      	push	{r7}
 8000222:	b085      	sub	sp, #20
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	f003 0307 	and.w	r3, r3, #7
 800022e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000230:	4b0c      	ldr	r3, [pc, #48]	; (8000264 <__NVIC_SetPriorityGrouping+0x44>)
 8000232:	68db      	ldr	r3, [r3, #12]
 8000234:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000236:	68ba      	ldr	r2, [r7, #8]
 8000238:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800023c:	4013      	ands	r3, r2
 800023e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000244:	68bb      	ldr	r3, [r7, #8]
 8000246:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000248:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800024c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000250:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000252:	4a04      	ldr	r2, [pc, #16]	; (8000264 <__NVIC_SetPriorityGrouping+0x44>)
 8000254:	68bb      	ldr	r3, [r7, #8]
 8000256:	60d3      	str	r3, [r2, #12]
}
 8000258:	bf00      	nop
 800025a:	3714      	adds	r7, #20
 800025c:	46bd      	mov	sp, r7
 800025e:	bc80      	pop	{r7}
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	e000ed00 	.word	0xe000ed00

08000268 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800026c:	4b04      	ldr	r3, [pc, #16]	; (8000280 <__NVIC_GetPriorityGrouping+0x18>)
 800026e:	68db      	ldr	r3, [r3, #12]
 8000270:	0a1b      	lsrs	r3, r3, #8
 8000272:	f003 0307 	and.w	r3, r3, #7
}
 8000276:	4618      	mov	r0, r3
 8000278:	46bd      	mov	sp, r7
 800027a:	bc80      	pop	{r7}
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop
 8000280:	e000ed00 	.word	0xe000ed00

08000284 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000284:	b480      	push	{r7}
 8000286:	b083      	sub	sp, #12
 8000288:	af00      	add	r7, sp, #0
 800028a:	4603      	mov	r3, r0
 800028c:	6039      	str	r1, [r7, #0]
 800028e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000294:	2b00      	cmp	r3, #0
 8000296:	db0a      	blt.n	80002ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000298:	683b      	ldr	r3, [r7, #0]
 800029a:	b2da      	uxtb	r2, r3
 800029c:	490c      	ldr	r1, [pc, #48]	; (80002d0 <__NVIC_SetPriority+0x4c>)
 800029e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002a2:	0112      	lsls	r2, r2, #4
 80002a4:	b2d2      	uxtb	r2, r2
 80002a6:	440b      	add	r3, r1
 80002a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002ac:	e00a      	b.n	80002c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ae:	683b      	ldr	r3, [r7, #0]
 80002b0:	b2da      	uxtb	r2, r3
 80002b2:	4908      	ldr	r1, [pc, #32]	; (80002d4 <__NVIC_SetPriority+0x50>)
 80002b4:	79fb      	ldrb	r3, [r7, #7]
 80002b6:	f003 030f 	and.w	r3, r3, #15
 80002ba:	3b04      	subs	r3, #4
 80002bc:	0112      	lsls	r2, r2, #4
 80002be:	b2d2      	uxtb	r2, r2
 80002c0:	440b      	add	r3, r1
 80002c2:	761a      	strb	r2, [r3, #24]
}
 80002c4:	bf00      	nop
 80002c6:	370c      	adds	r7, #12
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bc80      	pop	{r7}
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop
 80002d0:	e000e100 	.word	0xe000e100
 80002d4:	e000ed00 	.word	0xe000ed00

080002d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002d8:	b480      	push	{r7}
 80002da:	b089      	sub	sp, #36	; 0x24
 80002dc:	af00      	add	r7, sp, #0
 80002de:	60f8      	str	r0, [r7, #12]
 80002e0:	60b9      	str	r1, [r7, #8]
 80002e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	f003 0307 	and.w	r3, r3, #7
 80002ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002ec:	69fb      	ldr	r3, [r7, #28]
 80002ee:	f1c3 0307 	rsb	r3, r3, #7
 80002f2:	2b04      	cmp	r3, #4
 80002f4:	bf28      	it	cs
 80002f6:	2304      	movcs	r3, #4
 80002f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002fa:	69fb      	ldr	r3, [r7, #28]
 80002fc:	3304      	adds	r3, #4
 80002fe:	2b06      	cmp	r3, #6
 8000300:	d902      	bls.n	8000308 <NVIC_EncodePriority+0x30>
 8000302:	69fb      	ldr	r3, [r7, #28]
 8000304:	3b03      	subs	r3, #3
 8000306:	e000      	b.n	800030a <NVIC_EncodePriority+0x32>
 8000308:	2300      	movs	r3, #0
 800030a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800030c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000310:	69bb      	ldr	r3, [r7, #24]
 8000312:	fa02 f303 	lsl.w	r3, r2, r3
 8000316:	43da      	mvns	r2, r3
 8000318:	68bb      	ldr	r3, [r7, #8]
 800031a:	401a      	ands	r2, r3
 800031c:	697b      	ldr	r3, [r7, #20]
 800031e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000320:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000324:	697b      	ldr	r3, [r7, #20]
 8000326:	fa01 f303 	lsl.w	r3, r1, r3
 800032a:	43d9      	mvns	r1, r3
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000330:	4313      	orrs	r3, r2
         );
}
 8000332:	4618      	mov	r0, r3
 8000334:	3724      	adds	r7, #36	; 0x24
 8000336:	46bd      	mov	sp, r7
 8000338:	bc80      	pop	{r7}
 800033a:	4770      	bx	lr

0800033c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	3b01      	subs	r3, #1
 8000348:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800034c:	d301      	bcc.n	8000352 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800034e:	2301      	movs	r3, #1
 8000350:	e00f      	b.n	8000372 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000352:	4a0a      	ldr	r2, [pc, #40]	; (800037c <SysTick_Config+0x40>)
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	3b01      	subs	r3, #1
 8000358:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800035a:	210f      	movs	r1, #15
 800035c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000360:	f7ff ff90 	bl	8000284 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000364:	4b05      	ldr	r3, [pc, #20]	; (800037c <SysTick_Config+0x40>)
 8000366:	2200      	movs	r2, #0
 8000368:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800036a:	4b04      	ldr	r3, [pc, #16]	; (800037c <SysTick_Config+0x40>)
 800036c:	2207      	movs	r2, #7
 800036e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000370:	2300      	movs	r3, #0
}
 8000372:	4618      	mov	r0, r3
 8000374:	3708      	adds	r7, #8
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	e000e010 	.word	0xe000e010

08000380 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000388:	6878      	ldr	r0, [r7, #4]
 800038a:	f7ff ff49 	bl	8000220 <__NVIC_SetPriorityGrouping>
}
 800038e:	bf00      	nop
 8000390:	3708      	adds	r7, #8
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}

08000396 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000396:	b580      	push	{r7, lr}
 8000398:	b086      	sub	sp, #24
 800039a:	af00      	add	r7, sp, #0
 800039c:	4603      	mov	r3, r0
 800039e:	60b9      	str	r1, [r7, #8]
 80003a0:	607a      	str	r2, [r7, #4]
 80003a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80003a4:	2300      	movs	r3, #0
 80003a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80003a8:	f7ff ff5e 	bl	8000268 <__NVIC_GetPriorityGrouping>
 80003ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80003ae:	687a      	ldr	r2, [r7, #4]
 80003b0:	68b9      	ldr	r1, [r7, #8]
 80003b2:	6978      	ldr	r0, [r7, #20]
 80003b4:	f7ff ff90 	bl	80002d8 <NVIC_EncodePriority>
 80003b8:	4602      	mov	r2, r0
 80003ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003be:	4611      	mov	r1, r2
 80003c0:	4618      	mov	r0, r3
 80003c2:	f7ff ff5f 	bl	8000284 <__NVIC_SetPriority>
}
 80003c6:	bf00      	nop
 80003c8:	3718      	adds	r7, #24
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}

080003ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80003ce:	b580      	push	{r7, lr}
 80003d0:	b082      	sub	sp, #8
 80003d2:	af00      	add	r7, sp, #0
 80003d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80003d6:	6878      	ldr	r0, [r7, #4]
 80003d8:	f7ff ffb0 	bl	800033c <SysTick_Config>
 80003dc:	4603      	mov	r3, r0
}
 80003de:	4618      	mov	r0, r3
 80003e0:	3708      	adds	r7, #8
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
	...

080003e8 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80003e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003ea:	b087      	sub	sp, #28
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	60f8      	str	r0, [r7, #12]
 80003f0:	60b9      	str	r1, [r7, #8]
 80003f2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80003f6:	2301      	movs	r3, #1
 80003f8:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80003fa:	2300      	movs	r3, #0
 80003fc:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80003fe:	2300      	movs	r3, #0
 8000400:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000402:	4b2f      	ldr	r3, [pc, #188]	; (80004c0 <HAL_FLASH_Program+0xd8>)
 8000404:	7e1b      	ldrb	r3, [r3, #24]
 8000406:	2b01      	cmp	r3, #1
 8000408:	d101      	bne.n	800040e <HAL_FLASH_Program+0x26>
 800040a:	2302      	movs	r3, #2
 800040c:	e054      	b.n	80004b8 <HAL_FLASH_Program+0xd0>
 800040e:	4b2c      	ldr	r3, [pc, #176]	; (80004c0 <HAL_FLASH_Program+0xd8>)
 8000410:	2201      	movs	r2, #1
 8000412:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000414:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000418:	f000 f8d4 	bl	80005c4 <FLASH_WaitForLastOperation>
 800041c:	4603      	mov	r3, r0
 800041e:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8000420:	7dfb      	ldrb	r3, [r7, #23]
 8000422:	2b00      	cmp	r3, #0
 8000424:	d144      	bne.n	80004b0 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	2b01      	cmp	r3, #1
 800042a:	d102      	bne.n	8000432 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 800042c:	2301      	movs	r3, #1
 800042e:	757b      	strb	r3, [r7, #21]
 8000430:	e007      	b.n	8000442 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000432:	68fb      	ldr	r3, [r7, #12]
 8000434:	2b02      	cmp	r3, #2
 8000436:	d102      	bne.n	800043e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8000438:	2302      	movs	r3, #2
 800043a:	757b      	strb	r3, [r7, #21]
 800043c:	e001      	b.n	8000442 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800043e:	2304      	movs	r3, #4
 8000440:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8000442:	2300      	movs	r3, #0
 8000444:	75bb      	strb	r3, [r7, #22]
 8000446:	e02d      	b.n	80004a4 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000448:	7dbb      	ldrb	r3, [r7, #22]
 800044a:	005a      	lsls	r2, r3, #1
 800044c:	68bb      	ldr	r3, [r7, #8]
 800044e:	eb02 0c03 	add.w	ip, r2, r3
 8000452:	7dbb      	ldrb	r3, [r7, #22]
 8000454:	0119      	lsls	r1, r3, #4
 8000456:	e9d7 2300 	ldrd	r2, r3, [r7]
 800045a:	f1c1 0620 	rsb	r6, r1, #32
 800045e:	f1a1 0020 	sub.w	r0, r1, #32
 8000462:	fa22 f401 	lsr.w	r4, r2, r1
 8000466:	fa03 f606 	lsl.w	r6, r3, r6
 800046a:	4334      	orrs	r4, r6
 800046c:	fa23 f000 	lsr.w	r0, r3, r0
 8000470:	4304      	orrs	r4, r0
 8000472:	fa23 f501 	lsr.w	r5, r3, r1
 8000476:	b2a3      	uxth	r3, r4
 8000478:	4619      	mov	r1, r3
 800047a:	4660      	mov	r0, ip
 800047c:	f000 f886 	bl	800058c <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000480:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000484:	f000 f89e 	bl	80005c4 <FLASH_WaitForLastOperation>
 8000488:	4603      	mov	r3, r0
 800048a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800048c:	4b0d      	ldr	r3, [pc, #52]	; (80004c4 <HAL_FLASH_Program+0xdc>)
 800048e:	691b      	ldr	r3, [r3, #16]
 8000490:	4a0c      	ldr	r2, [pc, #48]	; (80004c4 <HAL_FLASH_Program+0xdc>)
 8000492:	f023 0301 	bic.w	r3, r3, #1
 8000496:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8000498:	7dfb      	ldrb	r3, [r7, #23]
 800049a:	2b00      	cmp	r3, #0
 800049c:	d107      	bne.n	80004ae <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800049e:	7dbb      	ldrb	r3, [r7, #22]
 80004a0:	3301      	adds	r3, #1
 80004a2:	75bb      	strb	r3, [r7, #22]
 80004a4:	7dba      	ldrb	r2, [r7, #22]
 80004a6:	7d7b      	ldrb	r3, [r7, #21]
 80004a8:	429a      	cmp	r2, r3
 80004aa:	d3cd      	bcc.n	8000448 <HAL_FLASH_Program+0x60>
 80004ac:	e000      	b.n	80004b0 <HAL_FLASH_Program+0xc8>
      {
        break;
 80004ae:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80004b0:	4b03      	ldr	r3, [pc, #12]	; (80004c0 <HAL_FLASH_Program+0xd8>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	761a      	strb	r2, [r3, #24]

  return status;
 80004b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80004b8:	4618      	mov	r0, r3
 80004ba:	371c      	adds	r7, #28
 80004bc:	46bd      	mov	sp, r7
 80004be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004c0:	20000030 	.word	0x20000030
 80004c4:	40022000 	.word	0x40022000

080004c8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80004ce:	2300      	movs	r3, #0
 80004d0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80004d2:	4b0d      	ldr	r3, [pc, #52]	; (8000508 <HAL_FLASH_Unlock+0x40>)
 80004d4:	691b      	ldr	r3, [r3, #16]
 80004d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d00d      	beq.n	80004fa <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80004de:	4b0a      	ldr	r3, [pc, #40]	; (8000508 <HAL_FLASH_Unlock+0x40>)
 80004e0:	4a0a      	ldr	r2, [pc, #40]	; (800050c <HAL_FLASH_Unlock+0x44>)
 80004e2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80004e4:	4b08      	ldr	r3, [pc, #32]	; (8000508 <HAL_FLASH_Unlock+0x40>)
 80004e6:	4a0a      	ldr	r2, [pc, #40]	; (8000510 <HAL_FLASH_Unlock+0x48>)
 80004e8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80004ea:	4b07      	ldr	r3, [pc, #28]	; (8000508 <HAL_FLASH_Unlock+0x40>)
 80004ec:	691b      	ldr	r3, [r3, #16]
 80004ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80004f6:	2301      	movs	r3, #1
 80004f8:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80004fa:	79fb      	ldrb	r3, [r7, #7]
}
 80004fc:	4618      	mov	r0, r3
 80004fe:	370c      	adds	r7, #12
 8000500:	46bd      	mov	sp, r7
 8000502:	bc80      	pop	{r7}
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	40022000 	.word	0x40022000
 800050c:	45670123 	.word	0x45670123
 8000510:	cdef89ab 	.word	0xcdef89ab

08000514 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000518:	4b05      	ldr	r3, [pc, #20]	; (8000530 <HAL_FLASH_Lock+0x1c>)
 800051a:	691b      	ldr	r3, [r3, #16]
 800051c:	4a04      	ldr	r2, [pc, #16]	; (8000530 <HAL_FLASH_Lock+0x1c>)
 800051e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000522:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8000524:	2300      	movs	r3, #0
}
 8000526:	4618      	mov	r0, r3
 8000528:	46bd      	mov	sp, r7
 800052a:	bc80      	pop	{r7}
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	40022000 	.word	0x40022000

08000534 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
 8000538:	4b09      	ldr	r3, [pc, #36]	; (8000560 <HAL_FLASH_OB_Unlock+0x2c>)
 800053a:	691b      	ldr	r3, [r3, #16]
 800053c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000540:	2b00      	cmp	r3, #0
 8000542:	d107      	bne.n	8000554 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8000544:	4b06      	ldr	r3, [pc, #24]	; (8000560 <HAL_FLASH_OB_Unlock+0x2c>)
 8000546:	4a07      	ldr	r2, [pc, #28]	; (8000564 <HAL_FLASH_OB_Unlock+0x30>)
 8000548:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 800054a:	4b05      	ldr	r3, [pc, #20]	; (8000560 <HAL_FLASH_OB_Unlock+0x2c>)
 800054c:	4a06      	ldr	r2, [pc, #24]	; (8000568 <HAL_FLASH_OB_Unlock+0x34>)
 800054e:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 8000550:	2300      	movs	r3, #0
 8000552:	e000      	b.n	8000556 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8000554:	2301      	movs	r3, #1
}
 8000556:	4618      	mov	r0, r3
 8000558:	46bd      	mov	sp, r7
 800055a:	bc80      	pop	{r7}
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	40022000 	.word	0x40022000
 8000564:	45670123 	.word	0x45670123
 8000568:	cdef89ab 	.word	0xcdef89ab

0800056c <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  /* Clear the OPTWRE Bit to lock the FLASH Option Byte Registers access */
  CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
 8000570:	4b05      	ldr	r3, [pc, #20]	; (8000588 <HAL_FLASH_OB_Lock+0x1c>)
 8000572:	691b      	ldr	r3, [r3, #16]
 8000574:	4a04      	ldr	r2, [pc, #16]	; (8000588 <HAL_FLASH_OB_Lock+0x1c>)
 8000576:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800057a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800057c:	2300      	movs	r3, #0
}
 800057e:	4618      	mov	r0, r3
 8000580:	46bd      	mov	sp, r7
 8000582:	bc80      	pop	{r7}
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	40022000 	.word	0x40022000

0800058c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
 8000594:	460b      	mov	r3, r1
 8000596:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000598:	4b08      	ldr	r3, [pc, #32]	; (80005bc <FLASH_Program_HalfWord+0x30>)
 800059a:	2200      	movs	r2, #0
 800059c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800059e:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <FLASH_Program_HalfWord+0x34>)
 80005a0:	691b      	ldr	r3, [r3, #16]
 80005a2:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <FLASH_Program_HalfWord+0x34>)
 80005a4:	f043 0301 	orr.w	r3, r3, #1
 80005a8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	887a      	ldrh	r2, [r7, #2]
 80005ae:	801a      	strh	r2, [r3, #0]
}
 80005b0:	bf00      	nop
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bc80      	pop	{r7}
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	20000030 	.word	0x20000030
 80005c0:	40022000 	.word	0x40022000

080005c4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80005cc:	f7ff fe1e 	bl	800020c <HAL_GetTick>
 80005d0:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80005d2:	e010      	b.n	80005f6 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80005da:	d00c      	beq.n	80005f6 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d007      	beq.n	80005f2 <FLASH_WaitForLastOperation+0x2e>
 80005e2:	f7ff fe13 	bl	800020c <HAL_GetTick>
 80005e6:	4602      	mov	r2, r0
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	1ad3      	subs	r3, r2, r3
 80005ec:	687a      	ldr	r2, [r7, #4]
 80005ee:	429a      	cmp	r2, r3
 80005f0:	d201      	bcs.n	80005f6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80005f2:	2303      	movs	r3, #3
 80005f4:	e025      	b.n	8000642 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80005f6:	4b15      	ldr	r3, [pc, #84]	; (800064c <FLASH_WaitForLastOperation+0x88>)
 80005f8:	68db      	ldr	r3, [r3, #12]
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d1e8      	bne.n	80005d4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000602:	4b12      	ldr	r3, [pc, #72]	; (800064c <FLASH_WaitForLastOperation+0x88>)
 8000604:	68db      	ldr	r3, [r3, #12]
 8000606:	f003 0320 	and.w	r3, r3, #32
 800060a:	2b00      	cmp	r3, #0
 800060c:	d002      	beq.n	8000614 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800060e:	4b0f      	ldr	r3, [pc, #60]	; (800064c <FLASH_WaitForLastOperation+0x88>)
 8000610:	2220      	movs	r2, #32
 8000612:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000614:	4b0d      	ldr	r3, [pc, #52]	; (800064c <FLASH_WaitForLastOperation+0x88>)
 8000616:	68db      	ldr	r3, [r3, #12]
 8000618:	f003 0310 	and.w	r3, r3, #16
 800061c:	2b00      	cmp	r3, #0
 800061e:	d10b      	bne.n	8000638 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000620:	4b0a      	ldr	r3, [pc, #40]	; (800064c <FLASH_WaitForLastOperation+0x88>)
 8000622:	69db      	ldr	r3, [r3, #28]
 8000624:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000628:	2b00      	cmp	r3, #0
 800062a:	d105      	bne.n	8000638 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800062c:	4b07      	ldr	r3, [pc, #28]	; (800064c <FLASH_WaitForLastOperation+0x88>)
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000634:	2b00      	cmp	r3, #0
 8000636:	d003      	beq.n	8000640 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000638:	f000 f80a 	bl	8000650 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800063c:	2301      	movs	r3, #1
 800063e:	e000      	b.n	8000642 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8000640:	2300      	movs	r3, #0
}
 8000642:	4618      	mov	r0, r3
 8000644:	3710      	adds	r7, #16
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40022000 	.word	0x40022000

08000650 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8000656:	2300      	movs	r3, #0
 8000658:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800065a:	4b23      	ldr	r3, [pc, #140]	; (80006e8 <FLASH_SetErrorCode+0x98>)
 800065c:	68db      	ldr	r3, [r3, #12]
 800065e:	f003 0310 	and.w	r3, r3, #16
 8000662:	2b00      	cmp	r3, #0
 8000664:	d009      	beq.n	800067a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000666:	4b21      	ldr	r3, [pc, #132]	; (80006ec <FLASH_SetErrorCode+0x9c>)
 8000668:	69db      	ldr	r3, [r3, #28]
 800066a:	f043 0302 	orr.w	r3, r3, #2
 800066e:	4a1f      	ldr	r2, [pc, #124]	; (80006ec <FLASH_SetErrorCode+0x9c>)
 8000670:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	f043 0310 	orr.w	r3, r3, #16
 8000678:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800067a:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <FLASH_SetErrorCode+0x98>)
 800067c:	68db      	ldr	r3, [r3, #12]
 800067e:	f003 0304 	and.w	r3, r3, #4
 8000682:	2b00      	cmp	r3, #0
 8000684:	d009      	beq.n	800069a <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000686:	4b19      	ldr	r3, [pc, #100]	; (80006ec <FLASH_SetErrorCode+0x9c>)
 8000688:	69db      	ldr	r3, [r3, #28]
 800068a:	f043 0301 	orr.w	r3, r3, #1
 800068e:	4a17      	ldr	r2, [pc, #92]	; (80006ec <FLASH_SetErrorCode+0x9c>)
 8000690:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	f043 0304 	orr.w	r3, r3, #4
 8000698:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800069a:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <FLASH_SetErrorCode+0x98>)
 800069c:	69db      	ldr	r3, [r3, #28]
 800069e:	f003 0301 	and.w	r3, r3, #1
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d00b      	beq.n	80006be <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80006a6:	4b11      	ldr	r3, [pc, #68]	; (80006ec <FLASH_SetErrorCode+0x9c>)
 80006a8:	69db      	ldr	r3, [r3, #28]
 80006aa:	f043 0304 	orr.w	r3, r3, #4
 80006ae:	4a0f      	ldr	r2, [pc, #60]	; (80006ec <FLASH_SetErrorCode+0x9c>)
 80006b0:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80006b2:	4b0d      	ldr	r3, [pc, #52]	; (80006e8 <FLASH_SetErrorCode+0x98>)
 80006b4:	69db      	ldr	r3, [r3, #28]
 80006b6:	4a0c      	ldr	r2, [pc, #48]	; (80006e8 <FLASH_SetErrorCode+0x98>)
 80006b8:	f023 0301 	bic.w	r3, r3, #1
 80006bc:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	f240 1201 	movw	r2, #257	; 0x101
 80006c4:	4293      	cmp	r3, r2
 80006c6:	d106      	bne.n	80006d6 <FLASH_SetErrorCode+0x86>
 80006c8:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <FLASH_SetErrorCode+0x98>)
 80006ca:	69db      	ldr	r3, [r3, #28]
 80006cc:	4a06      	ldr	r2, [pc, #24]	; (80006e8 <FLASH_SetErrorCode+0x98>)
 80006ce:	f023 0301 	bic.w	r3, r3, #1
 80006d2:	61d3      	str	r3, [r2, #28]
}  
 80006d4:	e002      	b.n	80006dc <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80006d6:	4a04      	ldr	r2, [pc, #16]	; (80006e8 <FLASH_SetErrorCode+0x98>)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	60d3      	str	r3, [r2, #12]
}  
 80006dc:	bf00      	nop
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bc80      	pop	{r7}
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	40022000 	.word	0x40022000
 80006ec:	20000030 	.word	0x20000030

080006f0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80006fa:	2301      	movs	r3, #1
 80006fc:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80006fe:	2300      	movs	r3, #0
 8000700:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000702:	4b2f      	ldr	r3, [pc, #188]	; (80007c0 <HAL_FLASHEx_Erase+0xd0>)
 8000704:	7e1b      	ldrb	r3, [r3, #24]
 8000706:	2b01      	cmp	r3, #1
 8000708:	d101      	bne.n	800070e <HAL_FLASHEx_Erase+0x1e>
 800070a:	2302      	movs	r3, #2
 800070c:	e053      	b.n	80007b6 <HAL_FLASHEx_Erase+0xc6>
 800070e:	4b2c      	ldr	r3, [pc, #176]	; (80007c0 <HAL_FLASHEx_Erase+0xd0>)
 8000710:	2201      	movs	r2, #1
 8000712:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	2b02      	cmp	r3, #2
 800071a:	d116      	bne.n	800074a <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800071c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000720:	f7ff ff50 	bl	80005c4 <FLASH_WaitForLastOperation>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d141      	bne.n	80007ae <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800072a:	2001      	movs	r0, #1
 800072c:	f000 f84c 	bl	80007c8 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000730:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000734:	f7ff ff46 	bl	80005c4 <FLASH_WaitForLastOperation>
 8000738:	4603      	mov	r3, r0
 800073a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800073c:	4b21      	ldr	r3, [pc, #132]	; (80007c4 <HAL_FLASHEx_Erase+0xd4>)
 800073e:	691b      	ldr	r3, [r3, #16]
 8000740:	4a20      	ldr	r2, [pc, #128]	; (80007c4 <HAL_FLASHEx_Erase+0xd4>)
 8000742:	f023 0304 	bic.w	r3, r3, #4
 8000746:	6113      	str	r3, [r2, #16]
 8000748:	e031      	b.n	80007ae <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800074a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800074e:	f7ff ff39 	bl	80005c4 <FLASH_WaitForLastOperation>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d12a      	bne.n	80007ae <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800075e:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	689b      	ldr	r3, [r3, #8]
 8000764:	60bb      	str	r3, [r7, #8]
 8000766:	e019      	b.n	800079c <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8000768:	68b8      	ldr	r0, [r7, #8]
 800076a:	f000 f849 	bl	8000800 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800076e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000772:	f7ff ff27 	bl	80005c4 <FLASH_WaitForLastOperation>
 8000776:	4603      	mov	r3, r0
 8000778:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800077a:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <HAL_FLASHEx_Erase+0xd4>)
 800077c:	691b      	ldr	r3, [r3, #16]
 800077e:	4a11      	ldr	r2, [pc, #68]	; (80007c4 <HAL_FLASHEx_Erase+0xd4>)
 8000780:	f023 0302 	bic.w	r3, r3, #2
 8000784:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8000786:	7bfb      	ldrb	r3, [r7, #15]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d003      	beq.n	8000794 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	68ba      	ldr	r2, [r7, #8]
 8000790:	601a      	str	r2, [r3, #0]
            break;
 8000792:	e00c      	b.n	80007ae <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800079a:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	68db      	ldr	r3, [r3, #12]
 80007a0:	029a      	lsls	r2, r3, #10
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	689b      	ldr	r3, [r3, #8]
 80007a6:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80007a8:	68ba      	ldr	r2, [r7, #8]
 80007aa:	429a      	cmp	r2, r3
 80007ac:	d3dc      	bcc.n	8000768 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80007ae:	4b04      	ldr	r3, [pc, #16]	; (80007c0 <HAL_FLASHEx_Erase+0xd0>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	761a      	strb	r2, [r3, #24]

  return status;
 80007b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3710      	adds	r7, #16
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000030 	.word	0x20000030
 80007c4:	40022000 	.word	0x40022000

080007c8 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80007d0:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <FLASH_MassErase+0x30>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <FLASH_MassErase+0x34>)
 80007d8:	691b      	ldr	r3, [r3, #16]
 80007da:	4a08      	ldr	r2, [pc, #32]	; (80007fc <FLASH_MassErase+0x34>)
 80007dc:	f043 0304 	orr.w	r3, r3, #4
 80007e0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80007e2:	4b06      	ldr	r3, [pc, #24]	; (80007fc <FLASH_MassErase+0x34>)
 80007e4:	691b      	ldr	r3, [r3, #16]
 80007e6:	4a05      	ldr	r2, [pc, #20]	; (80007fc <FLASH_MassErase+0x34>)
 80007e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007ec:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80007ee:	bf00      	nop
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr
 80007f8:	20000030 	.word	0x20000030
 80007fc:	40022000 	.word	0x40022000

08000800 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000808:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <FLASH_PageErase+0x38>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800080e:	4b0b      	ldr	r3, [pc, #44]	; (800083c <FLASH_PageErase+0x3c>)
 8000810:	691b      	ldr	r3, [r3, #16]
 8000812:	4a0a      	ldr	r2, [pc, #40]	; (800083c <FLASH_PageErase+0x3c>)
 8000814:	f043 0302 	orr.w	r3, r3, #2
 8000818:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800081a:	4a08      	ldr	r2, [pc, #32]	; (800083c <FLASH_PageErase+0x3c>)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <FLASH_PageErase+0x3c>)
 8000822:	691b      	ldr	r3, [r3, #16]
 8000824:	4a05      	ldr	r2, [pc, #20]	; (800083c <FLASH_PageErase+0x3c>)
 8000826:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800082a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800082c:	bf00      	nop
 800082e:	370c      	adds	r7, #12
 8000830:	46bd      	mov	sp, r7
 8000832:	bc80      	pop	{r7}
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	20000030 	.word	0x20000030
 800083c:	40022000 	.word	0x40022000

08000840 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d101      	bne.n	8000852 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800084e:	2301      	movs	r3, #1
 8000850:	e26c      	b.n	8000d2c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	2b00      	cmp	r3, #0
 800085c:	f000 8087 	beq.w	800096e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000860:	4b92      	ldr	r3, [pc, #584]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 8000862:	685b      	ldr	r3, [r3, #4]
 8000864:	f003 030c 	and.w	r3, r3, #12
 8000868:	2b04      	cmp	r3, #4
 800086a:	d00c      	beq.n	8000886 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800086c:	4b8f      	ldr	r3, [pc, #572]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	f003 030c 	and.w	r3, r3, #12
 8000874:	2b08      	cmp	r3, #8
 8000876:	d112      	bne.n	800089e <HAL_RCC_OscConfig+0x5e>
 8000878:	4b8c      	ldr	r3, [pc, #560]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 800087a:	685b      	ldr	r3, [r3, #4]
 800087c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000884:	d10b      	bne.n	800089e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000886:	4b89      	ldr	r3, [pc, #548]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800088e:	2b00      	cmp	r3, #0
 8000890:	d06c      	beq.n	800096c <HAL_RCC_OscConfig+0x12c>
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d168      	bne.n	800096c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800089a:	2301      	movs	r3, #1
 800089c:	e246      	b.n	8000d2c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008a6:	d106      	bne.n	80008b6 <HAL_RCC_OscConfig+0x76>
 80008a8:	4b80      	ldr	r3, [pc, #512]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a7f      	ldr	r2, [pc, #508]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 80008ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008b2:	6013      	str	r3, [r2, #0]
 80008b4:	e02e      	b.n	8000914 <HAL_RCC_OscConfig+0xd4>
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d10c      	bne.n	80008d8 <HAL_RCC_OscConfig+0x98>
 80008be:	4b7b      	ldr	r3, [pc, #492]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4a7a      	ldr	r2, [pc, #488]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 80008c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008c8:	6013      	str	r3, [r2, #0]
 80008ca:	4b78      	ldr	r3, [pc, #480]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a77      	ldr	r2, [pc, #476]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 80008d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008d4:	6013      	str	r3, [r2, #0]
 80008d6:	e01d      	b.n	8000914 <HAL_RCC_OscConfig+0xd4>
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80008e0:	d10c      	bne.n	80008fc <HAL_RCC_OscConfig+0xbc>
 80008e2:	4b72      	ldr	r3, [pc, #456]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4a71      	ldr	r2, [pc, #452]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 80008e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008ec:	6013      	str	r3, [r2, #0]
 80008ee:	4b6f      	ldr	r3, [pc, #444]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4a6e      	ldr	r2, [pc, #440]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 80008f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008f8:	6013      	str	r3, [r2, #0]
 80008fa:	e00b      	b.n	8000914 <HAL_RCC_OscConfig+0xd4>
 80008fc:	4b6b      	ldr	r3, [pc, #428]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a6a      	ldr	r2, [pc, #424]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 8000902:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000906:	6013      	str	r3, [r2, #0]
 8000908:	4b68      	ldr	r3, [pc, #416]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a67      	ldr	r2, [pc, #412]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 800090e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000912:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d013      	beq.n	8000944 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800091c:	f7ff fc76 	bl	800020c <HAL_GetTick>
 8000920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000922:	e008      	b.n	8000936 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000924:	f7ff fc72 	bl	800020c <HAL_GetTick>
 8000928:	4602      	mov	r2, r0
 800092a:	693b      	ldr	r3, [r7, #16]
 800092c:	1ad3      	subs	r3, r2, r3
 800092e:	2b64      	cmp	r3, #100	; 0x64
 8000930:	d901      	bls.n	8000936 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000932:	2303      	movs	r3, #3
 8000934:	e1fa      	b.n	8000d2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000936:	4b5d      	ldr	r3, [pc, #372]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800093e:	2b00      	cmp	r3, #0
 8000940:	d0f0      	beq.n	8000924 <HAL_RCC_OscConfig+0xe4>
 8000942:	e014      	b.n	800096e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000944:	f7ff fc62 	bl	800020c <HAL_GetTick>
 8000948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800094a:	e008      	b.n	800095e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800094c:	f7ff fc5e 	bl	800020c <HAL_GetTick>
 8000950:	4602      	mov	r2, r0
 8000952:	693b      	ldr	r3, [r7, #16]
 8000954:	1ad3      	subs	r3, r2, r3
 8000956:	2b64      	cmp	r3, #100	; 0x64
 8000958:	d901      	bls.n	800095e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800095a:	2303      	movs	r3, #3
 800095c:	e1e6      	b.n	8000d2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800095e:	4b53      	ldr	r3, [pc, #332]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000966:	2b00      	cmp	r3, #0
 8000968:	d1f0      	bne.n	800094c <HAL_RCC_OscConfig+0x10c>
 800096a:	e000      	b.n	800096e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800096c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	f003 0302 	and.w	r3, r3, #2
 8000976:	2b00      	cmp	r3, #0
 8000978:	d063      	beq.n	8000a42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800097a:	4b4c      	ldr	r3, [pc, #304]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	f003 030c 	and.w	r3, r3, #12
 8000982:	2b00      	cmp	r3, #0
 8000984:	d00b      	beq.n	800099e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000986:	4b49      	ldr	r3, [pc, #292]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	f003 030c 	and.w	r3, r3, #12
 800098e:	2b08      	cmp	r3, #8
 8000990:	d11c      	bne.n	80009cc <HAL_RCC_OscConfig+0x18c>
 8000992:	4b46      	ldr	r3, [pc, #280]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800099a:	2b00      	cmp	r3, #0
 800099c:	d116      	bne.n	80009cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800099e:	4b43      	ldr	r3, [pc, #268]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f003 0302 	and.w	r3, r3, #2
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d005      	beq.n	80009b6 <HAL_RCC_OscConfig+0x176>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	691b      	ldr	r3, [r3, #16]
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d001      	beq.n	80009b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80009b2:	2301      	movs	r3, #1
 80009b4:	e1ba      	b.n	8000d2c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009b6:	4b3d      	ldr	r3, [pc, #244]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	695b      	ldr	r3, [r3, #20]
 80009c2:	00db      	lsls	r3, r3, #3
 80009c4:	4939      	ldr	r1, [pc, #228]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 80009c6:	4313      	orrs	r3, r2
 80009c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009ca:	e03a      	b.n	8000a42 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	691b      	ldr	r3, [r3, #16]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d020      	beq.n	8000a16 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80009d4:	4b36      	ldr	r3, [pc, #216]	; (8000ab0 <HAL_RCC_OscConfig+0x270>)
 80009d6:	2201      	movs	r2, #1
 80009d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009da:	f7ff fc17 	bl	800020c <HAL_GetTick>
 80009de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009e0:	e008      	b.n	80009f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80009e2:	f7ff fc13 	bl	800020c <HAL_GetTick>
 80009e6:	4602      	mov	r2, r0
 80009e8:	693b      	ldr	r3, [r7, #16]
 80009ea:	1ad3      	subs	r3, r2, r3
 80009ec:	2b02      	cmp	r3, #2
 80009ee:	d901      	bls.n	80009f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80009f0:	2303      	movs	r3, #3
 80009f2:	e19b      	b.n	8000d2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009f4:	4b2d      	ldr	r3, [pc, #180]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f003 0302 	and.w	r3, r3, #2
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d0f0      	beq.n	80009e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a00:	4b2a      	ldr	r3, [pc, #168]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	695b      	ldr	r3, [r3, #20]
 8000a0c:	00db      	lsls	r3, r3, #3
 8000a0e:	4927      	ldr	r1, [pc, #156]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 8000a10:	4313      	orrs	r3, r2
 8000a12:	600b      	str	r3, [r1, #0]
 8000a14:	e015      	b.n	8000a42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000a16:	4b26      	ldr	r3, [pc, #152]	; (8000ab0 <HAL_RCC_OscConfig+0x270>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a1c:	f7ff fbf6 	bl	800020c <HAL_GetTick>
 8000a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a22:	e008      	b.n	8000a36 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000a24:	f7ff fbf2 	bl	800020c <HAL_GetTick>
 8000a28:	4602      	mov	r2, r0
 8000a2a:	693b      	ldr	r3, [r7, #16]
 8000a2c:	1ad3      	subs	r3, r2, r3
 8000a2e:	2b02      	cmp	r3, #2
 8000a30:	d901      	bls.n	8000a36 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000a32:	2303      	movs	r3, #3
 8000a34:	e17a      	b.n	8000d2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a36:	4b1d      	ldr	r3, [pc, #116]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f003 0302 	and.w	r3, r3, #2
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d1f0      	bne.n	8000a24 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f003 0308 	and.w	r3, r3, #8
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d03a      	beq.n	8000ac4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	699b      	ldr	r3, [r3, #24]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d019      	beq.n	8000a8a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000a56:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <HAL_RCC_OscConfig+0x274>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a5c:	f7ff fbd6 	bl	800020c <HAL_GetTick>
 8000a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a62:	e008      	b.n	8000a76 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000a64:	f7ff fbd2 	bl	800020c <HAL_GetTick>
 8000a68:	4602      	mov	r2, r0
 8000a6a:	693b      	ldr	r3, [r7, #16]
 8000a6c:	1ad3      	subs	r3, r2, r3
 8000a6e:	2b02      	cmp	r3, #2
 8000a70:	d901      	bls.n	8000a76 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000a72:	2303      	movs	r3, #3
 8000a74:	e15a      	b.n	8000d2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a76:	4b0d      	ldr	r3, [pc, #52]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 8000a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a7a:	f003 0302 	and.w	r3, r3, #2
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d0f0      	beq.n	8000a64 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000a82:	2001      	movs	r0, #1
 8000a84:	f000 faa8 	bl	8000fd8 <RCC_Delay>
 8000a88:	e01c      	b.n	8000ac4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000a8a:	4b0a      	ldr	r3, [pc, #40]	; (8000ab4 <HAL_RCC_OscConfig+0x274>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a90:	f7ff fbbc 	bl	800020c <HAL_GetTick>
 8000a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a96:	e00f      	b.n	8000ab8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000a98:	f7ff fbb8 	bl	800020c <HAL_GetTick>
 8000a9c:	4602      	mov	r2, r0
 8000a9e:	693b      	ldr	r3, [r7, #16]
 8000aa0:	1ad3      	subs	r3, r2, r3
 8000aa2:	2b02      	cmp	r3, #2
 8000aa4:	d908      	bls.n	8000ab8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	e140      	b.n	8000d2c <HAL_RCC_OscConfig+0x4ec>
 8000aaa:	bf00      	nop
 8000aac:	40021000 	.word	0x40021000
 8000ab0:	42420000 	.word	0x42420000
 8000ab4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ab8:	4b9e      	ldr	r3, [pc, #632]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000abc:	f003 0302 	and.w	r3, r3, #2
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d1e9      	bne.n	8000a98 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f003 0304 	and.w	r3, r3, #4
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	f000 80a6 	beq.w	8000c1e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ad6:	4b97      	ldr	r3, [pc, #604]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000ad8:	69db      	ldr	r3, [r3, #28]
 8000ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d10d      	bne.n	8000afe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ae2:	4b94      	ldr	r3, [pc, #592]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000ae4:	69db      	ldr	r3, [r3, #28]
 8000ae6:	4a93      	ldr	r2, [pc, #588]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aec:	61d3      	str	r3, [r2, #28]
 8000aee:	4b91      	ldr	r3, [pc, #580]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000af0:	69db      	ldr	r3, [r3, #28]
 8000af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af6:	60bb      	str	r3, [r7, #8]
 8000af8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000afa:	2301      	movs	r3, #1
 8000afc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000afe:	4b8e      	ldr	r3, [pc, #568]	; (8000d38 <HAL_RCC_OscConfig+0x4f8>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d118      	bne.n	8000b3c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b0a:	4b8b      	ldr	r3, [pc, #556]	; (8000d38 <HAL_RCC_OscConfig+0x4f8>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a8a      	ldr	r2, [pc, #552]	; (8000d38 <HAL_RCC_OscConfig+0x4f8>)
 8000b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000b16:	f7ff fb79 	bl	800020c <HAL_GetTick>
 8000b1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b1c:	e008      	b.n	8000b30 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b1e:	f7ff fb75 	bl	800020c <HAL_GetTick>
 8000b22:	4602      	mov	r2, r0
 8000b24:	693b      	ldr	r3, [r7, #16]
 8000b26:	1ad3      	subs	r3, r2, r3
 8000b28:	2b64      	cmp	r3, #100	; 0x64
 8000b2a:	d901      	bls.n	8000b30 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	e0fd      	b.n	8000d2c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b30:	4b81      	ldr	r3, [pc, #516]	; (8000d38 <HAL_RCC_OscConfig+0x4f8>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d0f0      	beq.n	8000b1e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d106      	bne.n	8000b52 <HAL_RCC_OscConfig+0x312>
 8000b44:	4b7b      	ldr	r3, [pc, #492]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000b46:	6a1b      	ldr	r3, [r3, #32]
 8000b48:	4a7a      	ldr	r2, [pc, #488]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000b4a:	f043 0301 	orr.w	r3, r3, #1
 8000b4e:	6213      	str	r3, [r2, #32]
 8000b50:	e02d      	b.n	8000bae <HAL_RCC_OscConfig+0x36e>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	68db      	ldr	r3, [r3, #12]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d10c      	bne.n	8000b74 <HAL_RCC_OscConfig+0x334>
 8000b5a:	4b76      	ldr	r3, [pc, #472]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000b5c:	6a1b      	ldr	r3, [r3, #32]
 8000b5e:	4a75      	ldr	r2, [pc, #468]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000b60:	f023 0301 	bic.w	r3, r3, #1
 8000b64:	6213      	str	r3, [r2, #32]
 8000b66:	4b73      	ldr	r3, [pc, #460]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000b68:	6a1b      	ldr	r3, [r3, #32]
 8000b6a:	4a72      	ldr	r2, [pc, #456]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000b6c:	f023 0304 	bic.w	r3, r3, #4
 8000b70:	6213      	str	r3, [r2, #32]
 8000b72:	e01c      	b.n	8000bae <HAL_RCC_OscConfig+0x36e>
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	2b05      	cmp	r3, #5
 8000b7a:	d10c      	bne.n	8000b96 <HAL_RCC_OscConfig+0x356>
 8000b7c:	4b6d      	ldr	r3, [pc, #436]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000b7e:	6a1b      	ldr	r3, [r3, #32]
 8000b80:	4a6c      	ldr	r2, [pc, #432]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000b82:	f043 0304 	orr.w	r3, r3, #4
 8000b86:	6213      	str	r3, [r2, #32]
 8000b88:	4b6a      	ldr	r3, [pc, #424]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000b8a:	6a1b      	ldr	r3, [r3, #32]
 8000b8c:	4a69      	ldr	r2, [pc, #420]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000b8e:	f043 0301 	orr.w	r3, r3, #1
 8000b92:	6213      	str	r3, [r2, #32]
 8000b94:	e00b      	b.n	8000bae <HAL_RCC_OscConfig+0x36e>
 8000b96:	4b67      	ldr	r3, [pc, #412]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000b98:	6a1b      	ldr	r3, [r3, #32]
 8000b9a:	4a66      	ldr	r2, [pc, #408]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000b9c:	f023 0301 	bic.w	r3, r3, #1
 8000ba0:	6213      	str	r3, [r2, #32]
 8000ba2:	4b64      	ldr	r3, [pc, #400]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000ba4:	6a1b      	ldr	r3, [r3, #32]
 8000ba6:	4a63      	ldr	r2, [pc, #396]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000ba8:	f023 0304 	bic.w	r3, r3, #4
 8000bac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	68db      	ldr	r3, [r3, #12]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d015      	beq.n	8000be2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bb6:	f7ff fb29 	bl	800020c <HAL_GetTick>
 8000bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000bbc:	e00a      	b.n	8000bd4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000bbe:	f7ff fb25 	bl	800020c <HAL_GetTick>
 8000bc2:	4602      	mov	r2, r0
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	1ad3      	subs	r3, r2, r3
 8000bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d901      	bls.n	8000bd4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	e0ab      	b.n	8000d2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000bd4:	4b57      	ldr	r3, [pc, #348]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000bd6:	6a1b      	ldr	r3, [r3, #32]
 8000bd8:	f003 0302 	and.w	r3, r3, #2
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d0ee      	beq.n	8000bbe <HAL_RCC_OscConfig+0x37e>
 8000be0:	e014      	b.n	8000c0c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000be2:	f7ff fb13 	bl	800020c <HAL_GetTick>
 8000be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000be8:	e00a      	b.n	8000c00 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000bea:	f7ff fb0f 	bl	800020c <HAL_GetTick>
 8000bee:	4602      	mov	r2, r0
 8000bf0:	693b      	ldr	r3, [r7, #16]
 8000bf2:	1ad3      	subs	r3, r2, r3
 8000bf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d901      	bls.n	8000c00 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	e095      	b.n	8000d2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c00:	4b4c      	ldr	r3, [pc, #304]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000c02:	6a1b      	ldr	r3, [r3, #32]
 8000c04:	f003 0302 	and.w	r3, r3, #2
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d1ee      	bne.n	8000bea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000c0c:	7dfb      	ldrb	r3, [r7, #23]
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d105      	bne.n	8000c1e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c12:	4b48      	ldr	r3, [pc, #288]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000c14:	69db      	ldr	r3, [r3, #28]
 8000c16:	4a47      	ldr	r2, [pc, #284]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000c18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c1c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	69db      	ldr	r3, [r3, #28]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f000 8081 	beq.w	8000d2a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c28:	4b42      	ldr	r3, [pc, #264]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	f003 030c 	and.w	r3, r3, #12
 8000c30:	2b08      	cmp	r3, #8
 8000c32:	d061      	beq.n	8000cf8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	69db      	ldr	r3, [r3, #28]
 8000c38:	2b02      	cmp	r3, #2
 8000c3a:	d146      	bne.n	8000cca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c3c:	4b3f      	ldr	r3, [pc, #252]	; (8000d3c <HAL_RCC_OscConfig+0x4fc>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c42:	f7ff fae3 	bl	800020c <HAL_GetTick>
 8000c46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c48:	e008      	b.n	8000c5c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c4a:	f7ff fadf 	bl	800020c <HAL_GetTick>
 8000c4e:	4602      	mov	r2, r0
 8000c50:	693b      	ldr	r3, [r7, #16]
 8000c52:	1ad3      	subs	r3, r2, r3
 8000c54:	2b02      	cmp	r3, #2
 8000c56:	d901      	bls.n	8000c5c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000c58:	2303      	movs	r3, #3
 8000c5a:	e067      	b.n	8000d2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c5c:	4b35      	ldr	r3, [pc, #212]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d1f0      	bne.n	8000c4a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6a1b      	ldr	r3, [r3, #32]
 8000c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c70:	d108      	bne.n	8000c84 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000c72:	4b30      	ldr	r3, [pc, #192]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	492d      	ldr	r1, [pc, #180]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000c80:	4313      	orrs	r3, r2
 8000c82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c84:	4b2b      	ldr	r3, [pc, #172]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6a19      	ldr	r1, [r3, #32]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c94:	430b      	orrs	r3, r1
 8000c96:	4927      	ldr	r1, [pc, #156]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000c9c:	4b27      	ldr	r3, [pc, #156]	; (8000d3c <HAL_RCC_OscConfig+0x4fc>)
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ca2:	f7ff fab3 	bl	800020c <HAL_GetTick>
 8000ca6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ca8:	e008      	b.n	8000cbc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000caa:	f7ff faaf 	bl	800020c <HAL_GetTick>
 8000cae:	4602      	mov	r2, r0
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	1ad3      	subs	r3, r2, r3
 8000cb4:	2b02      	cmp	r3, #2
 8000cb6:	d901      	bls.n	8000cbc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	e037      	b.n	8000d2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000cbc:	4b1d      	ldr	r3, [pc, #116]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d0f0      	beq.n	8000caa <HAL_RCC_OscConfig+0x46a>
 8000cc8:	e02f      	b.n	8000d2a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000cca:	4b1c      	ldr	r3, [pc, #112]	; (8000d3c <HAL_RCC_OscConfig+0x4fc>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cd0:	f7ff fa9c 	bl	800020c <HAL_GetTick>
 8000cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000cd6:	e008      	b.n	8000cea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000cd8:	f7ff fa98 	bl	800020c <HAL_GetTick>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	2b02      	cmp	r3, #2
 8000ce4:	d901      	bls.n	8000cea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	e020      	b.n	8000d2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000cea:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d1f0      	bne.n	8000cd8 <HAL_RCC_OscConfig+0x498>
 8000cf6:	e018      	b.n	8000d2a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	69db      	ldr	r3, [r3, #28]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d101      	bne.n	8000d04 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000d00:	2301      	movs	r3, #1
 8000d02:	e013      	b.n	8000d2c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000d04:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6a1b      	ldr	r3, [r3, #32]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d106      	bne.n	8000d26 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d001      	beq.n	8000d2a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	e000      	b.n	8000d2c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000d2a:	2300      	movs	r3, #0
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3718      	adds	r7, #24
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40021000 	.word	0x40021000
 8000d38:	40007000 	.word	0x40007000
 8000d3c:	42420060 	.word	0x42420060

08000d40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d101      	bne.n	8000d54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000d50:	2301      	movs	r3, #1
 8000d52:	e0d0      	b.n	8000ef6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000d54:	4b6a      	ldr	r3, [pc, #424]	; (8000f00 <HAL_RCC_ClockConfig+0x1c0>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f003 0307 	and.w	r3, r3, #7
 8000d5c:	683a      	ldr	r2, [r7, #0]
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	d910      	bls.n	8000d84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d62:	4b67      	ldr	r3, [pc, #412]	; (8000f00 <HAL_RCC_ClockConfig+0x1c0>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f023 0207 	bic.w	r2, r3, #7
 8000d6a:	4965      	ldr	r1, [pc, #404]	; (8000f00 <HAL_RCC_ClockConfig+0x1c0>)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d72:	4b63      	ldr	r3, [pc, #396]	; (8000f00 <HAL_RCC_ClockConfig+0x1c0>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f003 0307 	and.w	r3, r3, #7
 8000d7a:	683a      	ldr	r2, [r7, #0]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d001      	beq.n	8000d84 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000d80:	2301      	movs	r3, #1
 8000d82:	e0b8      	b.n	8000ef6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f003 0302 	and.w	r3, r3, #2
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d020      	beq.n	8000dd2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f003 0304 	and.w	r3, r3, #4
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d005      	beq.n	8000da8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d9c:	4b59      	ldr	r3, [pc, #356]	; (8000f04 <HAL_RCC_ClockConfig+0x1c4>)
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	4a58      	ldr	r2, [pc, #352]	; (8000f04 <HAL_RCC_ClockConfig+0x1c4>)
 8000da2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000da6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f003 0308 	and.w	r3, r3, #8
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d005      	beq.n	8000dc0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000db4:	4b53      	ldr	r3, [pc, #332]	; (8000f04 <HAL_RCC_ClockConfig+0x1c4>)
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	4a52      	ldr	r2, [pc, #328]	; (8000f04 <HAL_RCC_ClockConfig+0x1c4>)
 8000dba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000dbe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000dc0:	4b50      	ldr	r3, [pc, #320]	; (8000f04 <HAL_RCC_ClockConfig+0x1c4>)
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	494d      	ldr	r1, [pc, #308]	; (8000f04 <HAL_RCC_ClockConfig+0x1c4>)
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d040      	beq.n	8000e60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d107      	bne.n	8000df6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000de6:	4b47      	ldr	r3, [pc, #284]	; (8000f04 <HAL_RCC_ClockConfig+0x1c4>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d115      	bne.n	8000e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	e07f      	b.n	8000ef6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	d107      	bne.n	8000e0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000dfe:	4b41      	ldr	r3, [pc, #260]	; (8000f04 <HAL_RCC_ClockConfig+0x1c4>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d109      	bne.n	8000e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e073      	b.n	8000ef6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e0e:	4b3d      	ldr	r3, [pc, #244]	; (8000f04 <HAL_RCC_ClockConfig+0x1c4>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f003 0302 	and.w	r3, r3, #2
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d101      	bne.n	8000e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e06b      	b.n	8000ef6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e1e:	4b39      	ldr	r3, [pc, #228]	; (8000f04 <HAL_RCC_ClockConfig+0x1c4>)
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f023 0203 	bic.w	r2, r3, #3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	4936      	ldr	r1, [pc, #216]	; (8000f04 <HAL_RCC_ClockConfig+0x1c4>)
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000e30:	f7ff f9ec 	bl	800020c <HAL_GetTick>
 8000e34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e36:	e00a      	b.n	8000e4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e38:	f7ff f9e8 	bl	800020c <HAL_GetTick>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d901      	bls.n	8000e4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	e053      	b.n	8000ef6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e4e:	4b2d      	ldr	r3, [pc, #180]	; (8000f04 <HAL_RCC_ClockConfig+0x1c4>)
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f003 020c 	and.w	r2, r3, #12
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d1eb      	bne.n	8000e38 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000e60:	4b27      	ldr	r3, [pc, #156]	; (8000f00 <HAL_RCC_ClockConfig+0x1c0>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f003 0307 	and.w	r3, r3, #7
 8000e68:	683a      	ldr	r2, [r7, #0]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	d210      	bcs.n	8000e90 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e6e:	4b24      	ldr	r3, [pc, #144]	; (8000f00 <HAL_RCC_ClockConfig+0x1c0>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f023 0207 	bic.w	r2, r3, #7
 8000e76:	4922      	ldr	r1, [pc, #136]	; (8000f00 <HAL_RCC_ClockConfig+0x1c0>)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e7e:	4b20      	ldr	r3, [pc, #128]	; (8000f00 <HAL_RCC_ClockConfig+0x1c0>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	683a      	ldr	r2, [r7, #0]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d001      	beq.n	8000e90 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	e032      	b.n	8000ef6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f003 0304 	and.w	r3, r3, #4
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d008      	beq.n	8000eae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e9c:	4b19      	ldr	r3, [pc, #100]	; (8000f04 <HAL_RCC_ClockConfig+0x1c4>)
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	4916      	ldr	r1, [pc, #88]	; (8000f04 <HAL_RCC_ClockConfig+0x1c4>)
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f003 0308 	and.w	r3, r3, #8
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d009      	beq.n	8000ece <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000eba:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <HAL_RCC_ClockConfig+0x1c4>)
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	691b      	ldr	r3, [r3, #16]
 8000ec6:	00db      	lsls	r3, r3, #3
 8000ec8:	490e      	ldr	r1, [pc, #56]	; (8000f04 <HAL_RCC_ClockConfig+0x1c4>)
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000ece:	f000 f821 	bl	8000f14 <HAL_RCC_GetSysClockFreq>
 8000ed2:	4601      	mov	r1, r0
 8000ed4:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <HAL_RCC_ClockConfig+0x1c4>)
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	091b      	lsrs	r3, r3, #4
 8000eda:	f003 030f 	and.w	r3, r3, #15
 8000ede:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <HAL_RCC_ClockConfig+0x1c8>)
 8000ee0:	5cd3      	ldrb	r3, [r2, r3]
 8000ee2:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee6:	4a09      	ldr	r2, [pc, #36]	; (8000f0c <HAL_RCC_ClockConfig+0x1cc>)
 8000ee8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000eea:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <HAL_RCC_ClockConfig+0x1d0>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff f94a 	bl	8000188 <HAL_InitTick>

  return HAL_OK;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40022000 	.word	0x40022000
 8000f04:	40021000 	.word	0x40021000
 8000f08:	08001568 	.word	0x08001568
 8000f0c:	20000008 	.word	0x20000008
 8000f10:	20000000 	.word	0x20000000

08000f14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000f14:	b490      	push	{r4, r7}
 8000f16:	b08a      	sub	sp, #40	; 0x28
 8000f18:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000f1a:	4b2a      	ldr	r3, [pc, #168]	; (8000fc4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000f1c:	1d3c      	adds	r4, r7, #4
 8000f1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000f24:	4b28      	ldr	r3, [pc, #160]	; (8000fc8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000f26:	881b      	ldrh	r3, [r3, #0]
 8000f28:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61fb      	str	r3, [r7, #28]
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61bb      	str	r3, [r7, #24]
 8000f32:	2300      	movs	r3, #0
 8000f34:	627b      	str	r3, [r7, #36]	; 0x24
 8000f36:	2300      	movs	r3, #0
 8000f38:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000f3e:	4b23      	ldr	r3, [pc, #140]	; (8000fcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	f003 030c 	and.w	r3, r3, #12
 8000f4a:	2b04      	cmp	r3, #4
 8000f4c:	d002      	beq.n	8000f54 <HAL_RCC_GetSysClockFreq+0x40>
 8000f4e:	2b08      	cmp	r3, #8
 8000f50:	d003      	beq.n	8000f5a <HAL_RCC_GetSysClockFreq+0x46>
 8000f52:	e02d      	b.n	8000fb0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000f54:	4b1e      	ldr	r3, [pc, #120]	; (8000fd0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000f56:	623b      	str	r3, [r7, #32]
      break;
 8000f58:	e02d      	b.n	8000fb6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	0c9b      	lsrs	r3, r3, #18
 8000f5e:	f003 030f 	and.w	r3, r3, #15
 8000f62:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000f66:	4413      	add	r3, r2
 8000f68:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000f6c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d013      	beq.n	8000fa0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000f78:	4b14      	ldr	r3, [pc, #80]	; (8000fcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	0c5b      	lsrs	r3, r3, #17
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000f86:	4413      	add	r3, r2
 8000f88:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000f8c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	4a0f      	ldr	r2, [pc, #60]	; (8000fd0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000f92:	fb02 f203 	mul.w	r2, r2, r3
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8000f9e:	e004      	b.n	8000faa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	4a0c      	ldr	r2, [pc, #48]	; (8000fd4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000fa4:	fb02 f303 	mul.w	r3, r2, r3
 8000fa8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8000faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fac:	623b      	str	r3, [r7, #32]
      break;
 8000fae:	e002      	b.n	8000fb6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000fb0:	4b07      	ldr	r3, [pc, #28]	; (8000fd0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000fb2:	623b      	str	r3, [r7, #32]
      break;
 8000fb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000fb6:	6a3b      	ldr	r3, [r7, #32]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3728      	adds	r7, #40	; 0x28
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bc90      	pop	{r4, r7}
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	08001544 	.word	0x08001544
 8000fc8:	08001554 	.word	0x08001554
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	007a1200 	.word	0x007a1200
 8000fd4:	003d0900 	.word	0x003d0900

08000fd8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000fe0:	4b0a      	ldr	r3, [pc, #40]	; (800100c <RCC_Delay+0x34>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <RCC_Delay+0x38>)
 8000fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8000fea:	0a5b      	lsrs	r3, r3, #9
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	fb02 f303 	mul.w	r3, r2, r3
 8000ff2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8000ff4:	bf00      	nop
  }
  while (Delay --);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	1e5a      	subs	r2, r3, #1
 8000ffa:	60fa      	str	r2, [r7, #12]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d1f9      	bne.n	8000ff4 <RCC_Delay+0x1c>
}
 8001000:	bf00      	nop
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	bc80      	pop	{r7}
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	20000008 	.word	0x20000008
 8001010:	10624dd3 	.word	0x10624dd3

08001014 <save_to_flash>:
 *      Author: fabricio
 */
#include "flash.h"

void save_to_flash(uint8_t *data)
{
 8001014:	b5b0      	push	{r4, r5, r7, lr}
 8001016:	b08e      	sub	sp, #56	; 0x38
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	466b      	mov	r3, sp
 800101e:	461d      	mov	r5, r3
	volatile uint32_t data_to_FLASH[(strlen((char*)data)/4)	+ (int)((strlen((char*)data) % 4) != 0)];
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f7ff f893 	bl	800014c <strlen>
 8001026:	4603      	mov	r3, r0
 8001028:	089c      	lsrs	r4, r3, #2
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f7ff f88e 	bl	800014c <strlen>
 8001030:	4603      	mov	r3, r0
 8001032:	f003 0303 	and.w	r3, r3, #3
 8001036:	2b00      	cmp	r3, #0
 8001038:	bf14      	ite	ne
 800103a:	2301      	movne	r3, #1
 800103c:	2300      	moveq	r3, #0
 800103e:	b2db      	uxtb	r3, r3
 8001040:	18e0      	adds	r0, r4, r3
 8001042:	4603      	mov	r3, r0
 8001044:	3b01      	subs	r3, #1
 8001046:	637b      	str	r3, [r7, #52]	; 0x34
 8001048:	4601      	mov	r1, r0
 800104a:	f04f 0200 	mov.w	r2, #0
 800104e:	f04f 0300 	mov.w	r3, #0
 8001052:	f04f 0400 	mov.w	r4, #0
 8001056:	0154      	lsls	r4, r2, #5
 8001058:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800105c:	014b      	lsls	r3, r1, #5
 800105e:	4601      	mov	r1, r0
 8001060:	f04f 0200 	mov.w	r2, #0
 8001064:	f04f 0300 	mov.w	r3, #0
 8001068:	f04f 0400 	mov.w	r4, #0
 800106c:	0154      	lsls	r4, r2, #5
 800106e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001072:	014b      	lsls	r3, r1, #5
 8001074:	0083      	lsls	r3, r0, #2
 8001076:	3303      	adds	r3, #3
 8001078:	3307      	adds	r3, #7
 800107a:	08db      	lsrs	r3, r3, #3
 800107c:	00db      	lsls	r3, r3, #3
 800107e:	ebad 0d03 	sub.w	sp, sp, r3
 8001082:	466b      	mov	r3, sp
 8001084:	3303      	adds	r3, #3
 8001086:	089b      	lsrs	r3, r3, #2
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	633b      	str	r3, [r7, #48]	; 0x30
	memset((uint8_t*)data_to_FLASH, 0, strlen((char*)data_to_FLASH));
 800108c:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800108e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff f85b 	bl	800014c <strlen>
 8001096:	4603      	mov	r3, r0
 8001098:	461a      	mov	r2, r3
 800109a:	2100      	movs	r1, #0
 800109c:	4620      	mov	r0, r4
 800109e:	f000 fa35 	bl	800150c <memset>
	strcpy((char*)data_to_FLASH, (char*)data);
 80010a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010a4:	6879      	ldr	r1, [r7, #4]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f000 fa38 	bl	800151c <strcpy>

	volatile uint32_t data_length = (strlen((char*)data_to_FLASH) / 4)
 80010ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff f84c 	bl	800014c <strlen>
 80010b4:	4603      	mov	r3, r0
 80010b6:	089c      	lsrs	r4, r3, #2
									+ (int)((strlen((char*)data_to_FLASH) % 4) != 0);
 80010b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff f846 	bl	800014c <strlen>
 80010c0:	4603      	mov	r3, r0
 80010c2:	f003 0303 	and.w	r3, r3, #3
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	bf14      	ite	ne
 80010ca:	2301      	movne	r3, #1
 80010cc:	2300      	moveq	r3, #0
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	4423      	add	r3, r4
	volatile uint32_t data_length = (strlen((char*)data_to_FLASH) / 4)
 80010d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	volatile uint16_t pages = (strlen((char*)data)/page_size)
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff f839 	bl	800014c <strlen>
 80010da:	4603      	mov	r3, r0
 80010dc:	0adb      	lsrs	r3, r3, #11
									+ (int)((strlen((char*)data)%page_size) != 0);
 80010de:	b29c      	uxth	r4, r3
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f7ff f833 	bl	800014c <strlen>
 80010e6:	4603      	mov	r3, r0
 80010e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	bf14      	ite	ne
 80010f0:	2301      	movne	r3, #1
 80010f2:	2300      	moveq	r3, #0
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	4423      	add	r3, r4
 80010fa:	b29b      	uxth	r3, r3
	volatile uint16_t pages = (strlen((char*)data)/page_size)
 80010fc:	857b      	strh	r3, [r7, #42]	; 0x2a
	  /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 80010fe:	f7ff f9e3 	bl	80004c8 <HAL_FLASH_Unlock>

	  /* Allow Access to option bytes sector */
	  HAL_FLASH_OB_Unlock();
 8001102:	f7ff fa17 	bl	8000534 <HAL_FLASH_OB_Unlock>

	  /* Fill EraseInit structure*/
	  FLASH_EraseInitTypeDef EraseInitStruct;
	  EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8001106:	2300      	movs	r3, #0
 8001108:	61bb      	str	r3, [r7, #24]
	  EraseInitStruct.PageAddress = FLASH_STORAGE;
 800110a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800110e:	623b      	str	r3, [r7, #32]
	  EraseInitStruct.NbPages = pages;
 8001110:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001112:	b29b      	uxth	r3, r3
 8001114:	627b      	str	r3, [r7, #36]	; 0x24
	  uint32_t PageError;

	  volatile uint32_t write_cnt=0, index=0;
 8001116:	2300      	movs	r3, #0
 8001118:	613b      	str	r3, [r7, #16]
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]

	  volatile HAL_StatusTypeDef status;
	  status = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 800111e:	f107 0214 	add.w	r2, r7, #20
 8001122:	f107 0318 	add.w	r3, r7, #24
 8001126:	4611      	mov	r1, r2
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff fae1 	bl	80006f0 <HAL_FLASHEx_Erase>
 800112e:	4603      	mov	r3, r0
 8001130:	72fb      	strb	r3, [r7, #11]
	  while(index < data_length)
 8001132:	e01d      	b.n	8001170 <save_to_flash+0x15c>
	  {
		  if (status == HAL_OK)
 8001134:	7afb      	ldrb	r3, [r7, #11]
 8001136:	b2db      	uxtb	r3, r3
 8001138:	2b00      	cmp	r3, #0
 800113a:	d119      	bne.n	8001170 <save_to_flash+0x15c>
		  {
			  status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_STORAGE+write_cnt, data_to_FLASH[index]);
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 8001142:	68fa      	ldr	r2, [r7, #12]
 8001144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001146:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800114a:	f04f 0400 	mov.w	r4, #0
 800114e:	461a      	mov	r2, r3
 8001150:	4623      	mov	r3, r4
 8001152:	2002      	movs	r0, #2
 8001154:	f7ff f948 	bl	80003e8 <HAL_FLASH_Program>
 8001158:	4603      	mov	r3, r0
 800115a:	72fb      	strb	r3, [r7, #11]
			  if(status == HAL_OK)
 800115c:	7afb      	ldrb	r3, [r7, #11]
 800115e:	b2db      	uxtb	r3, r3
 8001160:	2b00      	cmp	r3, #0
 8001162:	d105      	bne.n	8001170 <save_to_flash+0x15c>
			  {
				  write_cnt += 4;
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	3304      	adds	r3, #4
 8001168:	613b      	str	r3, [r7, #16]
				  index++;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	3301      	adds	r3, #1
 800116e:	60fb      	str	r3, [r7, #12]
	  while(index < data_length)
 8001170:	68fa      	ldr	r2, [r7, #12]
 8001172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001174:	429a      	cmp	r2, r3
 8001176:	d3dd      	bcc.n	8001134 <save_to_flash+0x120>
			  }
		  }
	  }

	  HAL_FLASH_OB_Lock();
 8001178:	f7ff f9f8 	bl	800056c <HAL_FLASH_OB_Lock>
	  HAL_FLASH_Lock();
 800117c:	f7ff f9ca 	bl	8000514 <HAL_FLASH_Lock>
 8001180:	46ad      	mov	sp, r5
}
 8001182:	bf00      	nop
 8001184:	3738      	adds	r7, #56	; 0x38
 8001186:	46bd      	mov	sp, r7
 8001188:	bdb0      	pop	{r4, r5, r7, pc}

0800118a <read_flash>:

void read_flash(uint8_t* data)
{
 800118a:	b480      	push	{r7}
 800118c:	b085      	sub	sp, #20
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
	volatile uint32_t read_data;
	volatile uint32_t read_cnt=0;
 8001192:	2300      	movs	r3, #0
 8001194:	60bb      	str	r3, [r7, #8]
	do
	{
		read_data = *(uint32_t*)(FLASH_STORAGE + read_cnt);
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	60fb      	str	r3, [r7, #12]
		if(read_data != 0xFFFFFFFF)
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011a6:	d020      	beq.n	80011ea <read_flash+0x60>
		{
			data[read_cnt] = (uint8_t)read_data;
 80011a8:	68f9      	ldr	r1, [r7, #12]
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	4413      	add	r3, r2
 80011b0:	b2ca      	uxtb	r2, r1
 80011b2:	701a      	strb	r2, [r3, #0]
			data[read_cnt + 1] = (uint8_t)(read_data >> 8);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	0a19      	lsrs	r1, r3, #8
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	3301      	adds	r3, #1
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	4413      	add	r3, r2
 80011c0:	b2ca      	uxtb	r2, r1
 80011c2:	701a      	strb	r2, [r3, #0]
			data[read_cnt + 2] = (uint8_t)(read_data >> 16);
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	0c19      	lsrs	r1, r3, #16
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	3302      	adds	r3, #2
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	4413      	add	r3, r2
 80011d0:	b2ca      	uxtb	r2, r1
 80011d2:	701a      	strb	r2, [r3, #0]
			data[read_cnt + 3] = (uint8_t)(read_data >> 24);
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	0e19      	lsrs	r1, r3, #24
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	3303      	adds	r3, #3
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	4413      	add	r3, r2
 80011e0:	b2ca      	uxtb	r2, r1
 80011e2:	701a      	strb	r2, [r3, #0]
			read_cnt += 4;
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	3304      	adds	r3, #4
 80011e8:	60bb      	str	r3, [r7, #8]
		}
	}while(read_data != 0xFFFFFFFF);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011f0:	d1d1      	bne.n	8001196 <read_flash+0xc>
}
 80011f2:	bf00      	nop
 80011f4:	3714      	adds	r7, #20
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc80      	pop	{r7}
 80011fa:	4770      	bx	lr

080011fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011fc:	b590      	push	{r4, r7, lr}
 80011fe:	b09f      	sub	sp, #124	; 0x7c
 8001200:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001202:	f7fe ffab 	bl	800015c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001206:	f000 f839 	bl	800127c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800120a:	f000 f87d 	bl	8001308 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  char write_data[50];
  memset(write_data, 0, sizeof(write_data));
 800120e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001212:	2232      	movs	r2, #50	; 0x32
 8001214:	2100      	movs	r1, #0
 8001216:	4618      	mov	r0, r3
 8001218:	f000 f978 	bl	800150c <memset>
  strcpy(write_data, "Hello World!!!");
 800121c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001220:	4a14      	ldr	r2, [pc, #80]	; (8001274 <main+0x78>)
 8001222:	461c      	mov	r4, r3
 8001224:	4613      	mov	r3, r2
 8001226:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001228:	c407      	stmia	r4!, {r0, r1, r2}
 800122a:	8023      	strh	r3, [r4, #0]
 800122c:	3402      	adds	r4, #2
 800122e:	0c1b      	lsrs	r3, r3, #16
 8001230:	7023      	strb	r3, [r4, #0]

  save_to_flash((uint8_t*)write_data);
 8001232:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff feec 	bl	8001014 <save_to_flash>

  char read_data[50];
  memset(read_data, 0, sizeof(read_data));
 800123c:	f107 0308 	add.w	r3, r7, #8
 8001240:	2232      	movs	r2, #50	; 0x32
 8001242:	2100      	movs	r1, #0
 8001244:	4618      	mov	r0, r3
 8001246:	f000 f961 	bl	800150c <memset>

  read_flash((uint8_t*)read_data);
 800124a:	f107 0308 	add.w	r3, r7, #8
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff ff9b 	bl	800118a <read_flash>

  float write_number = 235.756f;
 8001254:	4b08      	ldr	r3, [pc, #32]	; (8001278 <main+0x7c>)
 8001256:	607b      	str	r3, [r7, #4]
  float *pointer_write = &write_number;
 8001258:	1d3b      	adds	r3, r7, #4
 800125a:	677b      	str	r3, [r7, #116]	; 0x74
  save_to_flash((uint8_t*)pointer_write);
 800125c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800125e:	f7ff fed9 	bl	8001014 <save_to_flash>

  float read_number = 0.0f;
 8001262:	f04f 0300 	mov.w	r3, #0
 8001266:	603b      	str	r3, [r7, #0]
  float *pointer_read = &read_number;
 8001268:	463b      	mov	r3, r7
 800126a:	673b      	str	r3, [r7, #112]	; 0x70
  read_flash((uint8_t*)pointer_read);
 800126c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800126e:	f7ff ff8c 	bl	800118a <read_flash>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001272:	e7fe      	b.n	8001272 <main+0x76>
 8001274:	08001558 	.word	0x08001558
 8001278:	436bc189 	.word	0x436bc189

0800127c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b090      	sub	sp, #64	; 0x40
 8001280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001282:	f107 0318 	add.w	r3, r7, #24
 8001286:	2228      	movs	r2, #40	; 0x28
 8001288:	2100      	movs	r1, #0
 800128a:	4618      	mov	r0, r3
 800128c:	f000 f93e 	bl	800150c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001290:	1d3b      	adds	r3, r7, #4
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	60da      	str	r2, [r3, #12]
 800129c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800129e:	2301      	movs	r3, #1
 80012a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012a8:	2300      	movs	r3, #0
 80012aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012ac:	2301      	movs	r3, #1
 80012ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012b0:	2302      	movs	r3, #2
 80012b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012ba:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80012be:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012c0:	f107 0318 	add.w	r3, r7, #24
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fabb 	bl	8000840 <HAL_RCC_OscConfig>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80012d0:	f000 f83c 	bl	800134c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012d4:	230f      	movs	r3, #15
 80012d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012d8:	2302      	movs	r3, #2
 80012da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012dc:	2300      	movs	r3, #0
 80012de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012e6:	2300      	movs	r3, #0
 80012e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	2102      	movs	r1, #2
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff fd26 	bl	8000d40 <HAL_RCC_ClockConfig>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <SystemClock_Config+0x82>
  {
    Error_Handler();
 80012fa:	f000 f827 	bl	800134c <Error_Handler>
  }
}
 80012fe:	bf00      	nop
 8001300:	3740      	adds	r7, #64	; 0x40
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800130e:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <MX_GPIO_Init+0x40>)
 8001310:	699b      	ldr	r3, [r3, #24]
 8001312:	4a0d      	ldr	r2, [pc, #52]	; (8001348 <MX_GPIO_Init+0x40>)
 8001314:	f043 0320 	orr.w	r3, r3, #32
 8001318:	6193      	str	r3, [r2, #24]
 800131a:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <MX_GPIO_Init+0x40>)
 800131c:	699b      	ldr	r3, [r3, #24]
 800131e:	f003 0320 	and.w	r3, r3, #32
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001326:	4b08      	ldr	r3, [pc, #32]	; (8001348 <MX_GPIO_Init+0x40>)
 8001328:	699b      	ldr	r3, [r3, #24]
 800132a:	4a07      	ldr	r2, [pc, #28]	; (8001348 <MX_GPIO_Init+0x40>)
 800132c:	f043 0304 	orr.w	r3, r3, #4
 8001330:	6193      	str	r3, [r2, #24]
 8001332:	4b05      	ldr	r3, [pc, #20]	; (8001348 <MX_GPIO_Init+0x40>)
 8001334:	699b      	ldr	r3, [r3, #24]
 8001336:	f003 0304 	and.w	r3, r3, #4
 800133a:	603b      	str	r3, [r7, #0]
 800133c:	683b      	ldr	r3, [r7, #0]

}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr
 8001348:	40021000 	.word	0x40021000

0800134c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	bc80      	pop	{r7}
 8001356:	4770      	bx	lr

08001358 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800135e:	4b15      	ldr	r3, [pc, #84]	; (80013b4 <HAL_MspInit+0x5c>)
 8001360:	699b      	ldr	r3, [r3, #24]
 8001362:	4a14      	ldr	r2, [pc, #80]	; (80013b4 <HAL_MspInit+0x5c>)
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	6193      	str	r3, [r2, #24]
 800136a:	4b12      	ldr	r3, [pc, #72]	; (80013b4 <HAL_MspInit+0x5c>)
 800136c:	699b      	ldr	r3, [r3, #24]
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	60bb      	str	r3, [r7, #8]
 8001374:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001376:	4b0f      	ldr	r3, [pc, #60]	; (80013b4 <HAL_MspInit+0x5c>)
 8001378:	69db      	ldr	r3, [r3, #28]
 800137a:	4a0e      	ldr	r2, [pc, #56]	; (80013b4 <HAL_MspInit+0x5c>)
 800137c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001380:	61d3      	str	r3, [r2, #28]
 8001382:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <HAL_MspInit+0x5c>)
 8001384:	69db      	ldr	r3, [r3, #28]
 8001386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138a:	607b      	str	r3, [r7, #4]
 800138c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800138e:	4b0a      	ldr	r3, [pc, #40]	; (80013b8 <HAL_MspInit+0x60>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	4a04      	ldr	r2, [pc, #16]	; (80013b8 <HAL_MspInit+0x60>)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013aa:	bf00      	nop
 80013ac:	3714      	adds	r7, #20
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr
 80013b4:	40021000 	.word	0x40021000
 80013b8:	40010000 	.word	0x40010000

080013bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr

080013c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013cc:	e7fe      	b.n	80013cc <HardFault_Handler+0x4>

080013ce <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013d2:	e7fe      	b.n	80013d2 <MemManage_Handler+0x4>

080013d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013d8:	e7fe      	b.n	80013d8 <BusFault_Handler+0x4>

080013da <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013de:	e7fe      	b.n	80013de <UsageFault_Handler+0x4>

080013e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bc80      	pop	{r7}
 80013ea:	4770      	bx	lr

080013ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bc80      	pop	{r7}
 80013f6:	4770      	bx	lr

080013f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr

08001404 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001408:	f7fe feee 	bl	80001e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}

08001410 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001414:	4b15      	ldr	r3, [pc, #84]	; (800146c <SystemInit+0x5c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a14      	ldr	r2, [pc, #80]	; (800146c <SystemInit+0x5c>)
 800141a:	f043 0301 	orr.w	r3, r3, #1
 800141e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001420:	4b12      	ldr	r3, [pc, #72]	; (800146c <SystemInit+0x5c>)
 8001422:	685a      	ldr	r2, [r3, #4]
 8001424:	4911      	ldr	r1, [pc, #68]	; (800146c <SystemInit+0x5c>)
 8001426:	4b12      	ldr	r3, [pc, #72]	; (8001470 <SystemInit+0x60>)
 8001428:	4013      	ands	r3, r2
 800142a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800142c:	4b0f      	ldr	r3, [pc, #60]	; (800146c <SystemInit+0x5c>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a0e      	ldr	r2, [pc, #56]	; (800146c <SystemInit+0x5c>)
 8001432:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001436:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800143a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800143c:	4b0b      	ldr	r3, [pc, #44]	; (800146c <SystemInit+0x5c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a0a      	ldr	r2, [pc, #40]	; (800146c <SystemInit+0x5c>)
 8001442:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001446:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001448:	4b08      	ldr	r3, [pc, #32]	; (800146c <SystemInit+0x5c>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	4a07      	ldr	r2, [pc, #28]	; (800146c <SystemInit+0x5c>)
 800144e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001452:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001454:	4b05      	ldr	r3, [pc, #20]	; (800146c <SystemInit+0x5c>)
 8001456:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800145a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800145c:	4b05      	ldr	r3, [pc, #20]	; (8001474 <SystemInit+0x64>)
 800145e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001462:	609a      	str	r2, [r3, #8]
#endif 
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr
 800146c:	40021000 	.word	0x40021000
 8001470:	f8ff0000 	.word	0xf8ff0000
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001478:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800147a:	e003      	b.n	8001484 <LoopCopyDataInit>

0800147c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800147c:	4b0b      	ldr	r3, [pc, #44]	; (80014ac <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800147e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001480:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001482:	3104      	adds	r1, #4

08001484 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001484:	480a      	ldr	r0, [pc, #40]	; (80014b0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001486:	4b0b      	ldr	r3, [pc, #44]	; (80014b4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001488:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800148a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800148c:	d3f6      	bcc.n	800147c <CopyDataInit>
  ldr r2, =_sbss
 800148e:	4a0a      	ldr	r2, [pc, #40]	; (80014b8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001490:	e002      	b.n	8001498 <LoopFillZerobss>

08001492 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001492:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001494:	f842 3b04 	str.w	r3, [r2], #4

08001498 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001498:	4b08      	ldr	r3, [pc, #32]	; (80014bc <LoopFillZerobss+0x24>)
  cmp r2, r3
 800149a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800149c:	d3f9      	bcc.n	8001492 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800149e:	f7ff ffb7 	bl	8001410 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014a2:	f000 f80f 	bl	80014c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014a6:	f7ff fea9 	bl	80011fc <main>
  bx lr
 80014aa:	4770      	bx	lr
  ldr r3, =_sidata
 80014ac:	08001580 	.word	0x08001580
  ldr r0, =_sdata
 80014b0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80014b4:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80014b8:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 80014bc:	20000050 	.word	0x20000050

080014c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014c0:	e7fe      	b.n	80014c0 <ADC1_2_IRQHandler>
	...

080014c4 <__libc_init_array>:
 80014c4:	b570      	push	{r4, r5, r6, lr}
 80014c6:	2500      	movs	r5, #0
 80014c8:	4e0c      	ldr	r6, [pc, #48]	; (80014fc <__libc_init_array+0x38>)
 80014ca:	4c0d      	ldr	r4, [pc, #52]	; (8001500 <__libc_init_array+0x3c>)
 80014cc:	1ba4      	subs	r4, r4, r6
 80014ce:	10a4      	asrs	r4, r4, #2
 80014d0:	42a5      	cmp	r5, r4
 80014d2:	d109      	bne.n	80014e8 <__libc_init_array+0x24>
 80014d4:	f000 f82a 	bl	800152c <_init>
 80014d8:	2500      	movs	r5, #0
 80014da:	4e0a      	ldr	r6, [pc, #40]	; (8001504 <__libc_init_array+0x40>)
 80014dc:	4c0a      	ldr	r4, [pc, #40]	; (8001508 <__libc_init_array+0x44>)
 80014de:	1ba4      	subs	r4, r4, r6
 80014e0:	10a4      	asrs	r4, r4, #2
 80014e2:	42a5      	cmp	r5, r4
 80014e4:	d105      	bne.n	80014f2 <__libc_init_array+0x2e>
 80014e6:	bd70      	pop	{r4, r5, r6, pc}
 80014e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80014ec:	4798      	blx	r3
 80014ee:	3501      	adds	r5, #1
 80014f0:	e7ee      	b.n	80014d0 <__libc_init_array+0xc>
 80014f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80014f6:	4798      	blx	r3
 80014f8:	3501      	adds	r5, #1
 80014fa:	e7f2      	b.n	80014e2 <__libc_init_array+0x1e>
 80014fc:	08001578 	.word	0x08001578
 8001500:	08001578 	.word	0x08001578
 8001504:	08001578 	.word	0x08001578
 8001508:	0800157c 	.word	0x0800157c

0800150c <memset>:
 800150c:	4603      	mov	r3, r0
 800150e:	4402      	add	r2, r0
 8001510:	4293      	cmp	r3, r2
 8001512:	d100      	bne.n	8001516 <memset+0xa>
 8001514:	4770      	bx	lr
 8001516:	f803 1b01 	strb.w	r1, [r3], #1
 800151a:	e7f9      	b.n	8001510 <memset+0x4>

0800151c <strcpy>:
 800151c:	4603      	mov	r3, r0
 800151e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001522:	f803 2b01 	strb.w	r2, [r3], #1
 8001526:	2a00      	cmp	r2, #0
 8001528:	d1f9      	bne.n	800151e <strcpy+0x2>
 800152a:	4770      	bx	lr

0800152c <_init>:
 800152c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800152e:	bf00      	nop
 8001530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001532:	bc08      	pop	{r3}
 8001534:	469e      	mov	lr, r3
 8001536:	4770      	bx	lr

08001538 <_fini>:
 8001538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800153a:	bf00      	nop
 800153c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800153e:	bc08      	pop	{r3}
 8001540:	469e      	mov	lr, r3
 8001542:	4770      	bx	lr
