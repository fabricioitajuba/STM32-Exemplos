
flash_interna.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d0c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08001e18  08001e18  00011e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ea0  08001ea0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08001ea0  08001ea0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001ea0  08001ea0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ea0  08001ea0  00011ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001ea4  08001ea4  00011ea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08001ea8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000054  20000070  08001f18  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08001f18  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000051fa  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000013ee  00000000  00000000  00025293  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000004e0  00000000  00000000  00026688  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000428  00000000  00000000  00026b68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000132d1  00000000  00000000  00026f90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004e9c  00000000  00000000  0003a261  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000685b1  00000000  00000000  0003f0fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a76ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001488  00000000  00000000  000a772c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08001e00 	.word	0x08001e00

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08001e00 	.word	0x08001e00

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000160:	4b08      	ldr	r3, [pc, #32]	; (8000184 <HAL_Init+0x28>)
 8000162:	681b      	ldr	r3, [r3, #0]
 8000164:	4a07      	ldr	r2, [pc, #28]	; (8000184 <HAL_Init+0x28>)
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800016c:	2003      	movs	r0, #3
 800016e:	f000 f907 	bl	8000380 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000172:	2000      	movs	r0, #0
 8000174:	f000 f808 	bl	8000188 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000178:	f001 f914 	bl	80013a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800017c:	2300      	movs	r3, #0
}
 800017e:	4618      	mov	r0, r3
 8000180:	bd80      	pop	{r7, pc}
 8000182:	bf00      	nop
 8000184:	40022000 	.word	0x40022000

08000188 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b082      	sub	sp, #8
 800018c:	af00      	add	r7, sp, #0
 800018e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000190:	4b12      	ldr	r3, [pc, #72]	; (80001dc <HAL_InitTick+0x54>)
 8000192:	681a      	ldr	r2, [r3, #0]
 8000194:	4b12      	ldr	r3, [pc, #72]	; (80001e0 <HAL_InitTick+0x58>)
 8000196:	781b      	ldrb	r3, [r3, #0]
 8000198:	4619      	mov	r1, r3
 800019a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800019e:	fbb3 f3f1 	udiv	r3, r3, r1
 80001a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80001a6:	4618      	mov	r0, r3
 80001a8:	f000 f911 	bl	80003ce <HAL_SYSTICK_Config>
 80001ac:	4603      	mov	r3, r0
 80001ae:	2b00      	cmp	r3, #0
 80001b0:	d001      	beq.n	80001b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001b2:	2301      	movs	r3, #1
 80001b4:	e00e      	b.n	80001d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	2b0f      	cmp	r3, #15
 80001ba:	d80a      	bhi.n	80001d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001bc:	2200      	movs	r2, #0
 80001be:	6879      	ldr	r1, [r7, #4]
 80001c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80001c4:	f000 f8e7 	bl	8000396 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001c8:	4a06      	ldr	r2, [pc, #24]	; (80001e4 <HAL_InitTick+0x5c>)
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001ce:	2300      	movs	r3, #0
 80001d0:	e000      	b.n	80001d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001d2:	2301      	movs	r3, #1
}
 80001d4:	4618      	mov	r0, r3
 80001d6:	3708      	adds	r7, #8
 80001d8:	46bd      	mov	sp, r7
 80001da:	bd80      	pop	{r7, pc}
 80001dc:	20000008 	.word	0x20000008
 80001e0:	20000004 	.word	0x20000004
 80001e4:	20000000 	.word	0x20000000

080001e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001ec:	4b05      	ldr	r3, [pc, #20]	; (8000204 <HAL_IncTick+0x1c>)
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	461a      	mov	r2, r3
 80001f2:	4b05      	ldr	r3, [pc, #20]	; (8000208 <HAL_IncTick+0x20>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4413      	add	r3, r2
 80001f8:	4a03      	ldr	r2, [pc, #12]	; (8000208 <HAL_IncTick+0x20>)
 80001fa:	6013      	str	r3, [r2, #0]
}
 80001fc:	bf00      	nop
 80001fe:	46bd      	mov	sp, r7
 8000200:	bc80      	pop	{r7}
 8000202:	4770      	bx	lr
 8000204:	20000004 	.word	0x20000004
 8000208:	20000098 	.word	0x20000098

0800020c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800020c:	b480      	push	{r7}
 800020e:	af00      	add	r7, sp, #0
  return uwTick;
 8000210:	4b02      	ldr	r3, [pc, #8]	; (800021c <HAL_GetTick+0x10>)
 8000212:	681b      	ldr	r3, [r3, #0]
}
 8000214:	4618      	mov	r0, r3
 8000216:	46bd      	mov	sp, r7
 8000218:	bc80      	pop	{r7}
 800021a:	4770      	bx	lr
 800021c:	20000098 	.word	0x20000098

08000220 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000220:	b480      	push	{r7}
 8000222:	b085      	sub	sp, #20
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	f003 0307 	and.w	r3, r3, #7
 800022e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000230:	4b0c      	ldr	r3, [pc, #48]	; (8000264 <__NVIC_SetPriorityGrouping+0x44>)
 8000232:	68db      	ldr	r3, [r3, #12]
 8000234:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000236:	68ba      	ldr	r2, [r7, #8]
 8000238:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800023c:	4013      	ands	r3, r2
 800023e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000244:	68bb      	ldr	r3, [r7, #8]
 8000246:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000248:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800024c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000250:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000252:	4a04      	ldr	r2, [pc, #16]	; (8000264 <__NVIC_SetPriorityGrouping+0x44>)
 8000254:	68bb      	ldr	r3, [r7, #8]
 8000256:	60d3      	str	r3, [r2, #12]
}
 8000258:	bf00      	nop
 800025a:	3714      	adds	r7, #20
 800025c:	46bd      	mov	sp, r7
 800025e:	bc80      	pop	{r7}
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	e000ed00 	.word	0xe000ed00

08000268 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800026c:	4b04      	ldr	r3, [pc, #16]	; (8000280 <__NVIC_GetPriorityGrouping+0x18>)
 800026e:	68db      	ldr	r3, [r3, #12]
 8000270:	0a1b      	lsrs	r3, r3, #8
 8000272:	f003 0307 	and.w	r3, r3, #7
}
 8000276:	4618      	mov	r0, r3
 8000278:	46bd      	mov	sp, r7
 800027a:	bc80      	pop	{r7}
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop
 8000280:	e000ed00 	.word	0xe000ed00

08000284 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000284:	b480      	push	{r7}
 8000286:	b083      	sub	sp, #12
 8000288:	af00      	add	r7, sp, #0
 800028a:	4603      	mov	r3, r0
 800028c:	6039      	str	r1, [r7, #0]
 800028e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000294:	2b00      	cmp	r3, #0
 8000296:	db0a      	blt.n	80002ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000298:	683b      	ldr	r3, [r7, #0]
 800029a:	b2da      	uxtb	r2, r3
 800029c:	490c      	ldr	r1, [pc, #48]	; (80002d0 <__NVIC_SetPriority+0x4c>)
 800029e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002a2:	0112      	lsls	r2, r2, #4
 80002a4:	b2d2      	uxtb	r2, r2
 80002a6:	440b      	add	r3, r1
 80002a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002ac:	e00a      	b.n	80002c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ae:	683b      	ldr	r3, [r7, #0]
 80002b0:	b2da      	uxtb	r2, r3
 80002b2:	4908      	ldr	r1, [pc, #32]	; (80002d4 <__NVIC_SetPriority+0x50>)
 80002b4:	79fb      	ldrb	r3, [r7, #7]
 80002b6:	f003 030f 	and.w	r3, r3, #15
 80002ba:	3b04      	subs	r3, #4
 80002bc:	0112      	lsls	r2, r2, #4
 80002be:	b2d2      	uxtb	r2, r2
 80002c0:	440b      	add	r3, r1
 80002c2:	761a      	strb	r2, [r3, #24]
}
 80002c4:	bf00      	nop
 80002c6:	370c      	adds	r7, #12
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bc80      	pop	{r7}
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop
 80002d0:	e000e100 	.word	0xe000e100
 80002d4:	e000ed00 	.word	0xe000ed00

080002d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002d8:	b480      	push	{r7}
 80002da:	b089      	sub	sp, #36	; 0x24
 80002dc:	af00      	add	r7, sp, #0
 80002de:	60f8      	str	r0, [r7, #12]
 80002e0:	60b9      	str	r1, [r7, #8]
 80002e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	f003 0307 	and.w	r3, r3, #7
 80002ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002ec:	69fb      	ldr	r3, [r7, #28]
 80002ee:	f1c3 0307 	rsb	r3, r3, #7
 80002f2:	2b04      	cmp	r3, #4
 80002f4:	bf28      	it	cs
 80002f6:	2304      	movcs	r3, #4
 80002f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002fa:	69fb      	ldr	r3, [r7, #28]
 80002fc:	3304      	adds	r3, #4
 80002fe:	2b06      	cmp	r3, #6
 8000300:	d902      	bls.n	8000308 <NVIC_EncodePriority+0x30>
 8000302:	69fb      	ldr	r3, [r7, #28]
 8000304:	3b03      	subs	r3, #3
 8000306:	e000      	b.n	800030a <NVIC_EncodePriority+0x32>
 8000308:	2300      	movs	r3, #0
 800030a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800030c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000310:	69bb      	ldr	r3, [r7, #24]
 8000312:	fa02 f303 	lsl.w	r3, r2, r3
 8000316:	43da      	mvns	r2, r3
 8000318:	68bb      	ldr	r3, [r7, #8]
 800031a:	401a      	ands	r2, r3
 800031c:	697b      	ldr	r3, [r7, #20]
 800031e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000320:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000324:	697b      	ldr	r3, [r7, #20]
 8000326:	fa01 f303 	lsl.w	r3, r1, r3
 800032a:	43d9      	mvns	r1, r3
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000330:	4313      	orrs	r3, r2
         );
}
 8000332:	4618      	mov	r0, r3
 8000334:	3724      	adds	r7, #36	; 0x24
 8000336:	46bd      	mov	sp, r7
 8000338:	bc80      	pop	{r7}
 800033a:	4770      	bx	lr

0800033c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	3b01      	subs	r3, #1
 8000348:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800034c:	d301      	bcc.n	8000352 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800034e:	2301      	movs	r3, #1
 8000350:	e00f      	b.n	8000372 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000352:	4a0a      	ldr	r2, [pc, #40]	; (800037c <SysTick_Config+0x40>)
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	3b01      	subs	r3, #1
 8000358:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800035a:	210f      	movs	r1, #15
 800035c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000360:	f7ff ff90 	bl	8000284 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000364:	4b05      	ldr	r3, [pc, #20]	; (800037c <SysTick_Config+0x40>)
 8000366:	2200      	movs	r2, #0
 8000368:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800036a:	4b04      	ldr	r3, [pc, #16]	; (800037c <SysTick_Config+0x40>)
 800036c:	2207      	movs	r2, #7
 800036e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000370:	2300      	movs	r3, #0
}
 8000372:	4618      	mov	r0, r3
 8000374:	3708      	adds	r7, #8
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	e000e010 	.word	0xe000e010

08000380 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000388:	6878      	ldr	r0, [r7, #4]
 800038a:	f7ff ff49 	bl	8000220 <__NVIC_SetPriorityGrouping>
}
 800038e:	bf00      	nop
 8000390:	3708      	adds	r7, #8
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}

08000396 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000396:	b580      	push	{r7, lr}
 8000398:	b086      	sub	sp, #24
 800039a:	af00      	add	r7, sp, #0
 800039c:	4603      	mov	r3, r0
 800039e:	60b9      	str	r1, [r7, #8]
 80003a0:	607a      	str	r2, [r7, #4]
 80003a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80003a4:	2300      	movs	r3, #0
 80003a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80003a8:	f7ff ff5e 	bl	8000268 <__NVIC_GetPriorityGrouping>
 80003ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80003ae:	687a      	ldr	r2, [r7, #4]
 80003b0:	68b9      	ldr	r1, [r7, #8]
 80003b2:	6978      	ldr	r0, [r7, #20]
 80003b4:	f7ff ff90 	bl	80002d8 <NVIC_EncodePriority>
 80003b8:	4602      	mov	r2, r0
 80003ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003be:	4611      	mov	r1, r2
 80003c0:	4618      	mov	r0, r3
 80003c2:	f7ff ff5f 	bl	8000284 <__NVIC_SetPriority>
}
 80003c6:	bf00      	nop
 80003c8:	3718      	adds	r7, #24
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}

080003ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80003ce:	b580      	push	{r7, lr}
 80003d0:	b082      	sub	sp, #8
 80003d2:	af00      	add	r7, sp, #0
 80003d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80003d6:	6878      	ldr	r0, [r7, #4]
 80003d8:	f7ff ffb0 	bl	800033c <SysTick_Config>
 80003dc:	4603      	mov	r3, r0
}
 80003de:	4618      	mov	r0, r3
 80003e0:	3708      	adds	r7, #8
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
	...

080003e8 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80003e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003ea:	b087      	sub	sp, #28
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	60f8      	str	r0, [r7, #12]
 80003f0:	60b9      	str	r1, [r7, #8]
 80003f2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80003f6:	2301      	movs	r3, #1
 80003f8:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80003fa:	2300      	movs	r3, #0
 80003fc:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80003fe:	2300      	movs	r3, #0
 8000400:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000402:	4b2f      	ldr	r3, [pc, #188]	; (80004c0 <HAL_FLASH_Program+0xd8>)
 8000404:	7e1b      	ldrb	r3, [r3, #24]
 8000406:	2b01      	cmp	r3, #1
 8000408:	d101      	bne.n	800040e <HAL_FLASH_Program+0x26>
 800040a:	2302      	movs	r3, #2
 800040c:	e054      	b.n	80004b8 <HAL_FLASH_Program+0xd0>
 800040e:	4b2c      	ldr	r3, [pc, #176]	; (80004c0 <HAL_FLASH_Program+0xd8>)
 8000410:	2201      	movs	r2, #1
 8000412:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000414:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000418:	f000 f8d4 	bl	80005c4 <FLASH_WaitForLastOperation>
 800041c:	4603      	mov	r3, r0
 800041e:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8000420:	7dfb      	ldrb	r3, [r7, #23]
 8000422:	2b00      	cmp	r3, #0
 8000424:	d144      	bne.n	80004b0 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	2b01      	cmp	r3, #1
 800042a:	d102      	bne.n	8000432 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 800042c:	2301      	movs	r3, #1
 800042e:	757b      	strb	r3, [r7, #21]
 8000430:	e007      	b.n	8000442 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000432:	68fb      	ldr	r3, [r7, #12]
 8000434:	2b02      	cmp	r3, #2
 8000436:	d102      	bne.n	800043e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8000438:	2302      	movs	r3, #2
 800043a:	757b      	strb	r3, [r7, #21]
 800043c:	e001      	b.n	8000442 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800043e:	2304      	movs	r3, #4
 8000440:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8000442:	2300      	movs	r3, #0
 8000444:	75bb      	strb	r3, [r7, #22]
 8000446:	e02d      	b.n	80004a4 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000448:	7dbb      	ldrb	r3, [r7, #22]
 800044a:	005a      	lsls	r2, r3, #1
 800044c:	68bb      	ldr	r3, [r7, #8]
 800044e:	eb02 0c03 	add.w	ip, r2, r3
 8000452:	7dbb      	ldrb	r3, [r7, #22]
 8000454:	0119      	lsls	r1, r3, #4
 8000456:	e9d7 2300 	ldrd	r2, r3, [r7]
 800045a:	f1c1 0620 	rsb	r6, r1, #32
 800045e:	f1a1 0020 	sub.w	r0, r1, #32
 8000462:	fa22 f401 	lsr.w	r4, r2, r1
 8000466:	fa03 f606 	lsl.w	r6, r3, r6
 800046a:	4334      	orrs	r4, r6
 800046c:	fa23 f000 	lsr.w	r0, r3, r0
 8000470:	4304      	orrs	r4, r0
 8000472:	fa23 f501 	lsr.w	r5, r3, r1
 8000476:	b2a3      	uxth	r3, r4
 8000478:	4619      	mov	r1, r3
 800047a:	4660      	mov	r0, ip
 800047c:	f000 f886 	bl	800058c <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000480:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000484:	f000 f89e 	bl	80005c4 <FLASH_WaitForLastOperation>
 8000488:	4603      	mov	r3, r0
 800048a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800048c:	4b0d      	ldr	r3, [pc, #52]	; (80004c4 <HAL_FLASH_Program+0xdc>)
 800048e:	691b      	ldr	r3, [r3, #16]
 8000490:	4a0c      	ldr	r2, [pc, #48]	; (80004c4 <HAL_FLASH_Program+0xdc>)
 8000492:	f023 0301 	bic.w	r3, r3, #1
 8000496:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8000498:	7dfb      	ldrb	r3, [r7, #23]
 800049a:	2b00      	cmp	r3, #0
 800049c:	d107      	bne.n	80004ae <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800049e:	7dbb      	ldrb	r3, [r7, #22]
 80004a0:	3301      	adds	r3, #1
 80004a2:	75bb      	strb	r3, [r7, #22]
 80004a4:	7dba      	ldrb	r2, [r7, #22]
 80004a6:	7d7b      	ldrb	r3, [r7, #21]
 80004a8:	429a      	cmp	r2, r3
 80004aa:	d3cd      	bcc.n	8000448 <HAL_FLASH_Program+0x60>
 80004ac:	e000      	b.n	80004b0 <HAL_FLASH_Program+0xc8>
      {
        break;
 80004ae:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80004b0:	4b03      	ldr	r3, [pc, #12]	; (80004c0 <HAL_FLASH_Program+0xd8>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	761a      	strb	r2, [r3, #24]

  return status;
 80004b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80004b8:	4618      	mov	r0, r3
 80004ba:	371c      	adds	r7, #28
 80004bc:	46bd      	mov	sp, r7
 80004be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004c0:	200000a0 	.word	0x200000a0
 80004c4:	40022000 	.word	0x40022000

080004c8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80004ce:	2300      	movs	r3, #0
 80004d0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80004d2:	4b0d      	ldr	r3, [pc, #52]	; (8000508 <HAL_FLASH_Unlock+0x40>)
 80004d4:	691b      	ldr	r3, [r3, #16]
 80004d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d00d      	beq.n	80004fa <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80004de:	4b0a      	ldr	r3, [pc, #40]	; (8000508 <HAL_FLASH_Unlock+0x40>)
 80004e0:	4a0a      	ldr	r2, [pc, #40]	; (800050c <HAL_FLASH_Unlock+0x44>)
 80004e2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80004e4:	4b08      	ldr	r3, [pc, #32]	; (8000508 <HAL_FLASH_Unlock+0x40>)
 80004e6:	4a0a      	ldr	r2, [pc, #40]	; (8000510 <HAL_FLASH_Unlock+0x48>)
 80004e8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80004ea:	4b07      	ldr	r3, [pc, #28]	; (8000508 <HAL_FLASH_Unlock+0x40>)
 80004ec:	691b      	ldr	r3, [r3, #16]
 80004ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80004f6:	2301      	movs	r3, #1
 80004f8:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80004fa:	79fb      	ldrb	r3, [r7, #7]
}
 80004fc:	4618      	mov	r0, r3
 80004fe:	370c      	adds	r7, #12
 8000500:	46bd      	mov	sp, r7
 8000502:	bc80      	pop	{r7}
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	40022000 	.word	0x40022000
 800050c:	45670123 	.word	0x45670123
 8000510:	cdef89ab 	.word	0xcdef89ab

08000514 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000518:	4b05      	ldr	r3, [pc, #20]	; (8000530 <HAL_FLASH_Lock+0x1c>)
 800051a:	691b      	ldr	r3, [r3, #16]
 800051c:	4a04      	ldr	r2, [pc, #16]	; (8000530 <HAL_FLASH_Lock+0x1c>)
 800051e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000522:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8000524:	2300      	movs	r3, #0
}
 8000526:	4618      	mov	r0, r3
 8000528:	46bd      	mov	sp, r7
 800052a:	bc80      	pop	{r7}
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	40022000 	.word	0x40022000

08000534 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
 8000538:	4b09      	ldr	r3, [pc, #36]	; (8000560 <HAL_FLASH_OB_Unlock+0x2c>)
 800053a:	691b      	ldr	r3, [r3, #16]
 800053c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000540:	2b00      	cmp	r3, #0
 8000542:	d107      	bne.n	8000554 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8000544:	4b06      	ldr	r3, [pc, #24]	; (8000560 <HAL_FLASH_OB_Unlock+0x2c>)
 8000546:	4a07      	ldr	r2, [pc, #28]	; (8000564 <HAL_FLASH_OB_Unlock+0x30>)
 8000548:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 800054a:	4b05      	ldr	r3, [pc, #20]	; (8000560 <HAL_FLASH_OB_Unlock+0x2c>)
 800054c:	4a06      	ldr	r2, [pc, #24]	; (8000568 <HAL_FLASH_OB_Unlock+0x34>)
 800054e:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 8000550:	2300      	movs	r3, #0
 8000552:	e000      	b.n	8000556 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8000554:	2301      	movs	r3, #1
}
 8000556:	4618      	mov	r0, r3
 8000558:	46bd      	mov	sp, r7
 800055a:	bc80      	pop	{r7}
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	40022000 	.word	0x40022000
 8000564:	45670123 	.word	0x45670123
 8000568:	cdef89ab 	.word	0xcdef89ab

0800056c <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  /* Clear the OPTWRE Bit to lock the FLASH Option Byte Registers access */
  CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
 8000570:	4b05      	ldr	r3, [pc, #20]	; (8000588 <HAL_FLASH_OB_Lock+0x1c>)
 8000572:	691b      	ldr	r3, [r3, #16]
 8000574:	4a04      	ldr	r2, [pc, #16]	; (8000588 <HAL_FLASH_OB_Lock+0x1c>)
 8000576:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800057a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800057c:	2300      	movs	r3, #0
}
 800057e:	4618      	mov	r0, r3
 8000580:	46bd      	mov	sp, r7
 8000582:	bc80      	pop	{r7}
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	40022000 	.word	0x40022000

0800058c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
 8000594:	460b      	mov	r3, r1
 8000596:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000598:	4b08      	ldr	r3, [pc, #32]	; (80005bc <FLASH_Program_HalfWord+0x30>)
 800059a:	2200      	movs	r2, #0
 800059c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800059e:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <FLASH_Program_HalfWord+0x34>)
 80005a0:	691b      	ldr	r3, [r3, #16]
 80005a2:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <FLASH_Program_HalfWord+0x34>)
 80005a4:	f043 0301 	orr.w	r3, r3, #1
 80005a8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	887a      	ldrh	r2, [r7, #2]
 80005ae:	801a      	strh	r2, [r3, #0]
}
 80005b0:	bf00      	nop
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bc80      	pop	{r7}
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	200000a0 	.word	0x200000a0
 80005c0:	40022000 	.word	0x40022000

080005c4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80005cc:	f7ff fe1e 	bl	800020c <HAL_GetTick>
 80005d0:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80005d2:	e010      	b.n	80005f6 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80005da:	d00c      	beq.n	80005f6 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d007      	beq.n	80005f2 <FLASH_WaitForLastOperation+0x2e>
 80005e2:	f7ff fe13 	bl	800020c <HAL_GetTick>
 80005e6:	4602      	mov	r2, r0
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	1ad3      	subs	r3, r2, r3
 80005ec:	687a      	ldr	r2, [r7, #4]
 80005ee:	429a      	cmp	r2, r3
 80005f0:	d201      	bcs.n	80005f6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80005f2:	2303      	movs	r3, #3
 80005f4:	e025      	b.n	8000642 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80005f6:	4b15      	ldr	r3, [pc, #84]	; (800064c <FLASH_WaitForLastOperation+0x88>)
 80005f8:	68db      	ldr	r3, [r3, #12]
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d1e8      	bne.n	80005d4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000602:	4b12      	ldr	r3, [pc, #72]	; (800064c <FLASH_WaitForLastOperation+0x88>)
 8000604:	68db      	ldr	r3, [r3, #12]
 8000606:	f003 0320 	and.w	r3, r3, #32
 800060a:	2b00      	cmp	r3, #0
 800060c:	d002      	beq.n	8000614 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800060e:	4b0f      	ldr	r3, [pc, #60]	; (800064c <FLASH_WaitForLastOperation+0x88>)
 8000610:	2220      	movs	r2, #32
 8000612:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000614:	4b0d      	ldr	r3, [pc, #52]	; (800064c <FLASH_WaitForLastOperation+0x88>)
 8000616:	68db      	ldr	r3, [r3, #12]
 8000618:	f003 0310 	and.w	r3, r3, #16
 800061c:	2b00      	cmp	r3, #0
 800061e:	d10b      	bne.n	8000638 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000620:	4b0a      	ldr	r3, [pc, #40]	; (800064c <FLASH_WaitForLastOperation+0x88>)
 8000622:	69db      	ldr	r3, [r3, #28]
 8000624:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000628:	2b00      	cmp	r3, #0
 800062a:	d105      	bne.n	8000638 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800062c:	4b07      	ldr	r3, [pc, #28]	; (800064c <FLASH_WaitForLastOperation+0x88>)
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000634:	2b00      	cmp	r3, #0
 8000636:	d003      	beq.n	8000640 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000638:	f000 f80a 	bl	8000650 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800063c:	2301      	movs	r3, #1
 800063e:	e000      	b.n	8000642 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8000640:	2300      	movs	r3, #0
}
 8000642:	4618      	mov	r0, r3
 8000644:	3710      	adds	r7, #16
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40022000 	.word	0x40022000

08000650 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8000656:	2300      	movs	r3, #0
 8000658:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800065a:	4b23      	ldr	r3, [pc, #140]	; (80006e8 <FLASH_SetErrorCode+0x98>)
 800065c:	68db      	ldr	r3, [r3, #12]
 800065e:	f003 0310 	and.w	r3, r3, #16
 8000662:	2b00      	cmp	r3, #0
 8000664:	d009      	beq.n	800067a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000666:	4b21      	ldr	r3, [pc, #132]	; (80006ec <FLASH_SetErrorCode+0x9c>)
 8000668:	69db      	ldr	r3, [r3, #28]
 800066a:	f043 0302 	orr.w	r3, r3, #2
 800066e:	4a1f      	ldr	r2, [pc, #124]	; (80006ec <FLASH_SetErrorCode+0x9c>)
 8000670:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	f043 0310 	orr.w	r3, r3, #16
 8000678:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800067a:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <FLASH_SetErrorCode+0x98>)
 800067c:	68db      	ldr	r3, [r3, #12]
 800067e:	f003 0304 	and.w	r3, r3, #4
 8000682:	2b00      	cmp	r3, #0
 8000684:	d009      	beq.n	800069a <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000686:	4b19      	ldr	r3, [pc, #100]	; (80006ec <FLASH_SetErrorCode+0x9c>)
 8000688:	69db      	ldr	r3, [r3, #28]
 800068a:	f043 0301 	orr.w	r3, r3, #1
 800068e:	4a17      	ldr	r2, [pc, #92]	; (80006ec <FLASH_SetErrorCode+0x9c>)
 8000690:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	f043 0304 	orr.w	r3, r3, #4
 8000698:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800069a:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <FLASH_SetErrorCode+0x98>)
 800069c:	69db      	ldr	r3, [r3, #28]
 800069e:	f003 0301 	and.w	r3, r3, #1
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d00b      	beq.n	80006be <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80006a6:	4b11      	ldr	r3, [pc, #68]	; (80006ec <FLASH_SetErrorCode+0x9c>)
 80006a8:	69db      	ldr	r3, [r3, #28]
 80006aa:	f043 0304 	orr.w	r3, r3, #4
 80006ae:	4a0f      	ldr	r2, [pc, #60]	; (80006ec <FLASH_SetErrorCode+0x9c>)
 80006b0:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80006b2:	4b0d      	ldr	r3, [pc, #52]	; (80006e8 <FLASH_SetErrorCode+0x98>)
 80006b4:	69db      	ldr	r3, [r3, #28]
 80006b6:	4a0c      	ldr	r2, [pc, #48]	; (80006e8 <FLASH_SetErrorCode+0x98>)
 80006b8:	f023 0301 	bic.w	r3, r3, #1
 80006bc:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	f240 1201 	movw	r2, #257	; 0x101
 80006c4:	4293      	cmp	r3, r2
 80006c6:	d106      	bne.n	80006d6 <FLASH_SetErrorCode+0x86>
 80006c8:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <FLASH_SetErrorCode+0x98>)
 80006ca:	69db      	ldr	r3, [r3, #28]
 80006cc:	4a06      	ldr	r2, [pc, #24]	; (80006e8 <FLASH_SetErrorCode+0x98>)
 80006ce:	f023 0301 	bic.w	r3, r3, #1
 80006d2:	61d3      	str	r3, [r2, #28]
}  
 80006d4:	e002      	b.n	80006dc <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80006d6:	4a04      	ldr	r2, [pc, #16]	; (80006e8 <FLASH_SetErrorCode+0x98>)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	60d3      	str	r3, [r2, #12]
}  
 80006dc:	bf00      	nop
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bc80      	pop	{r7}
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	40022000 	.word	0x40022000
 80006ec:	200000a0 	.word	0x200000a0

080006f0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80006fa:	2301      	movs	r3, #1
 80006fc:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80006fe:	2300      	movs	r3, #0
 8000700:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000702:	4b2f      	ldr	r3, [pc, #188]	; (80007c0 <HAL_FLASHEx_Erase+0xd0>)
 8000704:	7e1b      	ldrb	r3, [r3, #24]
 8000706:	2b01      	cmp	r3, #1
 8000708:	d101      	bne.n	800070e <HAL_FLASHEx_Erase+0x1e>
 800070a:	2302      	movs	r3, #2
 800070c:	e053      	b.n	80007b6 <HAL_FLASHEx_Erase+0xc6>
 800070e:	4b2c      	ldr	r3, [pc, #176]	; (80007c0 <HAL_FLASHEx_Erase+0xd0>)
 8000710:	2201      	movs	r2, #1
 8000712:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	2b02      	cmp	r3, #2
 800071a:	d116      	bne.n	800074a <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800071c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000720:	f7ff ff50 	bl	80005c4 <FLASH_WaitForLastOperation>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d141      	bne.n	80007ae <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800072a:	2001      	movs	r0, #1
 800072c:	f000 f84c 	bl	80007c8 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000730:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000734:	f7ff ff46 	bl	80005c4 <FLASH_WaitForLastOperation>
 8000738:	4603      	mov	r3, r0
 800073a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800073c:	4b21      	ldr	r3, [pc, #132]	; (80007c4 <HAL_FLASHEx_Erase+0xd4>)
 800073e:	691b      	ldr	r3, [r3, #16]
 8000740:	4a20      	ldr	r2, [pc, #128]	; (80007c4 <HAL_FLASHEx_Erase+0xd4>)
 8000742:	f023 0304 	bic.w	r3, r3, #4
 8000746:	6113      	str	r3, [r2, #16]
 8000748:	e031      	b.n	80007ae <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800074a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800074e:	f7ff ff39 	bl	80005c4 <FLASH_WaitForLastOperation>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d12a      	bne.n	80007ae <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800075e:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	689b      	ldr	r3, [r3, #8]
 8000764:	60bb      	str	r3, [r7, #8]
 8000766:	e019      	b.n	800079c <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8000768:	68b8      	ldr	r0, [r7, #8]
 800076a:	f000 f849 	bl	8000800 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800076e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000772:	f7ff ff27 	bl	80005c4 <FLASH_WaitForLastOperation>
 8000776:	4603      	mov	r3, r0
 8000778:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800077a:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <HAL_FLASHEx_Erase+0xd4>)
 800077c:	691b      	ldr	r3, [r3, #16]
 800077e:	4a11      	ldr	r2, [pc, #68]	; (80007c4 <HAL_FLASHEx_Erase+0xd4>)
 8000780:	f023 0302 	bic.w	r3, r3, #2
 8000784:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8000786:	7bfb      	ldrb	r3, [r7, #15]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d003      	beq.n	8000794 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	68ba      	ldr	r2, [r7, #8]
 8000790:	601a      	str	r2, [r3, #0]
            break;
 8000792:	e00c      	b.n	80007ae <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800079a:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	68db      	ldr	r3, [r3, #12]
 80007a0:	029a      	lsls	r2, r3, #10
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	689b      	ldr	r3, [r3, #8]
 80007a6:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80007a8:	68ba      	ldr	r2, [r7, #8]
 80007aa:	429a      	cmp	r2, r3
 80007ac:	d3dc      	bcc.n	8000768 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80007ae:	4b04      	ldr	r3, [pc, #16]	; (80007c0 <HAL_FLASHEx_Erase+0xd0>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	761a      	strb	r2, [r3, #24]

  return status;
 80007b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3710      	adds	r7, #16
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	200000a0 	.word	0x200000a0
 80007c4:	40022000 	.word	0x40022000

080007c8 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80007d0:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <FLASH_MassErase+0x30>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <FLASH_MassErase+0x34>)
 80007d8:	691b      	ldr	r3, [r3, #16]
 80007da:	4a08      	ldr	r2, [pc, #32]	; (80007fc <FLASH_MassErase+0x34>)
 80007dc:	f043 0304 	orr.w	r3, r3, #4
 80007e0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80007e2:	4b06      	ldr	r3, [pc, #24]	; (80007fc <FLASH_MassErase+0x34>)
 80007e4:	691b      	ldr	r3, [r3, #16]
 80007e6:	4a05      	ldr	r2, [pc, #20]	; (80007fc <FLASH_MassErase+0x34>)
 80007e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007ec:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80007ee:	bf00      	nop
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr
 80007f8:	200000a0 	.word	0x200000a0
 80007fc:	40022000 	.word	0x40022000

08000800 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000808:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <FLASH_PageErase+0x38>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800080e:	4b0b      	ldr	r3, [pc, #44]	; (800083c <FLASH_PageErase+0x3c>)
 8000810:	691b      	ldr	r3, [r3, #16]
 8000812:	4a0a      	ldr	r2, [pc, #40]	; (800083c <FLASH_PageErase+0x3c>)
 8000814:	f043 0302 	orr.w	r3, r3, #2
 8000818:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800081a:	4a08      	ldr	r2, [pc, #32]	; (800083c <FLASH_PageErase+0x3c>)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <FLASH_PageErase+0x3c>)
 8000822:	691b      	ldr	r3, [r3, #16]
 8000824:	4a05      	ldr	r2, [pc, #20]	; (800083c <FLASH_PageErase+0x3c>)
 8000826:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800082a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800082c:	bf00      	nop
 800082e:	370c      	adds	r7, #12
 8000830:	46bd      	mov	sp, r7
 8000832:	bc80      	pop	{r7}
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	200000a0 	.word	0x200000a0
 800083c:	40022000 	.word	0x40022000

08000840 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d101      	bne.n	8000852 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800084e:	2301      	movs	r3, #1
 8000850:	e26c      	b.n	8000d2c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	2b00      	cmp	r3, #0
 800085c:	f000 8087 	beq.w	800096e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000860:	4b92      	ldr	r3, [pc, #584]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 8000862:	685b      	ldr	r3, [r3, #4]
 8000864:	f003 030c 	and.w	r3, r3, #12
 8000868:	2b04      	cmp	r3, #4
 800086a:	d00c      	beq.n	8000886 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800086c:	4b8f      	ldr	r3, [pc, #572]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	f003 030c 	and.w	r3, r3, #12
 8000874:	2b08      	cmp	r3, #8
 8000876:	d112      	bne.n	800089e <HAL_RCC_OscConfig+0x5e>
 8000878:	4b8c      	ldr	r3, [pc, #560]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 800087a:	685b      	ldr	r3, [r3, #4]
 800087c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000884:	d10b      	bne.n	800089e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000886:	4b89      	ldr	r3, [pc, #548]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800088e:	2b00      	cmp	r3, #0
 8000890:	d06c      	beq.n	800096c <HAL_RCC_OscConfig+0x12c>
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d168      	bne.n	800096c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800089a:	2301      	movs	r3, #1
 800089c:	e246      	b.n	8000d2c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008a6:	d106      	bne.n	80008b6 <HAL_RCC_OscConfig+0x76>
 80008a8:	4b80      	ldr	r3, [pc, #512]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a7f      	ldr	r2, [pc, #508]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 80008ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008b2:	6013      	str	r3, [r2, #0]
 80008b4:	e02e      	b.n	8000914 <HAL_RCC_OscConfig+0xd4>
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d10c      	bne.n	80008d8 <HAL_RCC_OscConfig+0x98>
 80008be:	4b7b      	ldr	r3, [pc, #492]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4a7a      	ldr	r2, [pc, #488]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 80008c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008c8:	6013      	str	r3, [r2, #0]
 80008ca:	4b78      	ldr	r3, [pc, #480]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a77      	ldr	r2, [pc, #476]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 80008d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008d4:	6013      	str	r3, [r2, #0]
 80008d6:	e01d      	b.n	8000914 <HAL_RCC_OscConfig+0xd4>
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80008e0:	d10c      	bne.n	80008fc <HAL_RCC_OscConfig+0xbc>
 80008e2:	4b72      	ldr	r3, [pc, #456]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4a71      	ldr	r2, [pc, #452]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 80008e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008ec:	6013      	str	r3, [r2, #0]
 80008ee:	4b6f      	ldr	r3, [pc, #444]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4a6e      	ldr	r2, [pc, #440]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 80008f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008f8:	6013      	str	r3, [r2, #0]
 80008fa:	e00b      	b.n	8000914 <HAL_RCC_OscConfig+0xd4>
 80008fc:	4b6b      	ldr	r3, [pc, #428]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a6a      	ldr	r2, [pc, #424]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 8000902:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000906:	6013      	str	r3, [r2, #0]
 8000908:	4b68      	ldr	r3, [pc, #416]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a67      	ldr	r2, [pc, #412]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 800090e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000912:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d013      	beq.n	8000944 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800091c:	f7ff fc76 	bl	800020c <HAL_GetTick>
 8000920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000922:	e008      	b.n	8000936 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000924:	f7ff fc72 	bl	800020c <HAL_GetTick>
 8000928:	4602      	mov	r2, r0
 800092a:	693b      	ldr	r3, [r7, #16]
 800092c:	1ad3      	subs	r3, r2, r3
 800092e:	2b64      	cmp	r3, #100	; 0x64
 8000930:	d901      	bls.n	8000936 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000932:	2303      	movs	r3, #3
 8000934:	e1fa      	b.n	8000d2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000936:	4b5d      	ldr	r3, [pc, #372]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800093e:	2b00      	cmp	r3, #0
 8000940:	d0f0      	beq.n	8000924 <HAL_RCC_OscConfig+0xe4>
 8000942:	e014      	b.n	800096e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000944:	f7ff fc62 	bl	800020c <HAL_GetTick>
 8000948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800094a:	e008      	b.n	800095e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800094c:	f7ff fc5e 	bl	800020c <HAL_GetTick>
 8000950:	4602      	mov	r2, r0
 8000952:	693b      	ldr	r3, [r7, #16]
 8000954:	1ad3      	subs	r3, r2, r3
 8000956:	2b64      	cmp	r3, #100	; 0x64
 8000958:	d901      	bls.n	800095e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800095a:	2303      	movs	r3, #3
 800095c:	e1e6      	b.n	8000d2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800095e:	4b53      	ldr	r3, [pc, #332]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000966:	2b00      	cmp	r3, #0
 8000968:	d1f0      	bne.n	800094c <HAL_RCC_OscConfig+0x10c>
 800096a:	e000      	b.n	800096e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800096c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	f003 0302 	and.w	r3, r3, #2
 8000976:	2b00      	cmp	r3, #0
 8000978:	d063      	beq.n	8000a42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800097a:	4b4c      	ldr	r3, [pc, #304]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	f003 030c 	and.w	r3, r3, #12
 8000982:	2b00      	cmp	r3, #0
 8000984:	d00b      	beq.n	800099e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000986:	4b49      	ldr	r3, [pc, #292]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	f003 030c 	and.w	r3, r3, #12
 800098e:	2b08      	cmp	r3, #8
 8000990:	d11c      	bne.n	80009cc <HAL_RCC_OscConfig+0x18c>
 8000992:	4b46      	ldr	r3, [pc, #280]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800099a:	2b00      	cmp	r3, #0
 800099c:	d116      	bne.n	80009cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800099e:	4b43      	ldr	r3, [pc, #268]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f003 0302 	and.w	r3, r3, #2
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d005      	beq.n	80009b6 <HAL_RCC_OscConfig+0x176>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	691b      	ldr	r3, [r3, #16]
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d001      	beq.n	80009b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80009b2:	2301      	movs	r3, #1
 80009b4:	e1ba      	b.n	8000d2c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009b6:	4b3d      	ldr	r3, [pc, #244]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	695b      	ldr	r3, [r3, #20]
 80009c2:	00db      	lsls	r3, r3, #3
 80009c4:	4939      	ldr	r1, [pc, #228]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 80009c6:	4313      	orrs	r3, r2
 80009c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009ca:	e03a      	b.n	8000a42 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	691b      	ldr	r3, [r3, #16]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d020      	beq.n	8000a16 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80009d4:	4b36      	ldr	r3, [pc, #216]	; (8000ab0 <HAL_RCC_OscConfig+0x270>)
 80009d6:	2201      	movs	r2, #1
 80009d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009da:	f7ff fc17 	bl	800020c <HAL_GetTick>
 80009de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009e0:	e008      	b.n	80009f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80009e2:	f7ff fc13 	bl	800020c <HAL_GetTick>
 80009e6:	4602      	mov	r2, r0
 80009e8:	693b      	ldr	r3, [r7, #16]
 80009ea:	1ad3      	subs	r3, r2, r3
 80009ec:	2b02      	cmp	r3, #2
 80009ee:	d901      	bls.n	80009f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80009f0:	2303      	movs	r3, #3
 80009f2:	e19b      	b.n	8000d2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009f4:	4b2d      	ldr	r3, [pc, #180]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f003 0302 	and.w	r3, r3, #2
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d0f0      	beq.n	80009e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a00:	4b2a      	ldr	r3, [pc, #168]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	695b      	ldr	r3, [r3, #20]
 8000a0c:	00db      	lsls	r3, r3, #3
 8000a0e:	4927      	ldr	r1, [pc, #156]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 8000a10:	4313      	orrs	r3, r2
 8000a12:	600b      	str	r3, [r1, #0]
 8000a14:	e015      	b.n	8000a42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000a16:	4b26      	ldr	r3, [pc, #152]	; (8000ab0 <HAL_RCC_OscConfig+0x270>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a1c:	f7ff fbf6 	bl	800020c <HAL_GetTick>
 8000a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a22:	e008      	b.n	8000a36 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000a24:	f7ff fbf2 	bl	800020c <HAL_GetTick>
 8000a28:	4602      	mov	r2, r0
 8000a2a:	693b      	ldr	r3, [r7, #16]
 8000a2c:	1ad3      	subs	r3, r2, r3
 8000a2e:	2b02      	cmp	r3, #2
 8000a30:	d901      	bls.n	8000a36 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000a32:	2303      	movs	r3, #3
 8000a34:	e17a      	b.n	8000d2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a36:	4b1d      	ldr	r3, [pc, #116]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f003 0302 	and.w	r3, r3, #2
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d1f0      	bne.n	8000a24 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f003 0308 	and.w	r3, r3, #8
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d03a      	beq.n	8000ac4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	699b      	ldr	r3, [r3, #24]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d019      	beq.n	8000a8a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000a56:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <HAL_RCC_OscConfig+0x274>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a5c:	f7ff fbd6 	bl	800020c <HAL_GetTick>
 8000a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a62:	e008      	b.n	8000a76 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000a64:	f7ff fbd2 	bl	800020c <HAL_GetTick>
 8000a68:	4602      	mov	r2, r0
 8000a6a:	693b      	ldr	r3, [r7, #16]
 8000a6c:	1ad3      	subs	r3, r2, r3
 8000a6e:	2b02      	cmp	r3, #2
 8000a70:	d901      	bls.n	8000a76 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000a72:	2303      	movs	r3, #3
 8000a74:	e15a      	b.n	8000d2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a76:	4b0d      	ldr	r3, [pc, #52]	; (8000aac <HAL_RCC_OscConfig+0x26c>)
 8000a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a7a:	f003 0302 	and.w	r3, r3, #2
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d0f0      	beq.n	8000a64 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000a82:	2001      	movs	r0, #1
 8000a84:	f000 faa8 	bl	8000fd8 <RCC_Delay>
 8000a88:	e01c      	b.n	8000ac4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000a8a:	4b0a      	ldr	r3, [pc, #40]	; (8000ab4 <HAL_RCC_OscConfig+0x274>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a90:	f7ff fbbc 	bl	800020c <HAL_GetTick>
 8000a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a96:	e00f      	b.n	8000ab8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000a98:	f7ff fbb8 	bl	800020c <HAL_GetTick>
 8000a9c:	4602      	mov	r2, r0
 8000a9e:	693b      	ldr	r3, [r7, #16]
 8000aa0:	1ad3      	subs	r3, r2, r3
 8000aa2:	2b02      	cmp	r3, #2
 8000aa4:	d908      	bls.n	8000ab8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	e140      	b.n	8000d2c <HAL_RCC_OscConfig+0x4ec>
 8000aaa:	bf00      	nop
 8000aac:	40021000 	.word	0x40021000
 8000ab0:	42420000 	.word	0x42420000
 8000ab4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ab8:	4b9e      	ldr	r3, [pc, #632]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000abc:	f003 0302 	and.w	r3, r3, #2
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d1e9      	bne.n	8000a98 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f003 0304 	and.w	r3, r3, #4
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	f000 80a6 	beq.w	8000c1e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ad6:	4b97      	ldr	r3, [pc, #604]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000ad8:	69db      	ldr	r3, [r3, #28]
 8000ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d10d      	bne.n	8000afe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ae2:	4b94      	ldr	r3, [pc, #592]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000ae4:	69db      	ldr	r3, [r3, #28]
 8000ae6:	4a93      	ldr	r2, [pc, #588]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aec:	61d3      	str	r3, [r2, #28]
 8000aee:	4b91      	ldr	r3, [pc, #580]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000af0:	69db      	ldr	r3, [r3, #28]
 8000af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af6:	60bb      	str	r3, [r7, #8]
 8000af8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000afa:	2301      	movs	r3, #1
 8000afc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000afe:	4b8e      	ldr	r3, [pc, #568]	; (8000d38 <HAL_RCC_OscConfig+0x4f8>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d118      	bne.n	8000b3c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b0a:	4b8b      	ldr	r3, [pc, #556]	; (8000d38 <HAL_RCC_OscConfig+0x4f8>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a8a      	ldr	r2, [pc, #552]	; (8000d38 <HAL_RCC_OscConfig+0x4f8>)
 8000b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000b16:	f7ff fb79 	bl	800020c <HAL_GetTick>
 8000b1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b1c:	e008      	b.n	8000b30 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b1e:	f7ff fb75 	bl	800020c <HAL_GetTick>
 8000b22:	4602      	mov	r2, r0
 8000b24:	693b      	ldr	r3, [r7, #16]
 8000b26:	1ad3      	subs	r3, r2, r3
 8000b28:	2b64      	cmp	r3, #100	; 0x64
 8000b2a:	d901      	bls.n	8000b30 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	e0fd      	b.n	8000d2c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b30:	4b81      	ldr	r3, [pc, #516]	; (8000d38 <HAL_RCC_OscConfig+0x4f8>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d0f0      	beq.n	8000b1e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d106      	bne.n	8000b52 <HAL_RCC_OscConfig+0x312>
 8000b44:	4b7b      	ldr	r3, [pc, #492]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000b46:	6a1b      	ldr	r3, [r3, #32]
 8000b48:	4a7a      	ldr	r2, [pc, #488]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000b4a:	f043 0301 	orr.w	r3, r3, #1
 8000b4e:	6213      	str	r3, [r2, #32]
 8000b50:	e02d      	b.n	8000bae <HAL_RCC_OscConfig+0x36e>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	68db      	ldr	r3, [r3, #12]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d10c      	bne.n	8000b74 <HAL_RCC_OscConfig+0x334>
 8000b5a:	4b76      	ldr	r3, [pc, #472]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000b5c:	6a1b      	ldr	r3, [r3, #32]
 8000b5e:	4a75      	ldr	r2, [pc, #468]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000b60:	f023 0301 	bic.w	r3, r3, #1
 8000b64:	6213      	str	r3, [r2, #32]
 8000b66:	4b73      	ldr	r3, [pc, #460]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000b68:	6a1b      	ldr	r3, [r3, #32]
 8000b6a:	4a72      	ldr	r2, [pc, #456]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000b6c:	f023 0304 	bic.w	r3, r3, #4
 8000b70:	6213      	str	r3, [r2, #32]
 8000b72:	e01c      	b.n	8000bae <HAL_RCC_OscConfig+0x36e>
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	2b05      	cmp	r3, #5
 8000b7a:	d10c      	bne.n	8000b96 <HAL_RCC_OscConfig+0x356>
 8000b7c:	4b6d      	ldr	r3, [pc, #436]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000b7e:	6a1b      	ldr	r3, [r3, #32]
 8000b80:	4a6c      	ldr	r2, [pc, #432]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000b82:	f043 0304 	orr.w	r3, r3, #4
 8000b86:	6213      	str	r3, [r2, #32]
 8000b88:	4b6a      	ldr	r3, [pc, #424]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000b8a:	6a1b      	ldr	r3, [r3, #32]
 8000b8c:	4a69      	ldr	r2, [pc, #420]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000b8e:	f043 0301 	orr.w	r3, r3, #1
 8000b92:	6213      	str	r3, [r2, #32]
 8000b94:	e00b      	b.n	8000bae <HAL_RCC_OscConfig+0x36e>
 8000b96:	4b67      	ldr	r3, [pc, #412]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000b98:	6a1b      	ldr	r3, [r3, #32]
 8000b9a:	4a66      	ldr	r2, [pc, #408]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000b9c:	f023 0301 	bic.w	r3, r3, #1
 8000ba0:	6213      	str	r3, [r2, #32]
 8000ba2:	4b64      	ldr	r3, [pc, #400]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000ba4:	6a1b      	ldr	r3, [r3, #32]
 8000ba6:	4a63      	ldr	r2, [pc, #396]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000ba8:	f023 0304 	bic.w	r3, r3, #4
 8000bac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	68db      	ldr	r3, [r3, #12]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d015      	beq.n	8000be2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bb6:	f7ff fb29 	bl	800020c <HAL_GetTick>
 8000bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000bbc:	e00a      	b.n	8000bd4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000bbe:	f7ff fb25 	bl	800020c <HAL_GetTick>
 8000bc2:	4602      	mov	r2, r0
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	1ad3      	subs	r3, r2, r3
 8000bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d901      	bls.n	8000bd4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	e0ab      	b.n	8000d2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000bd4:	4b57      	ldr	r3, [pc, #348]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000bd6:	6a1b      	ldr	r3, [r3, #32]
 8000bd8:	f003 0302 	and.w	r3, r3, #2
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d0ee      	beq.n	8000bbe <HAL_RCC_OscConfig+0x37e>
 8000be0:	e014      	b.n	8000c0c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000be2:	f7ff fb13 	bl	800020c <HAL_GetTick>
 8000be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000be8:	e00a      	b.n	8000c00 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000bea:	f7ff fb0f 	bl	800020c <HAL_GetTick>
 8000bee:	4602      	mov	r2, r0
 8000bf0:	693b      	ldr	r3, [r7, #16]
 8000bf2:	1ad3      	subs	r3, r2, r3
 8000bf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d901      	bls.n	8000c00 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	e095      	b.n	8000d2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c00:	4b4c      	ldr	r3, [pc, #304]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000c02:	6a1b      	ldr	r3, [r3, #32]
 8000c04:	f003 0302 	and.w	r3, r3, #2
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d1ee      	bne.n	8000bea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000c0c:	7dfb      	ldrb	r3, [r7, #23]
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d105      	bne.n	8000c1e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c12:	4b48      	ldr	r3, [pc, #288]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000c14:	69db      	ldr	r3, [r3, #28]
 8000c16:	4a47      	ldr	r2, [pc, #284]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000c18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c1c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	69db      	ldr	r3, [r3, #28]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f000 8081 	beq.w	8000d2a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c28:	4b42      	ldr	r3, [pc, #264]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	f003 030c 	and.w	r3, r3, #12
 8000c30:	2b08      	cmp	r3, #8
 8000c32:	d061      	beq.n	8000cf8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	69db      	ldr	r3, [r3, #28]
 8000c38:	2b02      	cmp	r3, #2
 8000c3a:	d146      	bne.n	8000cca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c3c:	4b3f      	ldr	r3, [pc, #252]	; (8000d3c <HAL_RCC_OscConfig+0x4fc>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c42:	f7ff fae3 	bl	800020c <HAL_GetTick>
 8000c46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c48:	e008      	b.n	8000c5c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c4a:	f7ff fadf 	bl	800020c <HAL_GetTick>
 8000c4e:	4602      	mov	r2, r0
 8000c50:	693b      	ldr	r3, [r7, #16]
 8000c52:	1ad3      	subs	r3, r2, r3
 8000c54:	2b02      	cmp	r3, #2
 8000c56:	d901      	bls.n	8000c5c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000c58:	2303      	movs	r3, #3
 8000c5a:	e067      	b.n	8000d2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c5c:	4b35      	ldr	r3, [pc, #212]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d1f0      	bne.n	8000c4a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6a1b      	ldr	r3, [r3, #32]
 8000c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c70:	d108      	bne.n	8000c84 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000c72:	4b30      	ldr	r3, [pc, #192]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	492d      	ldr	r1, [pc, #180]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000c80:	4313      	orrs	r3, r2
 8000c82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c84:	4b2b      	ldr	r3, [pc, #172]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6a19      	ldr	r1, [r3, #32]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c94:	430b      	orrs	r3, r1
 8000c96:	4927      	ldr	r1, [pc, #156]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000c9c:	4b27      	ldr	r3, [pc, #156]	; (8000d3c <HAL_RCC_OscConfig+0x4fc>)
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ca2:	f7ff fab3 	bl	800020c <HAL_GetTick>
 8000ca6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ca8:	e008      	b.n	8000cbc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000caa:	f7ff faaf 	bl	800020c <HAL_GetTick>
 8000cae:	4602      	mov	r2, r0
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	1ad3      	subs	r3, r2, r3
 8000cb4:	2b02      	cmp	r3, #2
 8000cb6:	d901      	bls.n	8000cbc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	e037      	b.n	8000d2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000cbc:	4b1d      	ldr	r3, [pc, #116]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d0f0      	beq.n	8000caa <HAL_RCC_OscConfig+0x46a>
 8000cc8:	e02f      	b.n	8000d2a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000cca:	4b1c      	ldr	r3, [pc, #112]	; (8000d3c <HAL_RCC_OscConfig+0x4fc>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cd0:	f7ff fa9c 	bl	800020c <HAL_GetTick>
 8000cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000cd6:	e008      	b.n	8000cea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000cd8:	f7ff fa98 	bl	800020c <HAL_GetTick>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	2b02      	cmp	r3, #2
 8000ce4:	d901      	bls.n	8000cea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	e020      	b.n	8000d2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000cea:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d1f0      	bne.n	8000cd8 <HAL_RCC_OscConfig+0x498>
 8000cf6:	e018      	b.n	8000d2a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	69db      	ldr	r3, [r3, #28]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d101      	bne.n	8000d04 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000d00:	2301      	movs	r3, #1
 8000d02:	e013      	b.n	8000d2c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000d04:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <HAL_RCC_OscConfig+0x4f4>)
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6a1b      	ldr	r3, [r3, #32]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d106      	bne.n	8000d26 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d001      	beq.n	8000d2a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	e000      	b.n	8000d2c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000d2a:	2300      	movs	r3, #0
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3718      	adds	r7, #24
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40021000 	.word	0x40021000
 8000d38:	40007000 	.word	0x40007000
 8000d3c:	42420060 	.word	0x42420060

08000d40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d101      	bne.n	8000d54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000d50:	2301      	movs	r3, #1
 8000d52:	e0d0      	b.n	8000ef6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000d54:	4b6a      	ldr	r3, [pc, #424]	; (8000f00 <HAL_RCC_ClockConfig+0x1c0>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f003 0307 	and.w	r3, r3, #7
 8000d5c:	683a      	ldr	r2, [r7, #0]
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	d910      	bls.n	8000d84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d62:	4b67      	ldr	r3, [pc, #412]	; (8000f00 <HAL_RCC_ClockConfig+0x1c0>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f023 0207 	bic.w	r2, r3, #7
 8000d6a:	4965      	ldr	r1, [pc, #404]	; (8000f00 <HAL_RCC_ClockConfig+0x1c0>)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d72:	4b63      	ldr	r3, [pc, #396]	; (8000f00 <HAL_RCC_ClockConfig+0x1c0>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f003 0307 	and.w	r3, r3, #7
 8000d7a:	683a      	ldr	r2, [r7, #0]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d001      	beq.n	8000d84 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000d80:	2301      	movs	r3, #1
 8000d82:	e0b8      	b.n	8000ef6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f003 0302 	and.w	r3, r3, #2
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d020      	beq.n	8000dd2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f003 0304 	and.w	r3, r3, #4
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d005      	beq.n	8000da8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d9c:	4b59      	ldr	r3, [pc, #356]	; (8000f04 <HAL_RCC_ClockConfig+0x1c4>)
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	4a58      	ldr	r2, [pc, #352]	; (8000f04 <HAL_RCC_ClockConfig+0x1c4>)
 8000da2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000da6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f003 0308 	and.w	r3, r3, #8
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d005      	beq.n	8000dc0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000db4:	4b53      	ldr	r3, [pc, #332]	; (8000f04 <HAL_RCC_ClockConfig+0x1c4>)
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	4a52      	ldr	r2, [pc, #328]	; (8000f04 <HAL_RCC_ClockConfig+0x1c4>)
 8000dba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000dbe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000dc0:	4b50      	ldr	r3, [pc, #320]	; (8000f04 <HAL_RCC_ClockConfig+0x1c4>)
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	494d      	ldr	r1, [pc, #308]	; (8000f04 <HAL_RCC_ClockConfig+0x1c4>)
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d040      	beq.n	8000e60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d107      	bne.n	8000df6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000de6:	4b47      	ldr	r3, [pc, #284]	; (8000f04 <HAL_RCC_ClockConfig+0x1c4>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d115      	bne.n	8000e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	e07f      	b.n	8000ef6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	d107      	bne.n	8000e0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000dfe:	4b41      	ldr	r3, [pc, #260]	; (8000f04 <HAL_RCC_ClockConfig+0x1c4>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d109      	bne.n	8000e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e073      	b.n	8000ef6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e0e:	4b3d      	ldr	r3, [pc, #244]	; (8000f04 <HAL_RCC_ClockConfig+0x1c4>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f003 0302 	and.w	r3, r3, #2
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d101      	bne.n	8000e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e06b      	b.n	8000ef6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e1e:	4b39      	ldr	r3, [pc, #228]	; (8000f04 <HAL_RCC_ClockConfig+0x1c4>)
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f023 0203 	bic.w	r2, r3, #3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	4936      	ldr	r1, [pc, #216]	; (8000f04 <HAL_RCC_ClockConfig+0x1c4>)
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000e30:	f7ff f9ec 	bl	800020c <HAL_GetTick>
 8000e34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e36:	e00a      	b.n	8000e4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e38:	f7ff f9e8 	bl	800020c <HAL_GetTick>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d901      	bls.n	8000e4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	e053      	b.n	8000ef6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e4e:	4b2d      	ldr	r3, [pc, #180]	; (8000f04 <HAL_RCC_ClockConfig+0x1c4>)
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f003 020c 	and.w	r2, r3, #12
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d1eb      	bne.n	8000e38 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000e60:	4b27      	ldr	r3, [pc, #156]	; (8000f00 <HAL_RCC_ClockConfig+0x1c0>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f003 0307 	and.w	r3, r3, #7
 8000e68:	683a      	ldr	r2, [r7, #0]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	d210      	bcs.n	8000e90 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e6e:	4b24      	ldr	r3, [pc, #144]	; (8000f00 <HAL_RCC_ClockConfig+0x1c0>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f023 0207 	bic.w	r2, r3, #7
 8000e76:	4922      	ldr	r1, [pc, #136]	; (8000f00 <HAL_RCC_ClockConfig+0x1c0>)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e7e:	4b20      	ldr	r3, [pc, #128]	; (8000f00 <HAL_RCC_ClockConfig+0x1c0>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	683a      	ldr	r2, [r7, #0]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d001      	beq.n	8000e90 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	e032      	b.n	8000ef6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f003 0304 	and.w	r3, r3, #4
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d008      	beq.n	8000eae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e9c:	4b19      	ldr	r3, [pc, #100]	; (8000f04 <HAL_RCC_ClockConfig+0x1c4>)
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	4916      	ldr	r1, [pc, #88]	; (8000f04 <HAL_RCC_ClockConfig+0x1c4>)
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f003 0308 	and.w	r3, r3, #8
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d009      	beq.n	8000ece <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000eba:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <HAL_RCC_ClockConfig+0x1c4>)
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	691b      	ldr	r3, [r3, #16]
 8000ec6:	00db      	lsls	r3, r3, #3
 8000ec8:	490e      	ldr	r1, [pc, #56]	; (8000f04 <HAL_RCC_ClockConfig+0x1c4>)
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000ece:	f000 f821 	bl	8000f14 <HAL_RCC_GetSysClockFreq>
 8000ed2:	4601      	mov	r1, r0
 8000ed4:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <HAL_RCC_ClockConfig+0x1c4>)
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	091b      	lsrs	r3, r3, #4
 8000eda:	f003 030f 	and.w	r3, r3, #15
 8000ede:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <HAL_RCC_ClockConfig+0x1c8>)
 8000ee0:	5cd3      	ldrb	r3, [r2, r3]
 8000ee2:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee6:	4a09      	ldr	r2, [pc, #36]	; (8000f0c <HAL_RCC_ClockConfig+0x1cc>)
 8000ee8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000eea:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <HAL_RCC_ClockConfig+0x1d0>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff f94a 	bl	8000188 <HAL_InitTick>

  return HAL_OK;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40022000 	.word	0x40022000
 8000f04:	40021000 	.word	0x40021000
 8000f08:	08001e5c 	.word	0x08001e5c
 8000f0c:	20000008 	.word	0x20000008
 8000f10:	20000000 	.word	0x20000000

08000f14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000f14:	b490      	push	{r4, r7}
 8000f16:	b08a      	sub	sp, #40	; 0x28
 8000f18:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000f1a:	4b2a      	ldr	r3, [pc, #168]	; (8000fc4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000f1c:	1d3c      	adds	r4, r7, #4
 8000f1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000f24:	4b28      	ldr	r3, [pc, #160]	; (8000fc8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000f26:	881b      	ldrh	r3, [r3, #0]
 8000f28:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61fb      	str	r3, [r7, #28]
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61bb      	str	r3, [r7, #24]
 8000f32:	2300      	movs	r3, #0
 8000f34:	627b      	str	r3, [r7, #36]	; 0x24
 8000f36:	2300      	movs	r3, #0
 8000f38:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000f3e:	4b23      	ldr	r3, [pc, #140]	; (8000fcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	f003 030c 	and.w	r3, r3, #12
 8000f4a:	2b04      	cmp	r3, #4
 8000f4c:	d002      	beq.n	8000f54 <HAL_RCC_GetSysClockFreq+0x40>
 8000f4e:	2b08      	cmp	r3, #8
 8000f50:	d003      	beq.n	8000f5a <HAL_RCC_GetSysClockFreq+0x46>
 8000f52:	e02d      	b.n	8000fb0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000f54:	4b1e      	ldr	r3, [pc, #120]	; (8000fd0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000f56:	623b      	str	r3, [r7, #32]
      break;
 8000f58:	e02d      	b.n	8000fb6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	0c9b      	lsrs	r3, r3, #18
 8000f5e:	f003 030f 	and.w	r3, r3, #15
 8000f62:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000f66:	4413      	add	r3, r2
 8000f68:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000f6c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d013      	beq.n	8000fa0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000f78:	4b14      	ldr	r3, [pc, #80]	; (8000fcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	0c5b      	lsrs	r3, r3, #17
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000f86:	4413      	add	r3, r2
 8000f88:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000f8c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	4a0f      	ldr	r2, [pc, #60]	; (8000fd0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000f92:	fb02 f203 	mul.w	r2, r2, r3
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8000f9e:	e004      	b.n	8000faa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	4a0c      	ldr	r2, [pc, #48]	; (8000fd4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000fa4:	fb02 f303 	mul.w	r3, r2, r3
 8000fa8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8000faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fac:	623b      	str	r3, [r7, #32]
      break;
 8000fae:	e002      	b.n	8000fb6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000fb0:	4b07      	ldr	r3, [pc, #28]	; (8000fd0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000fb2:	623b      	str	r3, [r7, #32]
      break;
 8000fb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000fb6:	6a3b      	ldr	r3, [r7, #32]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3728      	adds	r7, #40	; 0x28
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bc90      	pop	{r4, r7}
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	08001e18 	.word	0x08001e18
 8000fc8:	08001e28 	.word	0x08001e28
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	007a1200 	.word	0x007a1200
 8000fd4:	003d0900 	.word	0x003d0900

08000fd8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000fe0:	4b0a      	ldr	r3, [pc, #40]	; (800100c <RCC_Delay+0x34>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <RCC_Delay+0x38>)
 8000fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8000fea:	0a5b      	lsrs	r3, r3, #9
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	fb02 f303 	mul.w	r3, r2, r3
 8000ff2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8000ff4:	bf00      	nop
  }
  while (Delay --);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	1e5a      	subs	r2, r3, #1
 8000ffa:	60fa      	str	r2, [r7, #12]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d1f9      	bne.n	8000ff4 <RCC_Delay+0x1c>
}
 8001000:	bf00      	nop
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	bc80      	pop	{r7}
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	20000008 	.word	0x20000008
 8001010:	10624dd3 	.word	0x10624dd3

08001014 <save_to_flash>:
*/

#include "flash.h"

void save_to_flash(uint8_t *data)
{
 8001014:	b5b0      	push	{r4, r5, r7, lr}
 8001016:	b08e      	sub	sp, #56	; 0x38
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	466b      	mov	r3, sp
 800101e:	461d      	mov	r5, r3
	volatile uint32_t data_to_FLASH[(strlen((char*)data)/4)	+ (int)((strlen((char*)data) % 4) != 0)];
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f7ff f893 	bl	800014c <strlen>
 8001026:	4603      	mov	r3, r0
 8001028:	089c      	lsrs	r4, r3, #2
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f7ff f88e 	bl	800014c <strlen>
 8001030:	4603      	mov	r3, r0
 8001032:	f003 0303 	and.w	r3, r3, #3
 8001036:	2b00      	cmp	r3, #0
 8001038:	bf14      	ite	ne
 800103a:	2301      	movne	r3, #1
 800103c:	2300      	moveq	r3, #0
 800103e:	b2db      	uxtb	r3, r3
 8001040:	18e0      	adds	r0, r4, r3
 8001042:	4603      	mov	r3, r0
 8001044:	3b01      	subs	r3, #1
 8001046:	637b      	str	r3, [r7, #52]	; 0x34
 8001048:	4601      	mov	r1, r0
 800104a:	f04f 0200 	mov.w	r2, #0
 800104e:	f04f 0300 	mov.w	r3, #0
 8001052:	f04f 0400 	mov.w	r4, #0
 8001056:	0154      	lsls	r4, r2, #5
 8001058:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800105c:	014b      	lsls	r3, r1, #5
 800105e:	4601      	mov	r1, r0
 8001060:	f04f 0200 	mov.w	r2, #0
 8001064:	f04f 0300 	mov.w	r3, #0
 8001068:	f04f 0400 	mov.w	r4, #0
 800106c:	0154      	lsls	r4, r2, #5
 800106e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001072:	014b      	lsls	r3, r1, #5
 8001074:	0083      	lsls	r3, r0, #2
 8001076:	3303      	adds	r3, #3
 8001078:	3307      	adds	r3, #7
 800107a:	08db      	lsrs	r3, r3, #3
 800107c:	00db      	lsls	r3, r3, #3
 800107e:	ebad 0d03 	sub.w	sp, sp, r3
 8001082:	466b      	mov	r3, sp
 8001084:	3303      	adds	r3, #3
 8001086:	089b      	lsrs	r3, r3, #2
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	633b      	str	r3, [r7, #48]	; 0x30
	memset((uint8_t*)data_to_FLASH, 0, strlen((char*)data_to_FLASH));
 800108c:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800108e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff f85b 	bl	800014c <strlen>
 8001096:	4603      	mov	r3, r0
 8001098:	461a      	mov	r2, r3
 800109a:	2100      	movs	r1, #0
 800109c:	4620      	mov	r0, r4
 800109e:	f000 fa8d 	bl	80015bc <memset>
	strcpy((char*)data_to_FLASH, (char*)data);
 80010a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010a4:	6879      	ldr	r1, [r7, #4]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f000 fab0 	bl	800160c <strcpy>

	volatile uint32_t data_length = (strlen((char*)data_to_FLASH) / 4)
 80010ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff f84c 	bl	800014c <strlen>
 80010b4:	4603      	mov	r3, r0
 80010b6:	089c      	lsrs	r4, r3, #2
									+ (int)((strlen((char*)data_to_FLASH) % 4) != 0);
 80010b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff f846 	bl	800014c <strlen>
 80010c0:	4603      	mov	r3, r0
 80010c2:	f003 0303 	and.w	r3, r3, #3
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	bf14      	ite	ne
 80010ca:	2301      	movne	r3, #1
 80010cc:	2300      	moveq	r3, #0
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	4423      	add	r3, r4
	volatile uint32_t data_length = (strlen((char*)data_to_FLASH) / 4)
 80010d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	volatile uint16_t pages = (strlen((char*)data)/page_size)
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff f839 	bl	800014c <strlen>
 80010da:	4603      	mov	r3, r0
 80010dc:	0adb      	lsrs	r3, r3, #11
									+ (int)((strlen((char*)data)%page_size) != 0);
 80010de:	b29c      	uxth	r4, r3
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f7ff f833 	bl	800014c <strlen>
 80010e6:	4603      	mov	r3, r0
 80010e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	bf14      	ite	ne
 80010f0:	2301      	movne	r3, #1
 80010f2:	2300      	moveq	r3, #0
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	4423      	add	r3, r4
 80010fa:	b29b      	uxth	r3, r3
	volatile uint16_t pages = (strlen((char*)data)/page_size)
 80010fc:	857b      	strh	r3, [r7, #42]	; 0x2a
	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 80010fe:	f7ff f9e3 	bl	80004c8 <HAL_FLASH_Unlock>

	/* Allow Access to option bytes sector */
	HAL_FLASH_OB_Unlock();
 8001102:	f7ff fa17 	bl	8000534 <HAL_FLASH_OB_Unlock>

	/* Fill EraseInit structure*/
	FLASH_EraseInitTypeDef EraseInitStruct;
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8001106:	2300      	movs	r3, #0
 8001108:	61bb      	str	r3, [r7, #24]
	EraseInitStruct.PageAddress = FLASH_STORAGE;
 800110a:	4b20      	ldr	r3, [pc, #128]	; (800118c <save_to_flash+0x178>)
 800110c:	623b      	str	r3, [r7, #32]
	EraseInitStruct.NbPages = pages;
 800110e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001110:	b29b      	uxth	r3, r3
 8001112:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PageError;

	volatile uint32_t write_cnt=0, index=0;
 8001114:	2300      	movs	r3, #0
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	2300      	movs	r3, #0
 800111a:	60fb      	str	r3, [r7, #12]

	volatile HAL_StatusTypeDef status;
	status = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 800111c:	f107 0214 	add.w	r2, r7, #20
 8001120:	f107 0318 	add.w	r3, r7, #24
 8001124:	4611      	mov	r1, r2
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff fae2 	bl	80006f0 <HAL_FLASHEx_Erase>
 800112c:	4603      	mov	r3, r0
 800112e:	72fb      	strb	r3, [r7, #11]
	while(index < data_length)
 8001130:	e01f      	b.n	8001172 <save_to_flash+0x15e>
	{
		if (status == HAL_OK)
 8001132:	7afb      	ldrb	r3, [r7, #11]
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b00      	cmp	r3, #0
 8001138:	d11b      	bne.n	8001172 <save_to_flash+0x15e>
		{
			status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_STORAGE+write_cnt, data_to_FLASH[index]);
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 8001140:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
 8001144:	68fa      	ldr	r2, [r7, #12]
 8001146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800114c:	f04f 0400 	mov.w	r4, #0
 8001150:	461a      	mov	r2, r3
 8001152:	4623      	mov	r3, r4
 8001154:	2002      	movs	r0, #2
 8001156:	f7ff f947 	bl	80003e8 <HAL_FLASH_Program>
 800115a:	4603      	mov	r3, r0
 800115c:	72fb      	strb	r3, [r7, #11]
			if(status == HAL_OK)
 800115e:	7afb      	ldrb	r3, [r7, #11]
 8001160:	b2db      	uxtb	r3, r3
 8001162:	2b00      	cmp	r3, #0
 8001164:	d105      	bne.n	8001172 <save_to_flash+0x15e>
			{
				write_cnt += 4;
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	3304      	adds	r3, #4
 800116a:	613b      	str	r3, [r7, #16]
				index++;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	3301      	adds	r3, #1
 8001170:	60fb      	str	r3, [r7, #12]
	while(index < data_length)
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001176:	429a      	cmp	r2, r3
 8001178:	d3db      	bcc.n	8001132 <save_to_flash+0x11e>
			 }
		 }
	  }

	  HAL_FLASH_OB_Lock();
 800117a:	f7ff f9f7 	bl	800056c <HAL_FLASH_OB_Lock>
	  HAL_FLASH_Lock();
 800117e:	f7ff f9c9 	bl	8000514 <HAL_FLASH_Lock>
 8001182:	46ad      	mov	sp, r5
}
 8001184:	bf00      	nop
 8001186:	3738      	adds	r7, #56	; 0x38
 8001188:	46bd      	mov	sp, r7
 800118a:	bdb0      	pop	{r4, r5, r7, pc}
 800118c:	08010000 	.word	0x08010000

08001190 <read_flash>:

void read_flash(uint8_t* data)
{
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
	volatile uint32_t read_data;
	volatile uint32_t read_cnt=0;
 8001198:	2300      	movs	r3, #0
 800119a:	60bb      	str	r3, [r7, #8]
	do
	{
		read_data = *(uint32_t*)(FLASH_STORAGE + read_cnt);
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80011a2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	60fb      	str	r3, [r7, #12]
		if(read_data != 0xFFFFFFFF)
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011b0:	d020      	beq.n	80011f4 <read_flash+0x64>
		{
			data[read_cnt] = (uint8_t)read_data;
 80011b2:	68f9      	ldr	r1, [r7, #12]
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	4413      	add	r3, r2
 80011ba:	b2ca      	uxtb	r2, r1
 80011bc:	701a      	strb	r2, [r3, #0]
			data[read_cnt + 1] = (uint8_t)(read_data >> 8);
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	0a19      	lsrs	r1, r3, #8
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	3301      	adds	r3, #1
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	4413      	add	r3, r2
 80011ca:	b2ca      	uxtb	r2, r1
 80011cc:	701a      	strb	r2, [r3, #0]
			data[read_cnt + 2] = (uint8_t)(read_data >> 16);
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	0c19      	lsrs	r1, r3, #16
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	3302      	adds	r3, #2
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	4413      	add	r3, r2
 80011da:	b2ca      	uxtb	r2, r1
 80011dc:	701a      	strb	r2, [r3, #0]
			data[read_cnt + 3] = (uint8_t)(read_data >> 24);
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	0e19      	lsrs	r1, r3, #24
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	3303      	adds	r3, #3
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	4413      	add	r3, r2
 80011ea:	b2ca      	uxtb	r2, r1
 80011ec:	701a      	strb	r2, [r3, #0]
			read_cnt += 4;
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	3304      	adds	r3, #4
 80011f2:	60bb      	str	r3, [r7, #8]
		}
	}while(read_data != 0xFFFFFFFF);
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011fa:	d1cf      	bne.n	800119c <read_flash+0xc>
}
 80011fc:	bf00      	nop
 80011fe:	3714      	adds	r7, #20
 8001200:	46bd      	mov	sp, r7
 8001202:	bc80      	pop	{r7}
 8001204:	4770      	bx	lr
	...

08001208 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001208:	b590      	push	{r4, r7, lr}
 800120a:	b0ab      	sub	sp, #172	; 0xac
 800120c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800120e:	f7fe ffa5 	bl	800015c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001212:	f000 f859 	bl	80012c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001216:	f000 f89d 	bl	8001354 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  //Salvando uma string na flash interna
  char write_data[50];
  memset(write_data, 0, sizeof(write_data));
 800121a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800121e:	2232      	movs	r2, #50	; 0x32
 8001220:	2100      	movs	r1, #0
 8001222:	4618      	mov	r0, r3
 8001224:	f000 f9ca 	bl	80015bc <memset>
  strcpy(write_data, "Hello World!!!");
 8001228:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800122c:	4a23      	ldr	r2, [pc, #140]	; (80012bc <main+0xb4>)
 800122e:	461c      	mov	r4, r3
 8001230:	4613      	mov	r3, r2
 8001232:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001234:	c407      	stmia	r4!, {r0, r1, r2}
 8001236:	8023      	strh	r3, [r4, #0]
 8001238:	3402      	adds	r4, #2
 800123a:	0c1b      	lsrs	r3, r3, #16
 800123c:	7023      	strb	r3, [r4, #0]
  save_to_flash((uint8_t*)write_data);
 800123e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff fee6 	bl	8001014 <save_to_flash>

  //Lendo uma string na flash interna
  char read_data[50];
  memset(read_data, 0, sizeof(read_data));
 8001248:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800124c:	2232      	movs	r2, #50	; 0x32
 800124e:	2100      	movs	r1, #0
 8001250:	4618      	mov	r0, r3
 8001252:	f000 f9b3 	bl	80015bc <memset>
  read_flash((uint8_t*)read_data);
 8001256:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff ff98 	bl	8001190 <read_flash>

  //Salvando um número float na flash interna
  float write_number = 235.756f;
 8001260:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <main+0xb8>)
 8001262:	62fb      	str	r3, [r7, #44]	; 0x2c
  float *pointer_write = &write_number;
 8001264:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001268:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  save_to_flash((uint8_t*)pointer_write);
 800126c:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8001270:	f7ff fed0 	bl	8001014 <save_to_flash>

  //Lendo um número float na flash interna
  float read_number = 0.0f;
 8001274:	f04f 0300 	mov.w	r3, #0
 8001278:	62bb      	str	r3, [r7, #40]	; 0x28
  float *pointer_read = &read_number;
 800127a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800127e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  read_flash((uint8_t*)pointer_read);
 8001282:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8001286:	f7ff ff83 	bl	8001190 <read_flash>

  //Salvando um número int na flash interna
  char writeValue[30];
  uint8_t number_write = 43, number_read;
 800128a:	232b      	movs	r3, #43	; 0x2b
 800128c:	71fb      	strb	r3, [r7, #7]
  uint8_t *pointer_write1 = &number_write;
 800128e:	1dfb      	adds	r3, r7, #7
 8001290:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  save_to_flash((uint8_t*)pointer_write1);
 8001294:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8001298:	f7ff febc 	bl	8001014 <save_to_flash>

  //Lendo um número int na flash interna
  uint8_t *pointer_read1 = &number_read;
 800129c:	1dbb      	adds	r3, r7, #6
 800129e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  read_flash((uint8_t*)pointer_read1);
 80012a2:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80012a6:	f7ff ff73 	bl	8001190 <read_flash>

  //Associando o número lido em uma string
  sprintf(writeValue,"O valor da variavel number= %d",number_read);
 80012aa:	79bb      	ldrb	r3, [r7, #6]
 80012ac:	461a      	mov	r2, r3
 80012ae:	f107 0308 	add.w	r3, r7, #8
 80012b2:	4904      	ldr	r1, [pc, #16]	; (80012c4 <main+0xbc>)
 80012b4:	4618      	mov	r0, r3
 80012b6:	f000 f989 	bl	80015cc <siprintf>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012ba:	e7fe      	b.n	80012ba <main+0xb2>
 80012bc:	08001e2c 	.word	0x08001e2c
 80012c0:	436bc189 	.word	0x436bc189
 80012c4:	08001e3c 	.word	0x08001e3c

080012c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b090      	sub	sp, #64	; 0x40
 80012cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ce:	f107 0318 	add.w	r3, r7, #24
 80012d2:	2228      	movs	r2, #40	; 0x28
 80012d4:	2100      	movs	r1, #0
 80012d6:	4618      	mov	r0, r3
 80012d8:	f000 f970 	bl	80015bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012dc:	1d3b      	adds	r3, r7, #4
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]
 80012e6:	60da      	str	r2, [r3, #12]
 80012e8:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012ea:	2301      	movs	r3, #1
 80012ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012f4:	2300      	movs	r3, #0
 80012f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012f8:	2301      	movs	r3, #1
 80012fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012fc:	2302      	movs	r3, #2
 80012fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001300:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001304:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001306:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800130a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800130c:	f107 0318 	add.w	r3, r7, #24
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff fa95 	bl	8000840 <HAL_RCC_OscConfig>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800131c:	f000 f83c 	bl	8001398 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001320:	230f      	movs	r3, #15
 8001322:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001324:	2302      	movs	r3, #2
 8001326:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001328:	2300      	movs	r3, #0
 800132a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800132c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001330:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001332:	2300      	movs	r3, #0
 8001334:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001336:	1d3b      	adds	r3, r7, #4
 8001338:	2102      	movs	r1, #2
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff fd00 	bl	8000d40 <HAL_RCC_ClockConfig>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001346:	f000 f827 	bl	8001398 <Error_Handler>
  }
}
 800134a:	bf00      	nop
 800134c:	3740      	adds	r7, #64	; 0x40
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
	...

08001354 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800135a:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <MX_GPIO_Init+0x40>)
 800135c:	699b      	ldr	r3, [r3, #24]
 800135e:	4a0d      	ldr	r2, [pc, #52]	; (8001394 <MX_GPIO_Init+0x40>)
 8001360:	f043 0320 	orr.w	r3, r3, #32
 8001364:	6193      	str	r3, [r2, #24]
 8001366:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <MX_GPIO_Init+0x40>)
 8001368:	699b      	ldr	r3, [r3, #24]
 800136a:	f003 0320 	and.w	r3, r3, #32
 800136e:	607b      	str	r3, [r7, #4]
 8001370:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001372:	4b08      	ldr	r3, [pc, #32]	; (8001394 <MX_GPIO_Init+0x40>)
 8001374:	699b      	ldr	r3, [r3, #24]
 8001376:	4a07      	ldr	r2, [pc, #28]	; (8001394 <MX_GPIO_Init+0x40>)
 8001378:	f043 0304 	orr.w	r3, r3, #4
 800137c:	6193      	str	r3, [r2, #24]
 800137e:	4b05      	ldr	r3, [pc, #20]	; (8001394 <MX_GPIO_Init+0x40>)
 8001380:	699b      	ldr	r3, [r3, #24]
 8001382:	f003 0304 	and.w	r3, r3, #4
 8001386:	603b      	str	r3, [r7, #0]
 8001388:	683b      	ldr	r3, [r7, #0]

}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr
 8001394:	40021000 	.word	0x40021000

08001398 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr

080013a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013aa:	4b15      	ldr	r3, [pc, #84]	; (8001400 <HAL_MspInit+0x5c>)
 80013ac:	699b      	ldr	r3, [r3, #24]
 80013ae:	4a14      	ldr	r2, [pc, #80]	; (8001400 <HAL_MspInit+0x5c>)
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	6193      	str	r3, [r2, #24]
 80013b6:	4b12      	ldr	r3, [pc, #72]	; (8001400 <HAL_MspInit+0x5c>)
 80013b8:	699b      	ldr	r3, [r3, #24]
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	60bb      	str	r3, [r7, #8]
 80013c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013c2:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <HAL_MspInit+0x5c>)
 80013c4:	69db      	ldr	r3, [r3, #28]
 80013c6:	4a0e      	ldr	r2, [pc, #56]	; (8001400 <HAL_MspInit+0x5c>)
 80013c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013cc:	61d3      	str	r3, [r2, #28]
 80013ce:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <HAL_MspInit+0x5c>)
 80013d0:	69db      	ldr	r3, [r3, #28]
 80013d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d6:	607b      	str	r3, [r7, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013da:	4b0a      	ldr	r3, [pc, #40]	; (8001404 <HAL_MspInit+0x60>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	4a04      	ldr	r2, [pc, #16]	; (8001404 <HAL_MspInit+0x60>)
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013f6:	bf00      	nop
 80013f8:	3714      	adds	r7, #20
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bc80      	pop	{r7}
 80013fe:	4770      	bx	lr
 8001400:	40021000 	.word	0x40021000
 8001404:	40010000 	.word	0x40010000

08001408 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr

08001414 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001418:	e7fe      	b.n	8001418 <HardFault_Handler+0x4>

0800141a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800141a:	b480      	push	{r7}
 800141c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800141e:	e7fe      	b.n	800141e <MemManage_Handler+0x4>

08001420 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001424:	e7fe      	b.n	8001424 <BusFault_Handler+0x4>

08001426 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800142a:	e7fe      	b.n	800142a <UsageFault_Handler+0x4>

0800142c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	bc80      	pop	{r7}
 8001436:	4770      	bx	lr

08001438 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr

08001444 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr

08001450 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001454:	f7fe fec8 	bl	80001e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001458:	bf00      	nop
 800145a:	bd80      	pop	{r7, pc}

0800145c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001464:	4b11      	ldr	r3, [pc, #68]	; (80014ac <_sbrk+0x50>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d102      	bne.n	8001472 <_sbrk+0x16>
		heap_end = &end;
 800146c:	4b0f      	ldr	r3, [pc, #60]	; (80014ac <_sbrk+0x50>)
 800146e:	4a10      	ldr	r2, [pc, #64]	; (80014b0 <_sbrk+0x54>)
 8001470:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001472:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <_sbrk+0x50>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001478:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <_sbrk+0x50>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4413      	add	r3, r2
 8001480:	466a      	mov	r2, sp
 8001482:	4293      	cmp	r3, r2
 8001484:	d907      	bls.n	8001496 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001486:	f000 f86f 	bl	8001568 <__errno>
 800148a:	4602      	mov	r2, r0
 800148c:	230c      	movs	r3, #12
 800148e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001490:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001494:	e006      	b.n	80014a4 <_sbrk+0x48>
	}

	heap_end += incr;
 8001496:	4b05      	ldr	r3, [pc, #20]	; (80014ac <_sbrk+0x50>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4413      	add	r3, r2
 800149e:	4a03      	ldr	r2, [pc, #12]	; (80014ac <_sbrk+0x50>)
 80014a0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80014a2:	68fb      	ldr	r3, [r7, #12]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	2000008c 	.word	0x2000008c
 80014b0:	200000c8 	.word	0x200000c8

080014b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80014b8:	4b15      	ldr	r3, [pc, #84]	; (8001510 <SystemInit+0x5c>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a14      	ldr	r2, [pc, #80]	; (8001510 <SystemInit+0x5c>)
 80014be:	f043 0301 	orr.w	r3, r3, #1
 80014c2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80014c4:	4b12      	ldr	r3, [pc, #72]	; (8001510 <SystemInit+0x5c>)
 80014c6:	685a      	ldr	r2, [r3, #4]
 80014c8:	4911      	ldr	r1, [pc, #68]	; (8001510 <SystemInit+0x5c>)
 80014ca:	4b12      	ldr	r3, [pc, #72]	; (8001514 <SystemInit+0x60>)
 80014cc:	4013      	ands	r3, r2
 80014ce:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80014d0:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <SystemInit+0x5c>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a0e      	ldr	r2, [pc, #56]	; (8001510 <SystemInit+0x5c>)
 80014d6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80014da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014de:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014e0:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <SystemInit+0x5c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a0a      	ldr	r2, [pc, #40]	; (8001510 <SystemInit+0x5c>)
 80014e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ea:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80014ec:	4b08      	ldr	r3, [pc, #32]	; (8001510 <SystemInit+0x5c>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	4a07      	ldr	r2, [pc, #28]	; (8001510 <SystemInit+0x5c>)
 80014f2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80014f6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80014f8:	4b05      	ldr	r3, [pc, #20]	; (8001510 <SystemInit+0x5c>)
 80014fa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80014fe:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001500:	4b05      	ldr	r3, [pc, #20]	; (8001518 <SystemInit+0x64>)
 8001502:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001506:	609a      	str	r2, [r3, #8]
#endif 
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr
 8001510:	40021000 	.word	0x40021000
 8001514:	f8ff0000 	.word	0xf8ff0000
 8001518:	e000ed00 	.word	0xe000ed00

0800151c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800151c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800151e:	e003      	b.n	8001528 <LoopCopyDataInit>

08001520 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001520:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001522:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001524:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001526:	3104      	adds	r1, #4

08001528 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001528:	480a      	ldr	r0, [pc, #40]	; (8001554 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800152a:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800152c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800152e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001530:	d3f6      	bcc.n	8001520 <CopyDataInit>
  ldr r2, =_sbss
 8001532:	4a0a      	ldr	r2, [pc, #40]	; (800155c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001534:	e002      	b.n	800153c <LoopFillZerobss>

08001536 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001536:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001538:	f842 3b04 	str.w	r3, [r2], #4

0800153c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800153c:	4b08      	ldr	r3, [pc, #32]	; (8001560 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800153e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001540:	d3f9      	bcc.n	8001536 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001542:	f7ff ffb7 	bl	80014b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001546:	f000 f815 	bl	8001574 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800154a:	f7ff fe5d 	bl	8001208 <main>
  bx lr
 800154e:	4770      	bx	lr
  ldr r3, =_sidata
 8001550:	08001ea8 	.word	0x08001ea8
  ldr r0, =_sdata
 8001554:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001558:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 800155c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8001560:	200000c4 	.word	0x200000c4

08001564 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001564:	e7fe      	b.n	8001564 <ADC1_2_IRQHandler>
	...

08001568 <__errno>:
 8001568:	4b01      	ldr	r3, [pc, #4]	; (8001570 <__errno+0x8>)
 800156a:	6818      	ldr	r0, [r3, #0]
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	2000000c 	.word	0x2000000c

08001574 <__libc_init_array>:
 8001574:	b570      	push	{r4, r5, r6, lr}
 8001576:	2500      	movs	r5, #0
 8001578:	4e0c      	ldr	r6, [pc, #48]	; (80015ac <__libc_init_array+0x38>)
 800157a:	4c0d      	ldr	r4, [pc, #52]	; (80015b0 <__libc_init_array+0x3c>)
 800157c:	1ba4      	subs	r4, r4, r6
 800157e:	10a4      	asrs	r4, r4, #2
 8001580:	42a5      	cmp	r5, r4
 8001582:	d109      	bne.n	8001598 <__libc_init_array+0x24>
 8001584:	f000 fc3c 	bl	8001e00 <_init>
 8001588:	2500      	movs	r5, #0
 800158a:	4e0a      	ldr	r6, [pc, #40]	; (80015b4 <__libc_init_array+0x40>)
 800158c:	4c0a      	ldr	r4, [pc, #40]	; (80015b8 <__libc_init_array+0x44>)
 800158e:	1ba4      	subs	r4, r4, r6
 8001590:	10a4      	asrs	r4, r4, #2
 8001592:	42a5      	cmp	r5, r4
 8001594:	d105      	bne.n	80015a2 <__libc_init_array+0x2e>
 8001596:	bd70      	pop	{r4, r5, r6, pc}
 8001598:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800159c:	4798      	blx	r3
 800159e:	3501      	adds	r5, #1
 80015a0:	e7ee      	b.n	8001580 <__libc_init_array+0xc>
 80015a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80015a6:	4798      	blx	r3
 80015a8:	3501      	adds	r5, #1
 80015aa:	e7f2      	b.n	8001592 <__libc_init_array+0x1e>
 80015ac:	08001ea0 	.word	0x08001ea0
 80015b0:	08001ea0 	.word	0x08001ea0
 80015b4:	08001ea0 	.word	0x08001ea0
 80015b8:	08001ea4 	.word	0x08001ea4

080015bc <memset>:
 80015bc:	4603      	mov	r3, r0
 80015be:	4402      	add	r2, r0
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d100      	bne.n	80015c6 <memset+0xa>
 80015c4:	4770      	bx	lr
 80015c6:	f803 1b01 	strb.w	r1, [r3], #1
 80015ca:	e7f9      	b.n	80015c0 <memset+0x4>

080015cc <siprintf>:
 80015cc:	b40e      	push	{r1, r2, r3}
 80015ce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80015d2:	b500      	push	{lr}
 80015d4:	b09c      	sub	sp, #112	; 0x70
 80015d6:	ab1d      	add	r3, sp, #116	; 0x74
 80015d8:	9002      	str	r0, [sp, #8]
 80015da:	9006      	str	r0, [sp, #24]
 80015dc:	9107      	str	r1, [sp, #28]
 80015de:	9104      	str	r1, [sp, #16]
 80015e0:	4808      	ldr	r0, [pc, #32]	; (8001604 <siprintf+0x38>)
 80015e2:	4909      	ldr	r1, [pc, #36]	; (8001608 <siprintf+0x3c>)
 80015e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80015e8:	9105      	str	r1, [sp, #20]
 80015ea:	6800      	ldr	r0, [r0, #0]
 80015ec:	a902      	add	r1, sp, #8
 80015ee:	9301      	str	r3, [sp, #4]
 80015f0:	f000 f86e 	bl	80016d0 <_svfiprintf_r>
 80015f4:	2200      	movs	r2, #0
 80015f6:	9b02      	ldr	r3, [sp, #8]
 80015f8:	701a      	strb	r2, [r3, #0]
 80015fa:	b01c      	add	sp, #112	; 0x70
 80015fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8001600:	b003      	add	sp, #12
 8001602:	4770      	bx	lr
 8001604:	2000000c 	.word	0x2000000c
 8001608:	ffff0208 	.word	0xffff0208

0800160c <strcpy>:
 800160c:	4603      	mov	r3, r0
 800160e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001612:	f803 2b01 	strb.w	r2, [r3], #1
 8001616:	2a00      	cmp	r2, #0
 8001618:	d1f9      	bne.n	800160e <strcpy+0x2>
 800161a:	4770      	bx	lr

0800161c <__ssputs_r>:
 800161c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001620:	688e      	ldr	r6, [r1, #8]
 8001622:	4682      	mov	sl, r0
 8001624:	429e      	cmp	r6, r3
 8001626:	460c      	mov	r4, r1
 8001628:	4690      	mov	r8, r2
 800162a:	4699      	mov	r9, r3
 800162c:	d837      	bhi.n	800169e <__ssputs_r+0x82>
 800162e:	898a      	ldrh	r2, [r1, #12]
 8001630:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001634:	d031      	beq.n	800169a <__ssputs_r+0x7e>
 8001636:	2302      	movs	r3, #2
 8001638:	6825      	ldr	r5, [r4, #0]
 800163a:	6909      	ldr	r1, [r1, #16]
 800163c:	1a6f      	subs	r7, r5, r1
 800163e:	6965      	ldr	r5, [r4, #20]
 8001640:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001644:	fb95 f5f3 	sdiv	r5, r5, r3
 8001648:	f109 0301 	add.w	r3, r9, #1
 800164c:	443b      	add	r3, r7
 800164e:	429d      	cmp	r5, r3
 8001650:	bf38      	it	cc
 8001652:	461d      	movcc	r5, r3
 8001654:	0553      	lsls	r3, r2, #21
 8001656:	d530      	bpl.n	80016ba <__ssputs_r+0x9e>
 8001658:	4629      	mov	r1, r5
 800165a:	f000 fb37 	bl	8001ccc <_malloc_r>
 800165e:	4606      	mov	r6, r0
 8001660:	b950      	cbnz	r0, 8001678 <__ssputs_r+0x5c>
 8001662:	230c      	movs	r3, #12
 8001664:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001668:	f8ca 3000 	str.w	r3, [sl]
 800166c:	89a3      	ldrh	r3, [r4, #12]
 800166e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001672:	81a3      	strh	r3, [r4, #12]
 8001674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001678:	463a      	mov	r2, r7
 800167a:	6921      	ldr	r1, [r4, #16]
 800167c:	f000 fab6 	bl	8001bec <memcpy>
 8001680:	89a3      	ldrh	r3, [r4, #12]
 8001682:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800168a:	81a3      	strh	r3, [r4, #12]
 800168c:	6126      	str	r6, [r4, #16]
 800168e:	443e      	add	r6, r7
 8001690:	6026      	str	r6, [r4, #0]
 8001692:	464e      	mov	r6, r9
 8001694:	6165      	str	r5, [r4, #20]
 8001696:	1bed      	subs	r5, r5, r7
 8001698:	60a5      	str	r5, [r4, #8]
 800169a:	454e      	cmp	r6, r9
 800169c:	d900      	bls.n	80016a0 <__ssputs_r+0x84>
 800169e:	464e      	mov	r6, r9
 80016a0:	4632      	mov	r2, r6
 80016a2:	4641      	mov	r1, r8
 80016a4:	6820      	ldr	r0, [r4, #0]
 80016a6:	f000 faac 	bl	8001c02 <memmove>
 80016aa:	68a3      	ldr	r3, [r4, #8]
 80016ac:	2000      	movs	r0, #0
 80016ae:	1b9b      	subs	r3, r3, r6
 80016b0:	60a3      	str	r3, [r4, #8]
 80016b2:	6823      	ldr	r3, [r4, #0]
 80016b4:	441e      	add	r6, r3
 80016b6:	6026      	str	r6, [r4, #0]
 80016b8:	e7dc      	b.n	8001674 <__ssputs_r+0x58>
 80016ba:	462a      	mov	r2, r5
 80016bc:	f000 fb60 	bl	8001d80 <_realloc_r>
 80016c0:	4606      	mov	r6, r0
 80016c2:	2800      	cmp	r0, #0
 80016c4:	d1e2      	bne.n	800168c <__ssputs_r+0x70>
 80016c6:	6921      	ldr	r1, [r4, #16]
 80016c8:	4650      	mov	r0, sl
 80016ca:	f000 fab3 	bl	8001c34 <_free_r>
 80016ce:	e7c8      	b.n	8001662 <__ssputs_r+0x46>

080016d0 <_svfiprintf_r>:
 80016d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016d4:	461d      	mov	r5, r3
 80016d6:	898b      	ldrh	r3, [r1, #12]
 80016d8:	b09d      	sub	sp, #116	; 0x74
 80016da:	061f      	lsls	r7, r3, #24
 80016dc:	4680      	mov	r8, r0
 80016de:	460c      	mov	r4, r1
 80016e0:	4616      	mov	r6, r2
 80016e2:	d50f      	bpl.n	8001704 <_svfiprintf_r+0x34>
 80016e4:	690b      	ldr	r3, [r1, #16]
 80016e6:	b96b      	cbnz	r3, 8001704 <_svfiprintf_r+0x34>
 80016e8:	2140      	movs	r1, #64	; 0x40
 80016ea:	f000 faef 	bl	8001ccc <_malloc_r>
 80016ee:	6020      	str	r0, [r4, #0]
 80016f0:	6120      	str	r0, [r4, #16]
 80016f2:	b928      	cbnz	r0, 8001700 <_svfiprintf_r+0x30>
 80016f4:	230c      	movs	r3, #12
 80016f6:	f8c8 3000 	str.w	r3, [r8]
 80016fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016fe:	e0c8      	b.n	8001892 <_svfiprintf_r+0x1c2>
 8001700:	2340      	movs	r3, #64	; 0x40
 8001702:	6163      	str	r3, [r4, #20]
 8001704:	2300      	movs	r3, #0
 8001706:	9309      	str	r3, [sp, #36]	; 0x24
 8001708:	2320      	movs	r3, #32
 800170a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800170e:	2330      	movs	r3, #48	; 0x30
 8001710:	f04f 0b01 	mov.w	fp, #1
 8001714:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001718:	9503      	str	r5, [sp, #12]
 800171a:	4637      	mov	r7, r6
 800171c:	463d      	mov	r5, r7
 800171e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001722:	b10b      	cbz	r3, 8001728 <_svfiprintf_r+0x58>
 8001724:	2b25      	cmp	r3, #37	; 0x25
 8001726:	d13e      	bne.n	80017a6 <_svfiprintf_r+0xd6>
 8001728:	ebb7 0a06 	subs.w	sl, r7, r6
 800172c:	d00b      	beq.n	8001746 <_svfiprintf_r+0x76>
 800172e:	4653      	mov	r3, sl
 8001730:	4632      	mov	r2, r6
 8001732:	4621      	mov	r1, r4
 8001734:	4640      	mov	r0, r8
 8001736:	f7ff ff71 	bl	800161c <__ssputs_r>
 800173a:	3001      	adds	r0, #1
 800173c:	f000 80a4 	beq.w	8001888 <_svfiprintf_r+0x1b8>
 8001740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001742:	4453      	add	r3, sl
 8001744:	9309      	str	r3, [sp, #36]	; 0x24
 8001746:	783b      	ldrb	r3, [r7, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	f000 809d 	beq.w	8001888 <_svfiprintf_r+0x1b8>
 800174e:	2300      	movs	r3, #0
 8001750:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001754:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001758:	9304      	str	r3, [sp, #16]
 800175a:	9307      	str	r3, [sp, #28]
 800175c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001760:	931a      	str	r3, [sp, #104]	; 0x68
 8001762:	462f      	mov	r7, r5
 8001764:	2205      	movs	r2, #5
 8001766:	f817 1b01 	ldrb.w	r1, [r7], #1
 800176a:	4850      	ldr	r0, [pc, #320]	; (80018ac <_svfiprintf_r+0x1dc>)
 800176c:	f000 fa30 	bl	8001bd0 <memchr>
 8001770:	9b04      	ldr	r3, [sp, #16]
 8001772:	b9d0      	cbnz	r0, 80017aa <_svfiprintf_r+0xda>
 8001774:	06d9      	lsls	r1, r3, #27
 8001776:	bf44      	itt	mi
 8001778:	2220      	movmi	r2, #32
 800177a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800177e:	071a      	lsls	r2, r3, #28
 8001780:	bf44      	itt	mi
 8001782:	222b      	movmi	r2, #43	; 0x2b
 8001784:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001788:	782a      	ldrb	r2, [r5, #0]
 800178a:	2a2a      	cmp	r2, #42	; 0x2a
 800178c:	d015      	beq.n	80017ba <_svfiprintf_r+0xea>
 800178e:	462f      	mov	r7, r5
 8001790:	2000      	movs	r0, #0
 8001792:	250a      	movs	r5, #10
 8001794:	9a07      	ldr	r2, [sp, #28]
 8001796:	4639      	mov	r1, r7
 8001798:	f811 3b01 	ldrb.w	r3, [r1], #1
 800179c:	3b30      	subs	r3, #48	; 0x30
 800179e:	2b09      	cmp	r3, #9
 80017a0:	d94d      	bls.n	800183e <_svfiprintf_r+0x16e>
 80017a2:	b1b8      	cbz	r0, 80017d4 <_svfiprintf_r+0x104>
 80017a4:	e00f      	b.n	80017c6 <_svfiprintf_r+0xf6>
 80017a6:	462f      	mov	r7, r5
 80017a8:	e7b8      	b.n	800171c <_svfiprintf_r+0x4c>
 80017aa:	4a40      	ldr	r2, [pc, #256]	; (80018ac <_svfiprintf_r+0x1dc>)
 80017ac:	463d      	mov	r5, r7
 80017ae:	1a80      	subs	r0, r0, r2
 80017b0:	fa0b f000 	lsl.w	r0, fp, r0
 80017b4:	4318      	orrs	r0, r3
 80017b6:	9004      	str	r0, [sp, #16]
 80017b8:	e7d3      	b.n	8001762 <_svfiprintf_r+0x92>
 80017ba:	9a03      	ldr	r2, [sp, #12]
 80017bc:	1d11      	adds	r1, r2, #4
 80017be:	6812      	ldr	r2, [r2, #0]
 80017c0:	9103      	str	r1, [sp, #12]
 80017c2:	2a00      	cmp	r2, #0
 80017c4:	db01      	blt.n	80017ca <_svfiprintf_r+0xfa>
 80017c6:	9207      	str	r2, [sp, #28]
 80017c8:	e004      	b.n	80017d4 <_svfiprintf_r+0x104>
 80017ca:	4252      	negs	r2, r2
 80017cc:	f043 0302 	orr.w	r3, r3, #2
 80017d0:	9207      	str	r2, [sp, #28]
 80017d2:	9304      	str	r3, [sp, #16]
 80017d4:	783b      	ldrb	r3, [r7, #0]
 80017d6:	2b2e      	cmp	r3, #46	; 0x2e
 80017d8:	d10c      	bne.n	80017f4 <_svfiprintf_r+0x124>
 80017da:	787b      	ldrb	r3, [r7, #1]
 80017dc:	2b2a      	cmp	r3, #42	; 0x2a
 80017de:	d133      	bne.n	8001848 <_svfiprintf_r+0x178>
 80017e0:	9b03      	ldr	r3, [sp, #12]
 80017e2:	3702      	adds	r7, #2
 80017e4:	1d1a      	adds	r2, r3, #4
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	9203      	str	r2, [sp, #12]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	bfb8      	it	lt
 80017ee:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80017f2:	9305      	str	r3, [sp, #20]
 80017f4:	4d2e      	ldr	r5, [pc, #184]	; (80018b0 <_svfiprintf_r+0x1e0>)
 80017f6:	2203      	movs	r2, #3
 80017f8:	7839      	ldrb	r1, [r7, #0]
 80017fa:	4628      	mov	r0, r5
 80017fc:	f000 f9e8 	bl	8001bd0 <memchr>
 8001800:	b138      	cbz	r0, 8001812 <_svfiprintf_r+0x142>
 8001802:	2340      	movs	r3, #64	; 0x40
 8001804:	1b40      	subs	r0, r0, r5
 8001806:	fa03 f000 	lsl.w	r0, r3, r0
 800180a:	9b04      	ldr	r3, [sp, #16]
 800180c:	3701      	adds	r7, #1
 800180e:	4303      	orrs	r3, r0
 8001810:	9304      	str	r3, [sp, #16]
 8001812:	7839      	ldrb	r1, [r7, #0]
 8001814:	2206      	movs	r2, #6
 8001816:	4827      	ldr	r0, [pc, #156]	; (80018b4 <_svfiprintf_r+0x1e4>)
 8001818:	1c7e      	adds	r6, r7, #1
 800181a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800181e:	f000 f9d7 	bl	8001bd0 <memchr>
 8001822:	2800      	cmp	r0, #0
 8001824:	d038      	beq.n	8001898 <_svfiprintf_r+0x1c8>
 8001826:	4b24      	ldr	r3, [pc, #144]	; (80018b8 <_svfiprintf_r+0x1e8>)
 8001828:	bb13      	cbnz	r3, 8001870 <_svfiprintf_r+0x1a0>
 800182a:	9b03      	ldr	r3, [sp, #12]
 800182c:	3307      	adds	r3, #7
 800182e:	f023 0307 	bic.w	r3, r3, #7
 8001832:	3308      	adds	r3, #8
 8001834:	9303      	str	r3, [sp, #12]
 8001836:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001838:	444b      	add	r3, r9
 800183a:	9309      	str	r3, [sp, #36]	; 0x24
 800183c:	e76d      	b.n	800171a <_svfiprintf_r+0x4a>
 800183e:	fb05 3202 	mla	r2, r5, r2, r3
 8001842:	2001      	movs	r0, #1
 8001844:	460f      	mov	r7, r1
 8001846:	e7a6      	b.n	8001796 <_svfiprintf_r+0xc6>
 8001848:	2300      	movs	r3, #0
 800184a:	250a      	movs	r5, #10
 800184c:	4619      	mov	r1, r3
 800184e:	3701      	adds	r7, #1
 8001850:	9305      	str	r3, [sp, #20]
 8001852:	4638      	mov	r0, r7
 8001854:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001858:	3a30      	subs	r2, #48	; 0x30
 800185a:	2a09      	cmp	r2, #9
 800185c:	d903      	bls.n	8001866 <_svfiprintf_r+0x196>
 800185e:	2b00      	cmp	r3, #0
 8001860:	d0c8      	beq.n	80017f4 <_svfiprintf_r+0x124>
 8001862:	9105      	str	r1, [sp, #20]
 8001864:	e7c6      	b.n	80017f4 <_svfiprintf_r+0x124>
 8001866:	fb05 2101 	mla	r1, r5, r1, r2
 800186a:	2301      	movs	r3, #1
 800186c:	4607      	mov	r7, r0
 800186e:	e7f0      	b.n	8001852 <_svfiprintf_r+0x182>
 8001870:	ab03      	add	r3, sp, #12
 8001872:	9300      	str	r3, [sp, #0]
 8001874:	4622      	mov	r2, r4
 8001876:	4b11      	ldr	r3, [pc, #68]	; (80018bc <_svfiprintf_r+0x1ec>)
 8001878:	a904      	add	r1, sp, #16
 800187a:	4640      	mov	r0, r8
 800187c:	f3af 8000 	nop.w
 8001880:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8001884:	4681      	mov	r9, r0
 8001886:	d1d6      	bne.n	8001836 <_svfiprintf_r+0x166>
 8001888:	89a3      	ldrh	r3, [r4, #12]
 800188a:	065b      	lsls	r3, r3, #25
 800188c:	f53f af35 	bmi.w	80016fa <_svfiprintf_r+0x2a>
 8001890:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001892:	b01d      	add	sp, #116	; 0x74
 8001894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001898:	ab03      	add	r3, sp, #12
 800189a:	9300      	str	r3, [sp, #0]
 800189c:	4622      	mov	r2, r4
 800189e:	4b07      	ldr	r3, [pc, #28]	; (80018bc <_svfiprintf_r+0x1ec>)
 80018a0:	a904      	add	r1, sp, #16
 80018a2:	4640      	mov	r0, r8
 80018a4:	f000 f882 	bl	80019ac <_printf_i>
 80018a8:	e7ea      	b.n	8001880 <_svfiprintf_r+0x1b0>
 80018aa:	bf00      	nop
 80018ac:	08001e6c 	.word	0x08001e6c
 80018b0:	08001e72 	.word	0x08001e72
 80018b4:	08001e76 	.word	0x08001e76
 80018b8:	00000000 	.word	0x00000000
 80018bc:	0800161d 	.word	0x0800161d

080018c0 <_printf_common>:
 80018c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80018c4:	4691      	mov	r9, r2
 80018c6:	461f      	mov	r7, r3
 80018c8:	688a      	ldr	r2, [r1, #8]
 80018ca:	690b      	ldr	r3, [r1, #16]
 80018cc:	4606      	mov	r6, r0
 80018ce:	4293      	cmp	r3, r2
 80018d0:	bfb8      	it	lt
 80018d2:	4613      	movlt	r3, r2
 80018d4:	f8c9 3000 	str.w	r3, [r9]
 80018d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80018dc:	460c      	mov	r4, r1
 80018de:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80018e2:	b112      	cbz	r2, 80018ea <_printf_common+0x2a>
 80018e4:	3301      	adds	r3, #1
 80018e6:	f8c9 3000 	str.w	r3, [r9]
 80018ea:	6823      	ldr	r3, [r4, #0]
 80018ec:	0699      	lsls	r1, r3, #26
 80018ee:	bf42      	ittt	mi
 80018f0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80018f4:	3302      	addmi	r3, #2
 80018f6:	f8c9 3000 	strmi.w	r3, [r9]
 80018fa:	6825      	ldr	r5, [r4, #0]
 80018fc:	f015 0506 	ands.w	r5, r5, #6
 8001900:	d107      	bne.n	8001912 <_printf_common+0x52>
 8001902:	f104 0a19 	add.w	sl, r4, #25
 8001906:	68e3      	ldr	r3, [r4, #12]
 8001908:	f8d9 2000 	ldr.w	r2, [r9]
 800190c:	1a9b      	subs	r3, r3, r2
 800190e:	42ab      	cmp	r3, r5
 8001910:	dc29      	bgt.n	8001966 <_printf_common+0xa6>
 8001912:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001916:	6822      	ldr	r2, [r4, #0]
 8001918:	3300      	adds	r3, #0
 800191a:	bf18      	it	ne
 800191c:	2301      	movne	r3, #1
 800191e:	0692      	lsls	r2, r2, #26
 8001920:	d42e      	bmi.n	8001980 <_printf_common+0xc0>
 8001922:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001926:	4639      	mov	r1, r7
 8001928:	4630      	mov	r0, r6
 800192a:	47c0      	blx	r8
 800192c:	3001      	adds	r0, #1
 800192e:	d021      	beq.n	8001974 <_printf_common+0xb4>
 8001930:	6823      	ldr	r3, [r4, #0]
 8001932:	68e5      	ldr	r5, [r4, #12]
 8001934:	f003 0306 	and.w	r3, r3, #6
 8001938:	2b04      	cmp	r3, #4
 800193a:	bf18      	it	ne
 800193c:	2500      	movne	r5, #0
 800193e:	f8d9 2000 	ldr.w	r2, [r9]
 8001942:	f04f 0900 	mov.w	r9, #0
 8001946:	bf08      	it	eq
 8001948:	1aad      	subeq	r5, r5, r2
 800194a:	68a3      	ldr	r3, [r4, #8]
 800194c:	6922      	ldr	r2, [r4, #16]
 800194e:	bf08      	it	eq
 8001950:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001954:	4293      	cmp	r3, r2
 8001956:	bfc4      	itt	gt
 8001958:	1a9b      	subgt	r3, r3, r2
 800195a:	18ed      	addgt	r5, r5, r3
 800195c:	341a      	adds	r4, #26
 800195e:	454d      	cmp	r5, r9
 8001960:	d11a      	bne.n	8001998 <_printf_common+0xd8>
 8001962:	2000      	movs	r0, #0
 8001964:	e008      	b.n	8001978 <_printf_common+0xb8>
 8001966:	2301      	movs	r3, #1
 8001968:	4652      	mov	r2, sl
 800196a:	4639      	mov	r1, r7
 800196c:	4630      	mov	r0, r6
 800196e:	47c0      	blx	r8
 8001970:	3001      	adds	r0, #1
 8001972:	d103      	bne.n	800197c <_printf_common+0xbc>
 8001974:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800197c:	3501      	adds	r5, #1
 800197e:	e7c2      	b.n	8001906 <_printf_common+0x46>
 8001980:	2030      	movs	r0, #48	; 0x30
 8001982:	18e1      	adds	r1, r4, r3
 8001984:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001988:	1c5a      	adds	r2, r3, #1
 800198a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800198e:	4422      	add	r2, r4
 8001990:	3302      	adds	r3, #2
 8001992:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001996:	e7c4      	b.n	8001922 <_printf_common+0x62>
 8001998:	2301      	movs	r3, #1
 800199a:	4622      	mov	r2, r4
 800199c:	4639      	mov	r1, r7
 800199e:	4630      	mov	r0, r6
 80019a0:	47c0      	blx	r8
 80019a2:	3001      	adds	r0, #1
 80019a4:	d0e6      	beq.n	8001974 <_printf_common+0xb4>
 80019a6:	f109 0901 	add.w	r9, r9, #1
 80019aa:	e7d8      	b.n	800195e <_printf_common+0x9e>

080019ac <_printf_i>:
 80019ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80019b0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80019b4:	460c      	mov	r4, r1
 80019b6:	7e09      	ldrb	r1, [r1, #24]
 80019b8:	b085      	sub	sp, #20
 80019ba:	296e      	cmp	r1, #110	; 0x6e
 80019bc:	4617      	mov	r7, r2
 80019be:	4606      	mov	r6, r0
 80019c0:	4698      	mov	r8, r3
 80019c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80019c4:	f000 80b3 	beq.w	8001b2e <_printf_i+0x182>
 80019c8:	d822      	bhi.n	8001a10 <_printf_i+0x64>
 80019ca:	2963      	cmp	r1, #99	; 0x63
 80019cc:	d036      	beq.n	8001a3c <_printf_i+0x90>
 80019ce:	d80a      	bhi.n	80019e6 <_printf_i+0x3a>
 80019d0:	2900      	cmp	r1, #0
 80019d2:	f000 80b9 	beq.w	8001b48 <_printf_i+0x19c>
 80019d6:	2958      	cmp	r1, #88	; 0x58
 80019d8:	f000 8083 	beq.w	8001ae2 <_printf_i+0x136>
 80019dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80019e0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80019e4:	e032      	b.n	8001a4c <_printf_i+0xa0>
 80019e6:	2964      	cmp	r1, #100	; 0x64
 80019e8:	d001      	beq.n	80019ee <_printf_i+0x42>
 80019ea:	2969      	cmp	r1, #105	; 0x69
 80019ec:	d1f6      	bne.n	80019dc <_printf_i+0x30>
 80019ee:	6820      	ldr	r0, [r4, #0]
 80019f0:	6813      	ldr	r3, [r2, #0]
 80019f2:	0605      	lsls	r5, r0, #24
 80019f4:	f103 0104 	add.w	r1, r3, #4
 80019f8:	d52a      	bpl.n	8001a50 <_printf_i+0xa4>
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	6011      	str	r1, [r2, #0]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	da03      	bge.n	8001a0a <_printf_i+0x5e>
 8001a02:	222d      	movs	r2, #45	; 0x2d
 8001a04:	425b      	negs	r3, r3
 8001a06:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001a0a:	486f      	ldr	r0, [pc, #444]	; (8001bc8 <_printf_i+0x21c>)
 8001a0c:	220a      	movs	r2, #10
 8001a0e:	e039      	b.n	8001a84 <_printf_i+0xd8>
 8001a10:	2973      	cmp	r1, #115	; 0x73
 8001a12:	f000 809d 	beq.w	8001b50 <_printf_i+0x1a4>
 8001a16:	d808      	bhi.n	8001a2a <_printf_i+0x7e>
 8001a18:	296f      	cmp	r1, #111	; 0x6f
 8001a1a:	d020      	beq.n	8001a5e <_printf_i+0xb2>
 8001a1c:	2970      	cmp	r1, #112	; 0x70
 8001a1e:	d1dd      	bne.n	80019dc <_printf_i+0x30>
 8001a20:	6823      	ldr	r3, [r4, #0]
 8001a22:	f043 0320 	orr.w	r3, r3, #32
 8001a26:	6023      	str	r3, [r4, #0]
 8001a28:	e003      	b.n	8001a32 <_printf_i+0x86>
 8001a2a:	2975      	cmp	r1, #117	; 0x75
 8001a2c:	d017      	beq.n	8001a5e <_printf_i+0xb2>
 8001a2e:	2978      	cmp	r1, #120	; 0x78
 8001a30:	d1d4      	bne.n	80019dc <_printf_i+0x30>
 8001a32:	2378      	movs	r3, #120	; 0x78
 8001a34:	4865      	ldr	r0, [pc, #404]	; (8001bcc <_printf_i+0x220>)
 8001a36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001a3a:	e055      	b.n	8001ae8 <_printf_i+0x13c>
 8001a3c:	6813      	ldr	r3, [r2, #0]
 8001a3e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001a42:	1d19      	adds	r1, r3, #4
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	6011      	str	r1, [r2, #0]
 8001a48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e08c      	b.n	8001b6a <_printf_i+0x1be>
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001a56:	6011      	str	r1, [r2, #0]
 8001a58:	bf18      	it	ne
 8001a5a:	b21b      	sxthne	r3, r3
 8001a5c:	e7cf      	b.n	80019fe <_printf_i+0x52>
 8001a5e:	6813      	ldr	r3, [r2, #0]
 8001a60:	6825      	ldr	r5, [r4, #0]
 8001a62:	1d18      	adds	r0, r3, #4
 8001a64:	6010      	str	r0, [r2, #0]
 8001a66:	0628      	lsls	r0, r5, #24
 8001a68:	d501      	bpl.n	8001a6e <_printf_i+0xc2>
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	e002      	b.n	8001a74 <_printf_i+0xc8>
 8001a6e:	0668      	lsls	r0, r5, #25
 8001a70:	d5fb      	bpl.n	8001a6a <_printf_i+0xbe>
 8001a72:	881b      	ldrh	r3, [r3, #0]
 8001a74:	296f      	cmp	r1, #111	; 0x6f
 8001a76:	bf14      	ite	ne
 8001a78:	220a      	movne	r2, #10
 8001a7a:	2208      	moveq	r2, #8
 8001a7c:	4852      	ldr	r0, [pc, #328]	; (8001bc8 <_printf_i+0x21c>)
 8001a7e:	2100      	movs	r1, #0
 8001a80:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001a84:	6865      	ldr	r5, [r4, #4]
 8001a86:	2d00      	cmp	r5, #0
 8001a88:	60a5      	str	r5, [r4, #8]
 8001a8a:	f2c0 8095 	blt.w	8001bb8 <_printf_i+0x20c>
 8001a8e:	6821      	ldr	r1, [r4, #0]
 8001a90:	f021 0104 	bic.w	r1, r1, #4
 8001a94:	6021      	str	r1, [r4, #0]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d13d      	bne.n	8001b16 <_printf_i+0x16a>
 8001a9a:	2d00      	cmp	r5, #0
 8001a9c:	f040 808e 	bne.w	8001bbc <_printf_i+0x210>
 8001aa0:	4665      	mov	r5, ip
 8001aa2:	2a08      	cmp	r2, #8
 8001aa4:	d10b      	bne.n	8001abe <_printf_i+0x112>
 8001aa6:	6823      	ldr	r3, [r4, #0]
 8001aa8:	07db      	lsls	r3, r3, #31
 8001aaa:	d508      	bpl.n	8001abe <_printf_i+0x112>
 8001aac:	6923      	ldr	r3, [r4, #16]
 8001aae:	6862      	ldr	r2, [r4, #4]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	bfde      	ittt	le
 8001ab4:	2330      	movle	r3, #48	; 0x30
 8001ab6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001aba:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8001abe:	ebac 0305 	sub.w	r3, ip, r5
 8001ac2:	6123      	str	r3, [r4, #16]
 8001ac4:	f8cd 8000 	str.w	r8, [sp]
 8001ac8:	463b      	mov	r3, r7
 8001aca:	aa03      	add	r2, sp, #12
 8001acc:	4621      	mov	r1, r4
 8001ace:	4630      	mov	r0, r6
 8001ad0:	f7ff fef6 	bl	80018c0 <_printf_common>
 8001ad4:	3001      	adds	r0, #1
 8001ad6:	d14d      	bne.n	8001b74 <_printf_i+0x1c8>
 8001ad8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001adc:	b005      	add	sp, #20
 8001ade:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001ae2:	4839      	ldr	r0, [pc, #228]	; (8001bc8 <_printf_i+0x21c>)
 8001ae4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8001ae8:	6813      	ldr	r3, [r2, #0]
 8001aea:	6821      	ldr	r1, [r4, #0]
 8001aec:	1d1d      	adds	r5, r3, #4
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	6015      	str	r5, [r2, #0]
 8001af2:	060a      	lsls	r2, r1, #24
 8001af4:	d50b      	bpl.n	8001b0e <_printf_i+0x162>
 8001af6:	07ca      	lsls	r2, r1, #31
 8001af8:	bf44      	itt	mi
 8001afa:	f041 0120 	orrmi.w	r1, r1, #32
 8001afe:	6021      	strmi	r1, [r4, #0]
 8001b00:	b91b      	cbnz	r3, 8001b0a <_printf_i+0x15e>
 8001b02:	6822      	ldr	r2, [r4, #0]
 8001b04:	f022 0220 	bic.w	r2, r2, #32
 8001b08:	6022      	str	r2, [r4, #0]
 8001b0a:	2210      	movs	r2, #16
 8001b0c:	e7b7      	b.n	8001a7e <_printf_i+0xd2>
 8001b0e:	064d      	lsls	r5, r1, #25
 8001b10:	bf48      	it	mi
 8001b12:	b29b      	uxthmi	r3, r3
 8001b14:	e7ef      	b.n	8001af6 <_printf_i+0x14a>
 8001b16:	4665      	mov	r5, ip
 8001b18:	fbb3 f1f2 	udiv	r1, r3, r2
 8001b1c:	fb02 3311 	mls	r3, r2, r1, r3
 8001b20:	5cc3      	ldrb	r3, [r0, r3]
 8001b22:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001b26:	460b      	mov	r3, r1
 8001b28:	2900      	cmp	r1, #0
 8001b2a:	d1f5      	bne.n	8001b18 <_printf_i+0x16c>
 8001b2c:	e7b9      	b.n	8001aa2 <_printf_i+0xf6>
 8001b2e:	6813      	ldr	r3, [r2, #0]
 8001b30:	6825      	ldr	r5, [r4, #0]
 8001b32:	1d18      	adds	r0, r3, #4
 8001b34:	6961      	ldr	r1, [r4, #20]
 8001b36:	6010      	str	r0, [r2, #0]
 8001b38:	0628      	lsls	r0, r5, #24
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	d501      	bpl.n	8001b42 <_printf_i+0x196>
 8001b3e:	6019      	str	r1, [r3, #0]
 8001b40:	e002      	b.n	8001b48 <_printf_i+0x19c>
 8001b42:	066a      	lsls	r2, r5, #25
 8001b44:	d5fb      	bpl.n	8001b3e <_printf_i+0x192>
 8001b46:	8019      	strh	r1, [r3, #0]
 8001b48:	2300      	movs	r3, #0
 8001b4a:	4665      	mov	r5, ip
 8001b4c:	6123      	str	r3, [r4, #16]
 8001b4e:	e7b9      	b.n	8001ac4 <_printf_i+0x118>
 8001b50:	6813      	ldr	r3, [r2, #0]
 8001b52:	1d19      	adds	r1, r3, #4
 8001b54:	6011      	str	r1, [r2, #0]
 8001b56:	681d      	ldr	r5, [r3, #0]
 8001b58:	6862      	ldr	r2, [r4, #4]
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	4628      	mov	r0, r5
 8001b5e:	f000 f837 	bl	8001bd0 <memchr>
 8001b62:	b108      	cbz	r0, 8001b68 <_printf_i+0x1bc>
 8001b64:	1b40      	subs	r0, r0, r5
 8001b66:	6060      	str	r0, [r4, #4]
 8001b68:	6863      	ldr	r3, [r4, #4]
 8001b6a:	6123      	str	r3, [r4, #16]
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001b72:	e7a7      	b.n	8001ac4 <_printf_i+0x118>
 8001b74:	6923      	ldr	r3, [r4, #16]
 8001b76:	462a      	mov	r2, r5
 8001b78:	4639      	mov	r1, r7
 8001b7a:	4630      	mov	r0, r6
 8001b7c:	47c0      	blx	r8
 8001b7e:	3001      	adds	r0, #1
 8001b80:	d0aa      	beq.n	8001ad8 <_printf_i+0x12c>
 8001b82:	6823      	ldr	r3, [r4, #0]
 8001b84:	079b      	lsls	r3, r3, #30
 8001b86:	d413      	bmi.n	8001bb0 <_printf_i+0x204>
 8001b88:	68e0      	ldr	r0, [r4, #12]
 8001b8a:	9b03      	ldr	r3, [sp, #12]
 8001b8c:	4298      	cmp	r0, r3
 8001b8e:	bfb8      	it	lt
 8001b90:	4618      	movlt	r0, r3
 8001b92:	e7a3      	b.n	8001adc <_printf_i+0x130>
 8001b94:	2301      	movs	r3, #1
 8001b96:	464a      	mov	r2, r9
 8001b98:	4639      	mov	r1, r7
 8001b9a:	4630      	mov	r0, r6
 8001b9c:	47c0      	blx	r8
 8001b9e:	3001      	adds	r0, #1
 8001ba0:	d09a      	beq.n	8001ad8 <_printf_i+0x12c>
 8001ba2:	3501      	adds	r5, #1
 8001ba4:	68e3      	ldr	r3, [r4, #12]
 8001ba6:	9a03      	ldr	r2, [sp, #12]
 8001ba8:	1a9b      	subs	r3, r3, r2
 8001baa:	42ab      	cmp	r3, r5
 8001bac:	dcf2      	bgt.n	8001b94 <_printf_i+0x1e8>
 8001bae:	e7eb      	b.n	8001b88 <_printf_i+0x1dc>
 8001bb0:	2500      	movs	r5, #0
 8001bb2:	f104 0919 	add.w	r9, r4, #25
 8001bb6:	e7f5      	b.n	8001ba4 <_printf_i+0x1f8>
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1ac      	bne.n	8001b16 <_printf_i+0x16a>
 8001bbc:	7803      	ldrb	r3, [r0, #0]
 8001bbe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001bc2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001bc6:	e76c      	b.n	8001aa2 <_printf_i+0xf6>
 8001bc8:	08001e7d 	.word	0x08001e7d
 8001bcc:	08001e8e 	.word	0x08001e8e

08001bd0 <memchr>:
 8001bd0:	b510      	push	{r4, lr}
 8001bd2:	b2c9      	uxtb	r1, r1
 8001bd4:	4402      	add	r2, r0
 8001bd6:	4290      	cmp	r0, r2
 8001bd8:	4603      	mov	r3, r0
 8001bda:	d101      	bne.n	8001be0 <memchr+0x10>
 8001bdc:	2300      	movs	r3, #0
 8001bde:	e003      	b.n	8001be8 <memchr+0x18>
 8001be0:	781c      	ldrb	r4, [r3, #0]
 8001be2:	3001      	adds	r0, #1
 8001be4:	428c      	cmp	r4, r1
 8001be6:	d1f6      	bne.n	8001bd6 <memchr+0x6>
 8001be8:	4618      	mov	r0, r3
 8001bea:	bd10      	pop	{r4, pc}

08001bec <memcpy>:
 8001bec:	b510      	push	{r4, lr}
 8001bee:	1e43      	subs	r3, r0, #1
 8001bf0:	440a      	add	r2, r1
 8001bf2:	4291      	cmp	r1, r2
 8001bf4:	d100      	bne.n	8001bf8 <memcpy+0xc>
 8001bf6:	bd10      	pop	{r4, pc}
 8001bf8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001bfc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001c00:	e7f7      	b.n	8001bf2 <memcpy+0x6>

08001c02 <memmove>:
 8001c02:	4288      	cmp	r0, r1
 8001c04:	b510      	push	{r4, lr}
 8001c06:	eb01 0302 	add.w	r3, r1, r2
 8001c0a:	d807      	bhi.n	8001c1c <memmove+0x1a>
 8001c0c:	1e42      	subs	r2, r0, #1
 8001c0e:	4299      	cmp	r1, r3
 8001c10:	d00a      	beq.n	8001c28 <memmove+0x26>
 8001c12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001c16:	f802 4f01 	strb.w	r4, [r2, #1]!
 8001c1a:	e7f8      	b.n	8001c0e <memmove+0xc>
 8001c1c:	4283      	cmp	r3, r0
 8001c1e:	d9f5      	bls.n	8001c0c <memmove+0xa>
 8001c20:	1881      	adds	r1, r0, r2
 8001c22:	1ad2      	subs	r2, r2, r3
 8001c24:	42d3      	cmn	r3, r2
 8001c26:	d100      	bne.n	8001c2a <memmove+0x28>
 8001c28:	bd10      	pop	{r4, pc}
 8001c2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001c2e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8001c32:	e7f7      	b.n	8001c24 <memmove+0x22>

08001c34 <_free_r>:
 8001c34:	b538      	push	{r3, r4, r5, lr}
 8001c36:	4605      	mov	r5, r0
 8001c38:	2900      	cmp	r1, #0
 8001c3a:	d043      	beq.n	8001cc4 <_free_r+0x90>
 8001c3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001c40:	1f0c      	subs	r4, r1, #4
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	bfb8      	it	lt
 8001c46:	18e4      	addlt	r4, r4, r3
 8001c48:	f000 f8d0 	bl	8001dec <__malloc_lock>
 8001c4c:	4a1e      	ldr	r2, [pc, #120]	; (8001cc8 <_free_r+0x94>)
 8001c4e:	6813      	ldr	r3, [r2, #0]
 8001c50:	4610      	mov	r0, r2
 8001c52:	b933      	cbnz	r3, 8001c62 <_free_r+0x2e>
 8001c54:	6063      	str	r3, [r4, #4]
 8001c56:	6014      	str	r4, [r2, #0]
 8001c58:	4628      	mov	r0, r5
 8001c5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001c5e:	f000 b8c6 	b.w	8001dee <__malloc_unlock>
 8001c62:	42a3      	cmp	r3, r4
 8001c64:	d90b      	bls.n	8001c7e <_free_r+0x4a>
 8001c66:	6821      	ldr	r1, [r4, #0]
 8001c68:	1862      	adds	r2, r4, r1
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	bf01      	itttt	eq
 8001c6e:	681a      	ldreq	r2, [r3, #0]
 8001c70:	685b      	ldreq	r3, [r3, #4]
 8001c72:	1852      	addeq	r2, r2, r1
 8001c74:	6022      	streq	r2, [r4, #0]
 8001c76:	6063      	str	r3, [r4, #4]
 8001c78:	6004      	str	r4, [r0, #0]
 8001c7a:	e7ed      	b.n	8001c58 <_free_r+0x24>
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	685a      	ldr	r2, [r3, #4]
 8001c80:	b10a      	cbz	r2, 8001c86 <_free_r+0x52>
 8001c82:	42a2      	cmp	r2, r4
 8001c84:	d9fa      	bls.n	8001c7c <_free_r+0x48>
 8001c86:	6819      	ldr	r1, [r3, #0]
 8001c88:	1858      	adds	r0, r3, r1
 8001c8a:	42a0      	cmp	r0, r4
 8001c8c:	d10b      	bne.n	8001ca6 <_free_r+0x72>
 8001c8e:	6820      	ldr	r0, [r4, #0]
 8001c90:	4401      	add	r1, r0
 8001c92:	1858      	adds	r0, r3, r1
 8001c94:	4282      	cmp	r2, r0
 8001c96:	6019      	str	r1, [r3, #0]
 8001c98:	d1de      	bne.n	8001c58 <_free_r+0x24>
 8001c9a:	6810      	ldr	r0, [r2, #0]
 8001c9c:	6852      	ldr	r2, [r2, #4]
 8001c9e:	4401      	add	r1, r0
 8001ca0:	6019      	str	r1, [r3, #0]
 8001ca2:	605a      	str	r2, [r3, #4]
 8001ca4:	e7d8      	b.n	8001c58 <_free_r+0x24>
 8001ca6:	d902      	bls.n	8001cae <_free_r+0x7a>
 8001ca8:	230c      	movs	r3, #12
 8001caa:	602b      	str	r3, [r5, #0]
 8001cac:	e7d4      	b.n	8001c58 <_free_r+0x24>
 8001cae:	6820      	ldr	r0, [r4, #0]
 8001cb0:	1821      	adds	r1, r4, r0
 8001cb2:	428a      	cmp	r2, r1
 8001cb4:	bf01      	itttt	eq
 8001cb6:	6811      	ldreq	r1, [r2, #0]
 8001cb8:	6852      	ldreq	r2, [r2, #4]
 8001cba:	1809      	addeq	r1, r1, r0
 8001cbc:	6021      	streq	r1, [r4, #0]
 8001cbe:	6062      	str	r2, [r4, #4]
 8001cc0:	605c      	str	r4, [r3, #4]
 8001cc2:	e7c9      	b.n	8001c58 <_free_r+0x24>
 8001cc4:	bd38      	pop	{r3, r4, r5, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20000090 	.word	0x20000090

08001ccc <_malloc_r>:
 8001ccc:	b570      	push	{r4, r5, r6, lr}
 8001cce:	1ccd      	adds	r5, r1, #3
 8001cd0:	f025 0503 	bic.w	r5, r5, #3
 8001cd4:	3508      	adds	r5, #8
 8001cd6:	2d0c      	cmp	r5, #12
 8001cd8:	bf38      	it	cc
 8001cda:	250c      	movcc	r5, #12
 8001cdc:	2d00      	cmp	r5, #0
 8001cde:	4606      	mov	r6, r0
 8001ce0:	db01      	blt.n	8001ce6 <_malloc_r+0x1a>
 8001ce2:	42a9      	cmp	r1, r5
 8001ce4:	d903      	bls.n	8001cee <_malloc_r+0x22>
 8001ce6:	230c      	movs	r3, #12
 8001ce8:	6033      	str	r3, [r6, #0]
 8001cea:	2000      	movs	r0, #0
 8001cec:	bd70      	pop	{r4, r5, r6, pc}
 8001cee:	f000 f87d 	bl	8001dec <__malloc_lock>
 8001cf2:	4a21      	ldr	r2, [pc, #132]	; (8001d78 <_malloc_r+0xac>)
 8001cf4:	6814      	ldr	r4, [r2, #0]
 8001cf6:	4621      	mov	r1, r4
 8001cf8:	b991      	cbnz	r1, 8001d20 <_malloc_r+0x54>
 8001cfa:	4c20      	ldr	r4, [pc, #128]	; (8001d7c <_malloc_r+0xb0>)
 8001cfc:	6823      	ldr	r3, [r4, #0]
 8001cfe:	b91b      	cbnz	r3, 8001d08 <_malloc_r+0x3c>
 8001d00:	4630      	mov	r0, r6
 8001d02:	f000 f863 	bl	8001dcc <_sbrk_r>
 8001d06:	6020      	str	r0, [r4, #0]
 8001d08:	4629      	mov	r1, r5
 8001d0a:	4630      	mov	r0, r6
 8001d0c:	f000 f85e 	bl	8001dcc <_sbrk_r>
 8001d10:	1c43      	adds	r3, r0, #1
 8001d12:	d124      	bne.n	8001d5e <_malloc_r+0x92>
 8001d14:	230c      	movs	r3, #12
 8001d16:	4630      	mov	r0, r6
 8001d18:	6033      	str	r3, [r6, #0]
 8001d1a:	f000 f868 	bl	8001dee <__malloc_unlock>
 8001d1e:	e7e4      	b.n	8001cea <_malloc_r+0x1e>
 8001d20:	680b      	ldr	r3, [r1, #0]
 8001d22:	1b5b      	subs	r3, r3, r5
 8001d24:	d418      	bmi.n	8001d58 <_malloc_r+0x8c>
 8001d26:	2b0b      	cmp	r3, #11
 8001d28:	d90f      	bls.n	8001d4a <_malloc_r+0x7e>
 8001d2a:	600b      	str	r3, [r1, #0]
 8001d2c:	18cc      	adds	r4, r1, r3
 8001d2e:	50cd      	str	r5, [r1, r3]
 8001d30:	4630      	mov	r0, r6
 8001d32:	f000 f85c 	bl	8001dee <__malloc_unlock>
 8001d36:	f104 000b 	add.w	r0, r4, #11
 8001d3a:	1d23      	adds	r3, r4, #4
 8001d3c:	f020 0007 	bic.w	r0, r0, #7
 8001d40:	1ac3      	subs	r3, r0, r3
 8001d42:	d0d3      	beq.n	8001cec <_malloc_r+0x20>
 8001d44:	425a      	negs	r2, r3
 8001d46:	50e2      	str	r2, [r4, r3]
 8001d48:	e7d0      	b.n	8001cec <_malloc_r+0x20>
 8001d4a:	684b      	ldr	r3, [r1, #4]
 8001d4c:	428c      	cmp	r4, r1
 8001d4e:	bf16      	itet	ne
 8001d50:	6063      	strne	r3, [r4, #4]
 8001d52:	6013      	streq	r3, [r2, #0]
 8001d54:	460c      	movne	r4, r1
 8001d56:	e7eb      	b.n	8001d30 <_malloc_r+0x64>
 8001d58:	460c      	mov	r4, r1
 8001d5a:	6849      	ldr	r1, [r1, #4]
 8001d5c:	e7cc      	b.n	8001cf8 <_malloc_r+0x2c>
 8001d5e:	1cc4      	adds	r4, r0, #3
 8001d60:	f024 0403 	bic.w	r4, r4, #3
 8001d64:	42a0      	cmp	r0, r4
 8001d66:	d005      	beq.n	8001d74 <_malloc_r+0xa8>
 8001d68:	1a21      	subs	r1, r4, r0
 8001d6a:	4630      	mov	r0, r6
 8001d6c:	f000 f82e 	bl	8001dcc <_sbrk_r>
 8001d70:	3001      	adds	r0, #1
 8001d72:	d0cf      	beq.n	8001d14 <_malloc_r+0x48>
 8001d74:	6025      	str	r5, [r4, #0]
 8001d76:	e7db      	b.n	8001d30 <_malloc_r+0x64>
 8001d78:	20000090 	.word	0x20000090
 8001d7c:	20000094 	.word	0x20000094

08001d80 <_realloc_r>:
 8001d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d82:	4607      	mov	r7, r0
 8001d84:	4614      	mov	r4, r2
 8001d86:	460e      	mov	r6, r1
 8001d88:	b921      	cbnz	r1, 8001d94 <_realloc_r+0x14>
 8001d8a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001d8e:	4611      	mov	r1, r2
 8001d90:	f7ff bf9c 	b.w	8001ccc <_malloc_r>
 8001d94:	b922      	cbnz	r2, 8001da0 <_realloc_r+0x20>
 8001d96:	f7ff ff4d 	bl	8001c34 <_free_r>
 8001d9a:	4625      	mov	r5, r4
 8001d9c:	4628      	mov	r0, r5
 8001d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001da0:	f000 f826 	bl	8001df0 <_malloc_usable_size_r>
 8001da4:	42a0      	cmp	r0, r4
 8001da6:	d20f      	bcs.n	8001dc8 <_realloc_r+0x48>
 8001da8:	4621      	mov	r1, r4
 8001daa:	4638      	mov	r0, r7
 8001dac:	f7ff ff8e 	bl	8001ccc <_malloc_r>
 8001db0:	4605      	mov	r5, r0
 8001db2:	2800      	cmp	r0, #0
 8001db4:	d0f2      	beq.n	8001d9c <_realloc_r+0x1c>
 8001db6:	4631      	mov	r1, r6
 8001db8:	4622      	mov	r2, r4
 8001dba:	f7ff ff17 	bl	8001bec <memcpy>
 8001dbe:	4631      	mov	r1, r6
 8001dc0:	4638      	mov	r0, r7
 8001dc2:	f7ff ff37 	bl	8001c34 <_free_r>
 8001dc6:	e7e9      	b.n	8001d9c <_realloc_r+0x1c>
 8001dc8:	4635      	mov	r5, r6
 8001dca:	e7e7      	b.n	8001d9c <_realloc_r+0x1c>

08001dcc <_sbrk_r>:
 8001dcc:	b538      	push	{r3, r4, r5, lr}
 8001dce:	2300      	movs	r3, #0
 8001dd0:	4c05      	ldr	r4, [pc, #20]	; (8001de8 <_sbrk_r+0x1c>)
 8001dd2:	4605      	mov	r5, r0
 8001dd4:	4608      	mov	r0, r1
 8001dd6:	6023      	str	r3, [r4, #0]
 8001dd8:	f7ff fb40 	bl	800145c <_sbrk>
 8001ddc:	1c43      	adds	r3, r0, #1
 8001dde:	d102      	bne.n	8001de6 <_sbrk_r+0x1a>
 8001de0:	6823      	ldr	r3, [r4, #0]
 8001de2:	b103      	cbz	r3, 8001de6 <_sbrk_r+0x1a>
 8001de4:	602b      	str	r3, [r5, #0]
 8001de6:	bd38      	pop	{r3, r4, r5, pc}
 8001de8:	200000c0 	.word	0x200000c0

08001dec <__malloc_lock>:
 8001dec:	4770      	bx	lr

08001dee <__malloc_unlock>:
 8001dee:	4770      	bx	lr

08001df0 <_malloc_usable_size_r>:
 8001df0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001df4:	1f18      	subs	r0, r3, #4
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	bfbc      	itt	lt
 8001dfa:	580b      	ldrlt	r3, [r1, r0]
 8001dfc:	18c0      	addlt	r0, r0, r3
 8001dfe:	4770      	bx	lr

08001e00 <_init>:
 8001e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e02:	bf00      	nop
 8001e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e06:	bc08      	pop	{r3}
 8001e08:	469e      	mov	lr, r3
 8001e0a:	4770      	bx	lr

08001e0c <_fini>:
 8001e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e0e:	bf00      	nop
 8001e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e12:	bc08      	pop	{r3}
 8001e14:	469e      	mov	lr, r3
 8001e16:	4770      	bx	lr
