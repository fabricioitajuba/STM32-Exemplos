
STM32-ENC28J60.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003df8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000274  08003f04  08003f04  00013f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004178  08004178  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  08004178  08004178  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004178  08004178  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004178  08004178  00014178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800417c  0800417c  0001417c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08004180  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000033c  20000094  08004214  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d0  08004214  000203d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bb6d  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002043  00000000  00000000  0002bc2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b30  00000000  00000000  0002dc70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a38  00000000  00000000  0002e7a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001622d  00000000  00000000  0002f1d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000087c7  00000000  00000000  00045405  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006e1d2  00000000  00000000  0004dbcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bbd9e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002dd4  00000000  00000000  000bbe1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000094 	.word	0x20000094
 8000128:	00000000 	.word	0x00000000
 800012c:	08003eec 	.word	0x08003eec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000098 	.word	0x20000098
 8000148:	08003eec 	.word	0x08003eec

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000160:	4b08      	ldr	r3, [pc, #32]	; (8000184 <HAL_Init+0x28>)
 8000162:	681b      	ldr	r3, [r3, #0]
 8000164:	4a07      	ldr	r2, [pc, #28]	; (8000184 <HAL_Init+0x28>)
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800016c:	2003      	movs	r0, #3
 800016e:	f000 f929 	bl	80003c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000172:	2000      	movs	r0, #0
 8000174:	f000 f808 	bl	8000188 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000178:	f003 fc62 	bl	8003a40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800017c:	2300      	movs	r3, #0
}
 800017e:	4618      	mov	r0, r3
 8000180:	bd80      	pop	{r7, pc}
 8000182:	bf00      	nop
 8000184:	40022000 	.word	0x40022000

08000188 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b082      	sub	sp, #8
 800018c:	af00      	add	r7, sp, #0
 800018e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000190:	4b12      	ldr	r3, [pc, #72]	; (80001dc <HAL_InitTick+0x54>)
 8000192:	681a      	ldr	r2, [r3, #0]
 8000194:	4b12      	ldr	r3, [pc, #72]	; (80001e0 <HAL_InitTick+0x58>)
 8000196:	781b      	ldrb	r3, [r3, #0]
 8000198:	4619      	mov	r1, r3
 800019a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800019e:	fbb3 f3f1 	udiv	r3, r3, r1
 80001a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80001a6:	4618      	mov	r0, r3
 80001a8:	f000 f933 	bl	8000412 <HAL_SYSTICK_Config>
 80001ac:	4603      	mov	r3, r0
 80001ae:	2b00      	cmp	r3, #0
 80001b0:	d001      	beq.n	80001b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001b2:	2301      	movs	r3, #1
 80001b4:	e00e      	b.n	80001d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	2b0f      	cmp	r3, #15
 80001ba:	d80a      	bhi.n	80001d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001bc:	2200      	movs	r2, #0
 80001be:	6879      	ldr	r1, [r7, #4]
 80001c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80001c4:	f000 f909 	bl	80003da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001c8:	4a06      	ldr	r2, [pc, #24]	; (80001e4 <HAL_InitTick+0x5c>)
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001ce:	2300      	movs	r3, #0
 80001d0:	e000      	b.n	80001d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001d2:	2301      	movs	r3, #1
}
 80001d4:	4618      	mov	r0, r3
 80001d6:	3708      	adds	r7, #8
 80001d8:	46bd      	mov	sp, r7
 80001da:	bd80      	pop	{r7, pc}
 80001dc:	2000002c 	.word	0x2000002c
 80001e0:	20000004 	.word	0x20000004
 80001e4:	20000000 	.word	0x20000000

080001e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001ec:	4b05      	ldr	r3, [pc, #20]	; (8000204 <HAL_IncTick+0x1c>)
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	461a      	mov	r2, r3
 80001f2:	4b05      	ldr	r3, [pc, #20]	; (8000208 <HAL_IncTick+0x20>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4413      	add	r3, r2
 80001f8:	4a03      	ldr	r2, [pc, #12]	; (8000208 <HAL_IncTick+0x20>)
 80001fa:	6013      	str	r3, [r2, #0]
}
 80001fc:	bf00      	nop
 80001fe:	46bd      	mov	sp, r7
 8000200:	bc80      	pop	{r7}
 8000202:	4770      	bx	lr
 8000204:	20000004 	.word	0x20000004
 8000208:	20000350 	.word	0x20000350

0800020c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800020c:	b480      	push	{r7}
 800020e:	af00      	add	r7, sp, #0
  return uwTick;
 8000210:	4b02      	ldr	r3, [pc, #8]	; (800021c <HAL_GetTick+0x10>)
 8000212:	681b      	ldr	r3, [r3, #0]
}
 8000214:	4618      	mov	r0, r3
 8000216:	46bd      	mov	sp, r7
 8000218:	bc80      	pop	{r7}
 800021a:	4770      	bx	lr
 800021c:	20000350 	.word	0x20000350

08000220 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000228:	f7ff fff0 	bl	800020c <HAL_GetTick>
 800022c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000238:	d005      	beq.n	8000246 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800023a:	4b09      	ldr	r3, [pc, #36]	; (8000260 <HAL_Delay+0x40>)
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	461a      	mov	r2, r3
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	4413      	add	r3, r2
 8000244:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000246:	bf00      	nop
 8000248:	f7ff ffe0 	bl	800020c <HAL_GetTick>
 800024c:	4602      	mov	r2, r0
 800024e:	68bb      	ldr	r3, [r7, #8]
 8000250:	1ad3      	subs	r3, r2, r3
 8000252:	68fa      	ldr	r2, [r7, #12]
 8000254:	429a      	cmp	r2, r3
 8000256:	d8f7      	bhi.n	8000248 <HAL_Delay+0x28>
  {
  }
}
 8000258:	bf00      	nop
 800025a:	3710      	adds	r7, #16
 800025c:	46bd      	mov	sp, r7
 800025e:	bd80      	pop	{r7, pc}
 8000260:	20000004 	.word	0x20000004

08000264 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000264:	b480      	push	{r7}
 8000266:	b085      	sub	sp, #20
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f003 0307 	and.w	r3, r3, #7
 8000272:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000274:	4b0c      	ldr	r3, [pc, #48]	; (80002a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000276:	68db      	ldr	r3, [r3, #12]
 8000278:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800027a:	68ba      	ldr	r2, [r7, #8]
 800027c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000280:	4013      	ands	r3, r2
 8000282:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800028c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000290:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000294:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000296:	4a04      	ldr	r2, [pc, #16]	; (80002a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000298:	68bb      	ldr	r3, [r7, #8]
 800029a:	60d3      	str	r3, [r2, #12]
}
 800029c:	bf00      	nop
 800029e:	3714      	adds	r7, #20
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bc80      	pop	{r7}
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	e000ed00 	.word	0xe000ed00

080002ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002b0:	4b04      	ldr	r3, [pc, #16]	; (80002c4 <__NVIC_GetPriorityGrouping+0x18>)
 80002b2:	68db      	ldr	r3, [r3, #12]
 80002b4:	0a1b      	lsrs	r3, r3, #8
 80002b6:	f003 0307 	and.w	r3, r3, #7
}
 80002ba:	4618      	mov	r0, r3
 80002bc:	46bd      	mov	sp, r7
 80002be:	bc80      	pop	{r7}
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	e000ed00 	.word	0xe000ed00

080002c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002c8:	b480      	push	{r7}
 80002ca:	b083      	sub	sp, #12
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	4603      	mov	r3, r0
 80002d0:	6039      	str	r1, [r7, #0]
 80002d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	db0a      	blt.n	80002f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002dc:	683b      	ldr	r3, [r7, #0]
 80002de:	b2da      	uxtb	r2, r3
 80002e0:	490c      	ldr	r1, [pc, #48]	; (8000314 <__NVIC_SetPriority+0x4c>)
 80002e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002e6:	0112      	lsls	r2, r2, #4
 80002e8:	b2d2      	uxtb	r2, r2
 80002ea:	440b      	add	r3, r1
 80002ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002f0:	e00a      	b.n	8000308 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f2:	683b      	ldr	r3, [r7, #0]
 80002f4:	b2da      	uxtb	r2, r3
 80002f6:	4908      	ldr	r1, [pc, #32]	; (8000318 <__NVIC_SetPriority+0x50>)
 80002f8:	79fb      	ldrb	r3, [r7, #7]
 80002fa:	f003 030f 	and.w	r3, r3, #15
 80002fe:	3b04      	subs	r3, #4
 8000300:	0112      	lsls	r2, r2, #4
 8000302:	b2d2      	uxtb	r2, r2
 8000304:	440b      	add	r3, r1
 8000306:	761a      	strb	r2, [r3, #24]
}
 8000308:	bf00      	nop
 800030a:	370c      	adds	r7, #12
 800030c:	46bd      	mov	sp, r7
 800030e:	bc80      	pop	{r7}
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	e000e100 	.word	0xe000e100
 8000318:	e000ed00 	.word	0xe000ed00

0800031c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800031c:	b480      	push	{r7}
 800031e:	b089      	sub	sp, #36	; 0x24
 8000320:	af00      	add	r7, sp, #0
 8000322:	60f8      	str	r0, [r7, #12]
 8000324:	60b9      	str	r1, [r7, #8]
 8000326:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	f003 0307 	and.w	r3, r3, #7
 800032e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000330:	69fb      	ldr	r3, [r7, #28]
 8000332:	f1c3 0307 	rsb	r3, r3, #7
 8000336:	2b04      	cmp	r3, #4
 8000338:	bf28      	it	cs
 800033a:	2304      	movcs	r3, #4
 800033c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800033e:	69fb      	ldr	r3, [r7, #28]
 8000340:	3304      	adds	r3, #4
 8000342:	2b06      	cmp	r3, #6
 8000344:	d902      	bls.n	800034c <NVIC_EncodePriority+0x30>
 8000346:	69fb      	ldr	r3, [r7, #28]
 8000348:	3b03      	subs	r3, #3
 800034a:	e000      	b.n	800034e <NVIC_EncodePriority+0x32>
 800034c:	2300      	movs	r3, #0
 800034e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000350:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000354:	69bb      	ldr	r3, [r7, #24]
 8000356:	fa02 f303 	lsl.w	r3, r2, r3
 800035a:	43da      	mvns	r2, r3
 800035c:	68bb      	ldr	r3, [r7, #8]
 800035e:	401a      	ands	r2, r3
 8000360:	697b      	ldr	r3, [r7, #20]
 8000362:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000364:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000368:	697b      	ldr	r3, [r7, #20]
 800036a:	fa01 f303 	lsl.w	r3, r1, r3
 800036e:	43d9      	mvns	r1, r3
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000374:	4313      	orrs	r3, r2
         );
}
 8000376:	4618      	mov	r0, r3
 8000378:	3724      	adds	r7, #36	; 0x24
 800037a:	46bd      	mov	sp, r7
 800037c:	bc80      	pop	{r7}
 800037e:	4770      	bx	lr

08000380 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	3b01      	subs	r3, #1
 800038c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000390:	d301      	bcc.n	8000396 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000392:	2301      	movs	r3, #1
 8000394:	e00f      	b.n	80003b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000396:	4a0a      	ldr	r2, [pc, #40]	; (80003c0 <SysTick_Config+0x40>)
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	3b01      	subs	r3, #1
 800039c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800039e:	210f      	movs	r1, #15
 80003a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80003a4:	f7ff ff90 	bl	80002c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003a8:	4b05      	ldr	r3, [pc, #20]	; (80003c0 <SysTick_Config+0x40>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003ae:	4b04      	ldr	r3, [pc, #16]	; (80003c0 <SysTick_Config+0x40>)
 80003b0:	2207      	movs	r2, #7
 80003b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003b4:	2300      	movs	r3, #0
}
 80003b6:	4618      	mov	r0, r3
 80003b8:	3708      	adds	r7, #8
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	e000e010 	.word	0xe000e010

080003c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003cc:	6878      	ldr	r0, [r7, #4]
 80003ce:	f7ff ff49 	bl	8000264 <__NVIC_SetPriorityGrouping>
}
 80003d2:	bf00      	nop
 80003d4:	3708      	adds	r7, #8
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}

080003da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003da:	b580      	push	{r7, lr}
 80003dc:	b086      	sub	sp, #24
 80003de:	af00      	add	r7, sp, #0
 80003e0:	4603      	mov	r3, r0
 80003e2:	60b9      	str	r1, [r7, #8]
 80003e4:	607a      	str	r2, [r7, #4]
 80003e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80003e8:	2300      	movs	r3, #0
 80003ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80003ec:	f7ff ff5e 	bl	80002ac <__NVIC_GetPriorityGrouping>
 80003f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80003f2:	687a      	ldr	r2, [r7, #4]
 80003f4:	68b9      	ldr	r1, [r7, #8]
 80003f6:	6978      	ldr	r0, [r7, #20]
 80003f8:	f7ff ff90 	bl	800031c <NVIC_EncodePriority>
 80003fc:	4602      	mov	r2, r0
 80003fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000402:	4611      	mov	r1, r2
 8000404:	4618      	mov	r0, r3
 8000406:	f7ff ff5f 	bl	80002c8 <__NVIC_SetPriority>
}
 800040a:	bf00      	nop
 800040c:	3718      	adds	r7, #24
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}

08000412 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000412:	b580      	push	{r7, lr}
 8000414:	b082      	sub	sp, #8
 8000416:	af00      	add	r7, sp, #0
 8000418:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800041a:	6878      	ldr	r0, [r7, #4]
 800041c:	f7ff ffb0 	bl	8000380 <SysTick_Config>
 8000420:	4603      	mov	r3, r0
}
 8000422:	4618      	mov	r0, r3
 8000424:	3708      	adds	r7, #8
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
	...

0800042c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800042c:	b480      	push	{r7}
 800042e:	b08b      	sub	sp, #44	; 0x2c
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
 8000434:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000436:	2300      	movs	r3, #0
 8000438:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800043a:	2300      	movs	r3, #0
 800043c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800043e:	e127      	b.n	8000690 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000440:	2201      	movs	r2, #1
 8000442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000444:	fa02 f303 	lsl.w	r3, r2, r3
 8000448:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800044a:	683b      	ldr	r3, [r7, #0]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	69fa      	ldr	r2, [r7, #28]
 8000450:	4013      	ands	r3, r2
 8000452:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000454:	69ba      	ldr	r2, [r7, #24]
 8000456:	69fb      	ldr	r3, [r7, #28]
 8000458:	429a      	cmp	r2, r3
 800045a:	f040 8116 	bne.w	800068a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800045e:	683b      	ldr	r3, [r7, #0]
 8000460:	685b      	ldr	r3, [r3, #4]
 8000462:	2b12      	cmp	r3, #18
 8000464:	d034      	beq.n	80004d0 <HAL_GPIO_Init+0xa4>
 8000466:	2b12      	cmp	r3, #18
 8000468:	d80d      	bhi.n	8000486 <HAL_GPIO_Init+0x5a>
 800046a:	2b02      	cmp	r3, #2
 800046c:	d02b      	beq.n	80004c6 <HAL_GPIO_Init+0x9a>
 800046e:	2b02      	cmp	r3, #2
 8000470:	d804      	bhi.n	800047c <HAL_GPIO_Init+0x50>
 8000472:	2b00      	cmp	r3, #0
 8000474:	d031      	beq.n	80004da <HAL_GPIO_Init+0xae>
 8000476:	2b01      	cmp	r3, #1
 8000478:	d01c      	beq.n	80004b4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800047a:	e048      	b.n	800050e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800047c:	2b03      	cmp	r3, #3
 800047e:	d043      	beq.n	8000508 <HAL_GPIO_Init+0xdc>
 8000480:	2b11      	cmp	r3, #17
 8000482:	d01b      	beq.n	80004bc <HAL_GPIO_Init+0x90>
          break;
 8000484:	e043      	b.n	800050e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000486:	4a89      	ldr	r2, [pc, #548]	; (80006ac <HAL_GPIO_Init+0x280>)
 8000488:	4293      	cmp	r3, r2
 800048a:	d026      	beq.n	80004da <HAL_GPIO_Init+0xae>
 800048c:	4a87      	ldr	r2, [pc, #540]	; (80006ac <HAL_GPIO_Init+0x280>)
 800048e:	4293      	cmp	r3, r2
 8000490:	d806      	bhi.n	80004a0 <HAL_GPIO_Init+0x74>
 8000492:	4a87      	ldr	r2, [pc, #540]	; (80006b0 <HAL_GPIO_Init+0x284>)
 8000494:	4293      	cmp	r3, r2
 8000496:	d020      	beq.n	80004da <HAL_GPIO_Init+0xae>
 8000498:	4a86      	ldr	r2, [pc, #536]	; (80006b4 <HAL_GPIO_Init+0x288>)
 800049a:	4293      	cmp	r3, r2
 800049c:	d01d      	beq.n	80004da <HAL_GPIO_Init+0xae>
          break;
 800049e:	e036      	b.n	800050e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80004a0:	4a85      	ldr	r2, [pc, #532]	; (80006b8 <HAL_GPIO_Init+0x28c>)
 80004a2:	4293      	cmp	r3, r2
 80004a4:	d019      	beq.n	80004da <HAL_GPIO_Init+0xae>
 80004a6:	4a85      	ldr	r2, [pc, #532]	; (80006bc <HAL_GPIO_Init+0x290>)
 80004a8:	4293      	cmp	r3, r2
 80004aa:	d016      	beq.n	80004da <HAL_GPIO_Init+0xae>
 80004ac:	4a84      	ldr	r2, [pc, #528]	; (80006c0 <HAL_GPIO_Init+0x294>)
 80004ae:	4293      	cmp	r3, r2
 80004b0:	d013      	beq.n	80004da <HAL_GPIO_Init+0xae>
          break;
 80004b2:	e02c      	b.n	800050e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	68db      	ldr	r3, [r3, #12]
 80004b8:	623b      	str	r3, [r7, #32]
          break;
 80004ba:	e028      	b.n	800050e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	68db      	ldr	r3, [r3, #12]
 80004c0:	3304      	adds	r3, #4
 80004c2:	623b      	str	r3, [r7, #32]
          break;
 80004c4:	e023      	b.n	800050e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80004c6:	683b      	ldr	r3, [r7, #0]
 80004c8:	68db      	ldr	r3, [r3, #12]
 80004ca:	3308      	adds	r3, #8
 80004cc:	623b      	str	r3, [r7, #32]
          break;
 80004ce:	e01e      	b.n	800050e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80004d0:	683b      	ldr	r3, [r7, #0]
 80004d2:	68db      	ldr	r3, [r3, #12]
 80004d4:	330c      	adds	r3, #12
 80004d6:	623b      	str	r3, [r7, #32]
          break;
 80004d8:	e019      	b.n	800050e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80004da:	683b      	ldr	r3, [r7, #0]
 80004dc:	689b      	ldr	r3, [r3, #8]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d102      	bne.n	80004e8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80004e2:	2304      	movs	r3, #4
 80004e4:	623b      	str	r3, [r7, #32]
          break;
 80004e6:	e012      	b.n	800050e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	689b      	ldr	r3, [r3, #8]
 80004ec:	2b01      	cmp	r3, #1
 80004ee:	d105      	bne.n	80004fc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80004f0:	2308      	movs	r3, #8
 80004f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	69fa      	ldr	r2, [r7, #28]
 80004f8:	611a      	str	r2, [r3, #16]
          break;
 80004fa:	e008      	b.n	800050e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80004fc:	2308      	movs	r3, #8
 80004fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	69fa      	ldr	r2, [r7, #28]
 8000504:	615a      	str	r2, [r3, #20]
          break;
 8000506:	e002      	b.n	800050e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000508:	2300      	movs	r3, #0
 800050a:	623b      	str	r3, [r7, #32]
          break;
 800050c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800050e:	69bb      	ldr	r3, [r7, #24]
 8000510:	2bff      	cmp	r3, #255	; 0xff
 8000512:	d801      	bhi.n	8000518 <HAL_GPIO_Init+0xec>
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	e001      	b.n	800051c <HAL_GPIO_Init+0xf0>
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	3304      	adds	r3, #4
 800051c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800051e:	69bb      	ldr	r3, [r7, #24]
 8000520:	2bff      	cmp	r3, #255	; 0xff
 8000522:	d802      	bhi.n	800052a <HAL_GPIO_Init+0xfe>
 8000524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000526:	009b      	lsls	r3, r3, #2
 8000528:	e002      	b.n	8000530 <HAL_GPIO_Init+0x104>
 800052a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800052c:	3b08      	subs	r3, #8
 800052e:	009b      	lsls	r3, r3, #2
 8000530:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000532:	697b      	ldr	r3, [r7, #20]
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	210f      	movs	r1, #15
 8000538:	693b      	ldr	r3, [r7, #16]
 800053a:	fa01 f303 	lsl.w	r3, r1, r3
 800053e:	43db      	mvns	r3, r3
 8000540:	401a      	ands	r2, r3
 8000542:	6a39      	ldr	r1, [r7, #32]
 8000544:	693b      	ldr	r3, [r7, #16]
 8000546:	fa01 f303 	lsl.w	r3, r1, r3
 800054a:	431a      	orrs	r2, r3
 800054c:	697b      	ldr	r3, [r7, #20]
 800054e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	685b      	ldr	r3, [r3, #4]
 8000554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000558:	2b00      	cmp	r3, #0
 800055a:	f000 8096 	beq.w	800068a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800055e:	4b59      	ldr	r3, [pc, #356]	; (80006c4 <HAL_GPIO_Init+0x298>)
 8000560:	699b      	ldr	r3, [r3, #24]
 8000562:	4a58      	ldr	r2, [pc, #352]	; (80006c4 <HAL_GPIO_Init+0x298>)
 8000564:	f043 0301 	orr.w	r3, r3, #1
 8000568:	6193      	str	r3, [r2, #24]
 800056a:	4b56      	ldr	r3, [pc, #344]	; (80006c4 <HAL_GPIO_Init+0x298>)
 800056c:	699b      	ldr	r3, [r3, #24]
 800056e:	f003 0301 	and.w	r3, r3, #1
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000576:	4a54      	ldr	r2, [pc, #336]	; (80006c8 <HAL_GPIO_Init+0x29c>)
 8000578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800057a:	089b      	lsrs	r3, r3, #2
 800057c:	3302      	adds	r3, #2
 800057e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000582:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000586:	f003 0303 	and.w	r3, r3, #3
 800058a:	009b      	lsls	r3, r3, #2
 800058c:	220f      	movs	r2, #15
 800058e:	fa02 f303 	lsl.w	r3, r2, r3
 8000592:	43db      	mvns	r3, r3
 8000594:	68fa      	ldr	r2, [r7, #12]
 8000596:	4013      	ands	r3, r2
 8000598:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4a4b      	ldr	r2, [pc, #300]	; (80006cc <HAL_GPIO_Init+0x2a0>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d013      	beq.n	80005ca <HAL_GPIO_Init+0x19e>
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4a4a      	ldr	r2, [pc, #296]	; (80006d0 <HAL_GPIO_Init+0x2a4>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d00d      	beq.n	80005c6 <HAL_GPIO_Init+0x19a>
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4a49      	ldr	r2, [pc, #292]	; (80006d4 <HAL_GPIO_Init+0x2a8>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d007      	beq.n	80005c2 <HAL_GPIO_Init+0x196>
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4a48      	ldr	r2, [pc, #288]	; (80006d8 <HAL_GPIO_Init+0x2ac>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d101      	bne.n	80005be <HAL_GPIO_Init+0x192>
 80005ba:	2303      	movs	r3, #3
 80005bc:	e006      	b.n	80005cc <HAL_GPIO_Init+0x1a0>
 80005be:	2304      	movs	r3, #4
 80005c0:	e004      	b.n	80005cc <HAL_GPIO_Init+0x1a0>
 80005c2:	2302      	movs	r3, #2
 80005c4:	e002      	b.n	80005cc <HAL_GPIO_Init+0x1a0>
 80005c6:	2301      	movs	r3, #1
 80005c8:	e000      	b.n	80005cc <HAL_GPIO_Init+0x1a0>
 80005ca:	2300      	movs	r3, #0
 80005cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005ce:	f002 0203 	and.w	r2, r2, #3
 80005d2:	0092      	lsls	r2, r2, #2
 80005d4:	4093      	lsls	r3, r2
 80005d6:	68fa      	ldr	r2, [r7, #12]
 80005d8:	4313      	orrs	r3, r2
 80005da:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80005dc:	493a      	ldr	r1, [pc, #232]	; (80006c8 <HAL_GPIO_Init+0x29c>)
 80005de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005e0:	089b      	lsrs	r3, r3, #2
 80005e2:	3302      	adds	r3, #2
 80005e4:	68fa      	ldr	r2, [r7, #12]
 80005e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	685b      	ldr	r3, [r3, #4]
 80005ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d006      	beq.n	8000604 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80005f6:	4b39      	ldr	r3, [pc, #228]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 80005f8:	681a      	ldr	r2, [r3, #0]
 80005fa:	4938      	ldr	r1, [pc, #224]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 80005fc:	69bb      	ldr	r3, [r7, #24]
 80005fe:	4313      	orrs	r3, r2
 8000600:	600b      	str	r3, [r1, #0]
 8000602:	e006      	b.n	8000612 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000604:	4b35      	ldr	r3, [pc, #212]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 8000606:	681a      	ldr	r2, [r3, #0]
 8000608:	69bb      	ldr	r3, [r7, #24]
 800060a:	43db      	mvns	r3, r3
 800060c:	4933      	ldr	r1, [pc, #204]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 800060e:	4013      	ands	r3, r2
 8000610:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	685b      	ldr	r3, [r3, #4]
 8000616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800061a:	2b00      	cmp	r3, #0
 800061c:	d006      	beq.n	800062c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 8000620:	685a      	ldr	r2, [r3, #4]
 8000622:	492e      	ldr	r1, [pc, #184]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 8000624:	69bb      	ldr	r3, [r7, #24]
 8000626:	4313      	orrs	r3, r2
 8000628:	604b      	str	r3, [r1, #4]
 800062a:	e006      	b.n	800063a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800062c:	4b2b      	ldr	r3, [pc, #172]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 800062e:	685a      	ldr	r2, [r3, #4]
 8000630:	69bb      	ldr	r3, [r7, #24]
 8000632:	43db      	mvns	r3, r3
 8000634:	4929      	ldr	r1, [pc, #164]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 8000636:	4013      	ands	r3, r2
 8000638:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	685b      	ldr	r3, [r3, #4]
 800063e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000642:	2b00      	cmp	r3, #0
 8000644:	d006      	beq.n	8000654 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 8000648:	689a      	ldr	r2, [r3, #8]
 800064a:	4924      	ldr	r1, [pc, #144]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 800064c:	69bb      	ldr	r3, [r7, #24]
 800064e:	4313      	orrs	r3, r2
 8000650:	608b      	str	r3, [r1, #8]
 8000652:	e006      	b.n	8000662 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000654:	4b21      	ldr	r3, [pc, #132]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 8000656:	689a      	ldr	r2, [r3, #8]
 8000658:	69bb      	ldr	r3, [r7, #24]
 800065a:	43db      	mvns	r3, r3
 800065c:	491f      	ldr	r1, [pc, #124]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 800065e:	4013      	ands	r3, r2
 8000660:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	685b      	ldr	r3, [r3, #4]
 8000666:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800066a:	2b00      	cmp	r3, #0
 800066c:	d006      	beq.n	800067c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800066e:	4b1b      	ldr	r3, [pc, #108]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 8000670:	68da      	ldr	r2, [r3, #12]
 8000672:	491a      	ldr	r1, [pc, #104]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 8000674:	69bb      	ldr	r3, [r7, #24]
 8000676:	4313      	orrs	r3, r2
 8000678:	60cb      	str	r3, [r1, #12]
 800067a:	e006      	b.n	800068a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 800067e:	68da      	ldr	r2, [r3, #12]
 8000680:	69bb      	ldr	r3, [r7, #24]
 8000682:	43db      	mvns	r3, r3
 8000684:	4915      	ldr	r1, [pc, #84]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 8000686:	4013      	ands	r3, r2
 8000688:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800068a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800068c:	3301      	adds	r3, #1
 800068e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	681a      	ldr	r2, [r3, #0]
 8000694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000696:	fa22 f303 	lsr.w	r3, r2, r3
 800069a:	2b00      	cmp	r3, #0
 800069c:	f47f aed0 	bne.w	8000440 <HAL_GPIO_Init+0x14>
  }
}
 80006a0:	bf00      	nop
 80006a2:	372c      	adds	r7, #44	; 0x2c
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bc80      	pop	{r7}
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	10210000 	.word	0x10210000
 80006b0:	10110000 	.word	0x10110000
 80006b4:	10120000 	.word	0x10120000
 80006b8:	10310000 	.word	0x10310000
 80006bc:	10320000 	.word	0x10320000
 80006c0:	10220000 	.word	0x10220000
 80006c4:	40021000 	.word	0x40021000
 80006c8:	40010000 	.word	0x40010000
 80006cc:	40010800 	.word	0x40010800
 80006d0:	40010c00 	.word	0x40010c00
 80006d4:	40011000 	.word	0x40011000
 80006d8:	40011400 	.word	0x40011400
 80006dc:	40010400 	.word	0x40010400

080006e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	460b      	mov	r3, r1
 80006ea:	807b      	strh	r3, [r7, #2]
 80006ec:	4613      	mov	r3, r2
 80006ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80006f0:	787b      	ldrb	r3, [r7, #1]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d003      	beq.n	80006fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80006f6:	887a      	ldrh	r2, [r7, #2]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80006fc:	e003      	b.n	8000706 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80006fe:	887b      	ldrh	r3, [r7, #2]
 8000700:	041a      	lsls	r2, r3, #16
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	611a      	str	r2, [r3, #16]
}
 8000706:	bf00      	nop
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr

08000710 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b086      	sub	sp, #24
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d101      	bne.n	8000722 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800071e:	2301      	movs	r3, #1
 8000720:	e26c      	b.n	8000bfc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	2b00      	cmp	r3, #0
 800072c:	f000 8087 	beq.w	800083e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000730:	4b92      	ldr	r3, [pc, #584]	; (800097c <HAL_RCC_OscConfig+0x26c>)
 8000732:	685b      	ldr	r3, [r3, #4]
 8000734:	f003 030c 	and.w	r3, r3, #12
 8000738:	2b04      	cmp	r3, #4
 800073a:	d00c      	beq.n	8000756 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800073c:	4b8f      	ldr	r3, [pc, #572]	; (800097c <HAL_RCC_OscConfig+0x26c>)
 800073e:	685b      	ldr	r3, [r3, #4]
 8000740:	f003 030c 	and.w	r3, r3, #12
 8000744:	2b08      	cmp	r3, #8
 8000746:	d112      	bne.n	800076e <HAL_RCC_OscConfig+0x5e>
 8000748:	4b8c      	ldr	r3, [pc, #560]	; (800097c <HAL_RCC_OscConfig+0x26c>)
 800074a:	685b      	ldr	r3, [r3, #4]
 800074c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000754:	d10b      	bne.n	800076e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000756:	4b89      	ldr	r3, [pc, #548]	; (800097c <HAL_RCC_OscConfig+0x26c>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800075e:	2b00      	cmp	r3, #0
 8000760:	d06c      	beq.n	800083c <HAL_RCC_OscConfig+0x12c>
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	685b      	ldr	r3, [r3, #4]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d168      	bne.n	800083c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800076a:	2301      	movs	r3, #1
 800076c:	e246      	b.n	8000bfc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	685b      	ldr	r3, [r3, #4]
 8000772:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000776:	d106      	bne.n	8000786 <HAL_RCC_OscConfig+0x76>
 8000778:	4b80      	ldr	r3, [pc, #512]	; (800097c <HAL_RCC_OscConfig+0x26c>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a7f      	ldr	r2, [pc, #508]	; (800097c <HAL_RCC_OscConfig+0x26c>)
 800077e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000782:	6013      	str	r3, [r2, #0]
 8000784:	e02e      	b.n	80007e4 <HAL_RCC_OscConfig+0xd4>
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	685b      	ldr	r3, [r3, #4]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d10c      	bne.n	80007a8 <HAL_RCC_OscConfig+0x98>
 800078e:	4b7b      	ldr	r3, [pc, #492]	; (800097c <HAL_RCC_OscConfig+0x26c>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4a7a      	ldr	r2, [pc, #488]	; (800097c <HAL_RCC_OscConfig+0x26c>)
 8000794:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000798:	6013      	str	r3, [r2, #0]
 800079a:	4b78      	ldr	r3, [pc, #480]	; (800097c <HAL_RCC_OscConfig+0x26c>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4a77      	ldr	r2, [pc, #476]	; (800097c <HAL_RCC_OscConfig+0x26c>)
 80007a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007a4:	6013      	str	r3, [r2, #0]
 80007a6:	e01d      	b.n	80007e4 <HAL_RCC_OscConfig+0xd4>
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	685b      	ldr	r3, [r3, #4]
 80007ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80007b0:	d10c      	bne.n	80007cc <HAL_RCC_OscConfig+0xbc>
 80007b2:	4b72      	ldr	r3, [pc, #456]	; (800097c <HAL_RCC_OscConfig+0x26c>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4a71      	ldr	r2, [pc, #452]	; (800097c <HAL_RCC_OscConfig+0x26c>)
 80007b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007bc:	6013      	str	r3, [r2, #0]
 80007be:	4b6f      	ldr	r3, [pc, #444]	; (800097c <HAL_RCC_OscConfig+0x26c>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a6e      	ldr	r2, [pc, #440]	; (800097c <HAL_RCC_OscConfig+0x26c>)
 80007c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007c8:	6013      	str	r3, [r2, #0]
 80007ca:	e00b      	b.n	80007e4 <HAL_RCC_OscConfig+0xd4>
 80007cc:	4b6b      	ldr	r3, [pc, #428]	; (800097c <HAL_RCC_OscConfig+0x26c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a6a      	ldr	r2, [pc, #424]	; (800097c <HAL_RCC_OscConfig+0x26c>)
 80007d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007d6:	6013      	str	r3, [r2, #0]
 80007d8:	4b68      	ldr	r3, [pc, #416]	; (800097c <HAL_RCC_OscConfig+0x26c>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a67      	ldr	r2, [pc, #412]	; (800097c <HAL_RCC_OscConfig+0x26c>)
 80007de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	685b      	ldr	r3, [r3, #4]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d013      	beq.n	8000814 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80007ec:	f7ff fd0e 	bl	800020c <HAL_GetTick>
 80007f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80007f2:	e008      	b.n	8000806 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80007f4:	f7ff fd0a 	bl	800020c <HAL_GetTick>
 80007f8:	4602      	mov	r2, r0
 80007fa:	693b      	ldr	r3, [r7, #16]
 80007fc:	1ad3      	subs	r3, r2, r3
 80007fe:	2b64      	cmp	r3, #100	; 0x64
 8000800:	d901      	bls.n	8000806 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000802:	2303      	movs	r3, #3
 8000804:	e1fa      	b.n	8000bfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000806:	4b5d      	ldr	r3, [pc, #372]	; (800097c <HAL_RCC_OscConfig+0x26c>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800080e:	2b00      	cmp	r3, #0
 8000810:	d0f0      	beq.n	80007f4 <HAL_RCC_OscConfig+0xe4>
 8000812:	e014      	b.n	800083e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000814:	f7ff fcfa 	bl	800020c <HAL_GetTick>
 8000818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800081a:	e008      	b.n	800082e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800081c:	f7ff fcf6 	bl	800020c <HAL_GetTick>
 8000820:	4602      	mov	r2, r0
 8000822:	693b      	ldr	r3, [r7, #16]
 8000824:	1ad3      	subs	r3, r2, r3
 8000826:	2b64      	cmp	r3, #100	; 0x64
 8000828:	d901      	bls.n	800082e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800082a:	2303      	movs	r3, #3
 800082c:	e1e6      	b.n	8000bfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800082e:	4b53      	ldr	r3, [pc, #332]	; (800097c <HAL_RCC_OscConfig+0x26c>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000836:	2b00      	cmp	r3, #0
 8000838:	d1f0      	bne.n	800081c <HAL_RCC_OscConfig+0x10c>
 800083a:	e000      	b.n	800083e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800083c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f003 0302 	and.w	r3, r3, #2
 8000846:	2b00      	cmp	r3, #0
 8000848:	d063      	beq.n	8000912 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800084a:	4b4c      	ldr	r3, [pc, #304]	; (800097c <HAL_RCC_OscConfig+0x26c>)
 800084c:	685b      	ldr	r3, [r3, #4]
 800084e:	f003 030c 	and.w	r3, r3, #12
 8000852:	2b00      	cmp	r3, #0
 8000854:	d00b      	beq.n	800086e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000856:	4b49      	ldr	r3, [pc, #292]	; (800097c <HAL_RCC_OscConfig+0x26c>)
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	f003 030c 	and.w	r3, r3, #12
 800085e:	2b08      	cmp	r3, #8
 8000860:	d11c      	bne.n	800089c <HAL_RCC_OscConfig+0x18c>
 8000862:	4b46      	ldr	r3, [pc, #280]	; (800097c <HAL_RCC_OscConfig+0x26c>)
 8000864:	685b      	ldr	r3, [r3, #4]
 8000866:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800086a:	2b00      	cmp	r3, #0
 800086c:	d116      	bne.n	800089c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800086e:	4b43      	ldr	r3, [pc, #268]	; (800097c <HAL_RCC_OscConfig+0x26c>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	f003 0302 	and.w	r3, r3, #2
 8000876:	2b00      	cmp	r3, #0
 8000878:	d005      	beq.n	8000886 <HAL_RCC_OscConfig+0x176>
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	691b      	ldr	r3, [r3, #16]
 800087e:	2b01      	cmp	r3, #1
 8000880:	d001      	beq.n	8000886 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000882:	2301      	movs	r3, #1
 8000884:	e1ba      	b.n	8000bfc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000886:	4b3d      	ldr	r3, [pc, #244]	; (800097c <HAL_RCC_OscConfig+0x26c>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	695b      	ldr	r3, [r3, #20]
 8000892:	00db      	lsls	r3, r3, #3
 8000894:	4939      	ldr	r1, [pc, #228]	; (800097c <HAL_RCC_OscConfig+0x26c>)
 8000896:	4313      	orrs	r3, r2
 8000898:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800089a:	e03a      	b.n	8000912 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	691b      	ldr	r3, [r3, #16]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d020      	beq.n	80008e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80008a4:	4b36      	ldr	r3, [pc, #216]	; (8000980 <HAL_RCC_OscConfig+0x270>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008aa:	f7ff fcaf 	bl	800020c <HAL_GetTick>
 80008ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008b0:	e008      	b.n	80008c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80008b2:	f7ff fcab 	bl	800020c <HAL_GetTick>
 80008b6:	4602      	mov	r2, r0
 80008b8:	693b      	ldr	r3, [r7, #16]
 80008ba:	1ad3      	subs	r3, r2, r3
 80008bc:	2b02      	cmp	r3, #2
 80008be:	d901      	bls.n	80008c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80008c0:	2303      	movs	r3, #3
 80008c2:	e19b      	b.n	8000bfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008c4:	4b2d      	ldr	r3, [pc, #180]	; (800097c <HAL_RCC_OscConfig+0x26c>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f003 0302 	and.w	r3, r3, #2
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d0f0      	beq.n	80008b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008d0:	4b2a      	ldr	r3, [pc, #168]	; (800097c <HAL_RCC_OscConfig+0x26c>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	695b      	ldr	r3, [r3, #20]
 80008dc:	00db      	lsls	r3, r3, #3
 80008de:	4927      	ldr	r1, [pc, #156]	; (800097c <HAL_RCC_OscConfig+0x26c>)
 80008e0:	4313      	orrs	r3, r2
 80008e2:	600b      	str	r3, [r1, #0]
 80008e4:	e015      	b.n	8000912 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80008e6:	4b26      	ldr	r3, [pc, #152]	; (8000980 <HAL_RCC_OscConfig+0x270>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008ec:	f7ff fc8e 	bl	800020c <HAL_GetTick>
 80008f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80008f2:	e008      	b.n	8000906 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80008f4:	f7ff fc8a 	bl	800020c <HAL_GetTick>
 80008f8:	4602      	mov	r2, r0
 80008fa:	693b      	ldr	r3, [r7, #16]
 80008fc:	1ad3      	subs	r3, r2, r3
 80008fe:	2b02      	cmp	r3, #2
 8000900:	d901      	bls.n	8000906 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000902:	2303      	movs	r3, #3
 8000904:	e17a      	b.n	8000bfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000906:	4b1d      	ldr	r3, [pc, #116]	; (800097c <HAL_RCC_OscConfig+0x26c>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	f003 0302 	and.w	r3, r3, #2
 800090e:	2b00      	cmp	r3, #0
 8000910:	d1f0      	bne.n	80008f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	f003 0308 	and.w	r3, r3, #8
 800091a:	2b00      	cmp	r3, #0
 800091c:	d03a      	beq.n	8000994 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	699b      	ldr	r3, [r3, #24]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d019      	beq.n	800095a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000926:	4b17      	ldr	r3, [pc, #92]	; (8000984 <HAL_RCC_OscConfig+0x274>)
 8000928:	2201      	movs	r2, #1
 800092a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800092c:	f7ff fc6e 	bl	800020c <HAL_GetTick>
 8000930:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000932:	e008      	b.n	8000946 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000934:	f7ff fc6a 	bl	800020c <HAL_GetTick>
 8000938:	4602      	mov	r2, r0
 800093a:	693b      	ldr	r3, [r7, #16]
 800093c:	1ad3      	subs	r3, r2, r3
 800093e:	2b02      	cmp	r3, #2
 8000940:	d901      	bls.n	8000946 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000942:	2303      	movs	r3, #3
 8000944:	e15a      	b.n	8000bfc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000946:	4b0d      	ldr	r3, [pc, #52]	; (800097c <HAL_RCC_OscConfig+0x26c>)
 8000948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800094a:	f003 0302 	and.w	r3, r3, #2
 800094e:	2b00      	cmp	r3, #0
 8000950:	d0f0      	beq.n	8000934 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000952:	2001      	movs	r0, #1
 8000954:	f000 faa8 	bl	8000ea8 <RCC_Delay>
 8000958:	e01c      	b.n	8000994 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800095a:	4b0a      	ldr	r3, [pc, #40]	; (8000984 <HAL_RCC_OscConfig+0x274>)
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000960:	f7ff fc54 	bl	800020c <HAL_GetTick>
 8000964:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000966:	e00f      	b.n	8000988 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000968:	f7ff fc50 	bl	800020c <HAL_GetTick>
 800096c:	4602      	mov	r2, r0
 800096e:	693b      	ldr	r3, [r7, #16]
 8000970:	1ad3      	subs	r3, r2, r3
 8000972:	2b02      	cmp	r3, #2
 8000974:	d908      	bls.n	8000988 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000976:	2303      	movs	r3, #3
 8000978:	e140      	b.n	8000bfc <HAL_RCC_OscConfig+0x4ec>
 800097a:	bf00      	nop
 800097c:	40021000 	.word	0x40021000
 8000980:	42420000 	.word	0x42420000
 8000984:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000988:	4b9e      	ldr	r3, [pc, #632]	; (8000c04 <HAL_RCC_OscConfig+0x4f4>)
 800098a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800098c:	f003 0302 	and.w	r3, r3, #2
 8000990:	2b00      	cmp	r3, #0
 8000992:	d1e9      	bne.n	8000968 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f003 0304 	and.w	r3, r3, #4
 800099c:	2b00      	cmp	r3, #0
 800099e:	f000 80a6 	beq.w	8000aee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80009a2:	2300      	movs	r3, #0
 80009a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009a6:	4b97      	ldr	r3, [pc, #604]	; (8000c04 <HAL_RCC_OscConfig+0x4f4>)
 80009a8:	69db      	ldr	r3, [r3, #28]
 80009aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d10d      	bne.n	80009ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80009b2:	4b94      	ldr	r3, [pc, #592]	; (8000c04 <HAL_RCC_OscConfig+0x4f4>)
 80009b4:	69db      	ldr	r3, [r3, #28]
 80009b6:	4a93      	ldr	r2, [pc, #588]	; (8000c04 <HAL_RCC_OscConfig+0x4f4>)
 80009b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009bc:	61d3      	str	r3, [r2, #28]
 80009be:	4b91      	ldr	r3, [pc, #580]	; (8000c04 <HAL_RCC_OscConfig+0x4f4>)
 80009c0:	69db      	ldr	r3, [r3, #28]
 80009c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c6:	60bb      	str	r3, [r7, #8]
 80009c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80009ca:	2301      	movs	r3, #1
 80009cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009ce:	4b8e      	ldr	r3, [pc, #568]	; (8000c08 <HAL_RCC_OscConfig+0x4f8>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d118      	bne.n	8000a0c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80009da:	4b8b      	ldr	r3, [pc, #556]	; (8000c08 <HAL_RCC_OscConfig+0x4f8>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4a8a      	ldr	r2, [pc, #552]	; (8000c08 <HAL_RCC_OscConfig+0x4f8>)
 80009e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80009e6:	f7ff fc11 	bl	800020c <HAL_GetTick>
 80009ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009ec:	e008      	b.n	8000a00 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80009ee:	f7ff fc0d 	bl	800020c <HAL_GetTick>
 80009f2:	4602      	mov	r2, r0
 80009f4:	693b      	ldr	r3, [r7, #16]
 80009f6:	1ad3      	subs	r3, r2, r3
 80009f8:	2b64      	cmp	r3, #100	; 0x64
 80009fa:	d901      	bls.n	8000a00 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80009fc:	2303      	movs	r3, #3
 80009fe:	e0fd      	b.n	8000bfc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a00:	4b81      	ldr	r3, [pc, #516]	; (8000c08 <HAL_RCC_OscConfig+0x4f8>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d0f0      	beq.n	80009ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	68db      	ldr	r3, [r3, #12]
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d106      	bne.n	8000a22 <HAL_RCC_OscConfig+0x312>
 8000a14:	4b7b      	ldr	r3, [pc, #492]	; (8000c04 <HAL_RCC_OscConfig+0x4f4>)
 8000a16:	6a1b      	ldr	r3, [r3, #32]
 8000a18:	4a7a      	ldr	r2, [pc, #488]	; (8000c04 <HAL_RCC_OscConfig+0x4f4>)
 8000a1a:	f043 0301 	orr.w	r3, r3, #1
 8000a1e:	6213      	str	r3, [r2, #32]
 8000a20:	e02d      	b.n	8000a7e <HAL_RCC_OscConfig+0x36e>
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	68db      	ldr	r3, [r3, #12]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d10c      	bne.n	8000a44 <HAL_RCC_OscConfig+0x334>
 8000a2a:	4b76      	ldr	r3, [pc, #472]	; (8000c04 <HAL_RCC_OscConfig+0x4f4>)
 8000a2c:	6a1b      	ldr	r3, [r3, #32]
 8000a2e:	4a75      	ldr	r2, [pc, #468]	; (8000c04 <HAL_RCC_OscConfig+0x4f4>)
 8000a30:	f023 0301 	bic.w	r3, r3, #1
 8000a34:	6213      	str	r3, [r2, #32]
 8000a36:	4b73      	ldr	r3, [pc, #460]	; (8000c04 <HAL_RCC_OscConfig+0x4f4>)
 8000a38:	6a1b      	ldr	r3, [r3, #32]
 8000a3a:	4a72      	ldr	r2, [pc, #456]	; (8000c04 <HAL_RCC_OscConfig+0x4f4>)
 8000a3c:	f023 0304 	bic.w	r3, r3, #4
 8000a40:	6213      	str	r3, [r2, #32]
 8000a42:	e01c      	b.n	8000a7e <HAL_RCC_OscConfig+0x36e>
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	68db      	ldr	r3, [r3, #12]
 8000a48:	2b05      	cmp	r3, #5
 8000a4a:	d10c      	bne.n	8000a66 <HAL_RCC_OscConfig+0x356>
 8000a4c:	4b6d      	ldr	r3, [pc, #436]	; (8000c04 <HAL_RCC_OscConfig+0x4f4>)
 8000a4e:	6a1b      	ldr	r3, [r3, #32]
 8000a50:	4a6c      	ldr	r2, [pc, #432]	; (8000c04 <HAL_RCC_OscConfig+0x4f4>)
 8000a52:	f043 0304 	orr.w	r3, r3, #4
 8000a56:	6213      	str	r3, [r2, #32]
 8000a58:	4b6a      	ldr	r3, [pc, #424]	; (8000c04 <HAL_RCC_OscConfig+0x4f4>)
 8000a5a:	6a1b      	ldr	r3, [r3, #32]
 8000a5c:	4a69      	ldr	r2, [pc, #420]	; (8000c04 <HAL_RCC_OscConfig+0x4f4>)
 8000a5e:	f043 0301 	orr.w	r3, r3, #1
 8000a62:	6213      	str	r3, [r2, #32]
 8000a64:	e00b      	b.n	8000a7e <HAL_RCC_OscConfig+0x36e>
 8000a66:	4b67      	ldr	r3, [pc, #412]	; (8000c04 <HAL_RCC_OscConfig+0x4f4>)
 8000a68:	6a1b      	ldr	r3, [r3, #32]
 8000a6a:	4a66      	ldr	r2, [pc, #408]	; (8000c04 <HAL_RCC_OscConfig+0x4f4>)
 8000a6c:	f023 0301 	bic.w	r3, r3, #1
 8000a70:	6213      	str	r3, [r2, #32]
 8000a72:	4b64      	ldr	r3, [pc, #400]	; (8000c04 <HAL_RCC_OscConfig+0x4f4>)
 8000a74:	6a1b      	ldr	r3, [r3, #32]
 8000a76:	4a63      	ldr	r2, [pc, #396]	; (8000c04 <HAL_RCC_OscConfig+0x4f4>)
 8000a78:	f023 0304 	bic.w	r3, r3, #4
 8000a7c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	68db      	ldr	r3, [r3, #12]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d015      	beq.n	8000ab2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a86:	f7ff fbc1 	bl	800020c <HAL_GetTick>
 8000a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a8c:	e00a      	b.n	8000aa4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000a8e:	f7ff fbbd 	bl	800020c <HAL_GetTick>
 8000a92:	4602      	mov	r2, r0
 8000a94:	693b      	ldr	r3, [r7, #16]
 8000a96:	1ad3      	subs	r3, r2, r3
 8000a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d901      	bls.n	8000aa4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	e0ab      	b.n	8000bfc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000aa4:	4b57      	ldr	r3, [pc, #348]	; (8000c04 <HAL_RCC_OscConfig+0x4f4>)
 8000aa6:	6a1b      	ldr	r3, [r3, #32]
 8000aa8:	f003 0302 	and.w	r3, r3, #2
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d0ee      	beq.n	8000a8e <HAL_RCC_OscConfig+0x37e>
 8000ab0:	e014      	b.n	8000adc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ab2:	f7ff fbab 	bl	800020c <HAL_GetTick>
 8000ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ab8:	e00a      	b.n	8000ad0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000aba:	f7ff fba7 	bl	800020c <HAL_GetTick>
 8000abe:	4602      	mov	r2, r0
 8000ac0:	693b      	ldr	r3, [r7, #16]
 8000ac2:	1ad3      	subs	r3, r2, r3
 8000ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d901      	bls.n	8000ad0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000acc:	2303      	movs	r3, #3
 8000ace:	e095      	b.n	8000bfc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ad0:	4b4c      	ldr	r3, [pc, #304]	; (8000c04 <HAL_RCC_OscConfig+0x4f4>)
 8000ad2:	6a1b      	ldr	r3, [r3, #32]
 8000ad4:	f003 0302 	and.w	r3, r3, #2
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d1ee      	bne.n	8000aba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000adc:	7dfb      	ldrb	r3, [r7, #23]
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	d105      	bne.n	8000aee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ae2:	4b48      	ldr	r3, [pc, #288]	; (8000c04 <HAL_RCC_OscConfig+0x4f4>)
 8000ae4:	69db      	ldr	r3, [r3, #28]
 8000ae6:	4a47      	ldr	r2, [pc, #284]	; (8000c04 <HAL_RCC_OscConfig+0x4f4>)
 8000ae8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000aec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	69db      	ldr	r3, [r3, #28]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	f000 8081 	beq.w	8000bfa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000af8:	4b42      	ldr	r3, [pc, #264]	; (8000c04 <HAL_RCC_OscConfig+0x4f4>)
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	f003 030c 	and.w	r3, r3, #12
 8000b00:	2b08      	cmp	r3, #8
 8000b02:	d061      	beq.n	8000bc8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	69db      	ldr	r3, [r3, #28]
 8000b08:	2b02      	cmp	r3, #2
 8000b0a:	d146      	bne.n	8000b9a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000b0c:	4b3f      	ldr	r3, [pc, #252]	; (8000c0c <HAL_RCC_OscConfig+0x4fc>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b12:	f7ff fb7b 	bl	800020c <HAL_GetTick>
 8000b16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b18:	e008      	b.n	8000b2c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000b1a:	f7ff fb77 	bl	800020c <HAL_GetTick>
 8000b1e:	4602      	mov	r2, r0
 8000b20:	693b      	ldr	r3, [r7, #16]
 8000b22:	1ad3      	subs	r3, r2, r3
 8000b24:	2b02      	cmp	r3, #2
 8000b26:	d901      	bls.n	8000b2c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	e067      	b.n	8000bfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b2c:	4b35      	ldr	r3, [pc, #212]	; (8000c04 <HAL_RCC_OscConfig+0x4f4>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d1f0      	bne.n	8000b1a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6a1b      	ldr	r3, [r3, #32]
 8000b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b40:	d108      	bne.n	8000b54 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000b42:	4b30      	ldr	r3, [pc, #192]	; (8000c04 <HAL_RCC_OscConfig+0x4f4>)
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	689b      	ldr	r3, [r3, #8]
 8000b4e:	492d      	ldr	r1, [pc, #180]	; (8000c04 <HAL_RCC_OscConfig+0x4f4>)
 8000b50:	4313      	orrs	r3, r2
 8000b52:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000b54:	4b2b      	ldr	r3, [pc, #172]	; (8000c04 <HAL_RCC_OscConfig+0x4f4>)
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	6a19      	ldr	r1, [r3, #32]
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b64:	430b      	orrs	r3, r1
 8000b66:	4927      	ldr	r1, [pc, #156]	; (8000c04 <HAL_RCC_OscConfig+0x4f4>)
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000b6c:	4b27      	ldr	r3, [pc, #156]	; (8000c0c <HAL_RCC_OscConfig+0x4fc>)
 8000b6e:	2201      	movs	r2, #1
 8000b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b72:	f7ff fb4b 	bl	800020c <HAL_GetTick>
 8000b76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000b78:	e008      	b.n	8000b8c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000b7a:	f7ff fb47 	bl	800020c <HAL_GetTick>
 8000b7e:	4602      	mov	r2, r0
 8000b80:	693b      	ldr	r3, [r7, #16]
 8000b82:	1ad3      	subs	r3, r2, r3
 8000b84:	2b02      	cmp	r3, #2
 8000b86:	d901      	bls.n	8000b8c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	e037      	b.n	8000bfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000b8c:	4b1d      	ldr	r3, [pc, #116]	; (8000c04 <HAL_RCC_OscConfig+0x4f4>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d0f0      	beq.n	8000b7a <HAL_RCC_OscConfig+0x46a>
 8000b98:	e02f      	b.n	8000bfa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000b9a:	4b1c      	ldr	r3, [pc, #112]	; (8000c0c <HAL_RCC_OscConfig+0x4fc>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ba0:	f7ff fb34 	bl	800020c <HAL_GetTick>
 8000ba4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ba6:	e008      	b.n	8000bba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ba8:	f7ff fb30 	bl	800020c <HAL_GetTick>
 8000bac:	4602      	mov	r2, r0
 8000bae:	693b      	ldr	r3, [r7, #16]
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	2b02      	cmp	r3, #2
 8000bb4:	d901      	bls.n	8000bba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	e020      	b.n	8000bfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bba:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <HAL_RCC_OscConfig+0x4f4>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d1f0      	bne.n	8000ba8 <HAL_RCC_OscConfig+0x498>
 8000bc6:	e018      	b.n	8000bfa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	69db      	ldr	r3, [r3, #28]
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d101      	bne.n	8000bd4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	e013      	b.n	8000bfc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000bd4:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <HAL_RCC_OscConfig+0x4f4>)
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	6a1b      	ldr	r3, [r3, #32]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d106      	bne.n	8000bf6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	d001      	beq.n	8000bfa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e000      	b.n	8000bfc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000bfa:	2300      	movs	r3, #0
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3718      	adds	r7, #24
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40021000 	.word	0x40021000
 8000c08:	40007000 	.word	0x40007000
 8000c0c:	42420060 	.word	0x42420060

08000c10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d101      	bne.n	8000c24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000c20:	2301      	movs	r3, #1
 8000c22:	e0d0      	b.n	8000dc6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000c24:	4b6a      	ldr	r3, [pc, #424]	; (8000dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f003 0307 	and.w	r3, r3, #7
 8000c2c:	683a      	ldr	r2, [r7, #0]
 8000c2e:	429a      	cmp	r2, r3
 8000c30:	d910      	bls.n	8000c54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c32:	4b67      	ldr	r3, [pc, #412]	; (8000dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f023 0207 	bic.w	r2, r3, #7
 8000c3a:	4965      	ldr	r1, [pc, #404]	; (8000dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c42:	4b63      	ldr	r3, [pc, #396]	; (8000dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f003 0307 	and.w	r3, r3, #7
 8000c4a:	683a      	ldr	r2, [r7, #0]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d001      	beq.n	8000c54 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000c50:	2301      	movs	r3, #1
 8000c52:	e0b8      	b.n	8000dc6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f003 0302 	and.w	r3, r3, #2
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d020      	beq.n	8000ca2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f003 0304 	and.w	r3, r3, #4
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d005      	beq.n	8000c78 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c6c:	4b59      	ldr	r3, [pc, #356]	; (8000dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	4a58      	ldr	r2, [pc, #352]	; (8000dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8000c72:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000c76:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f003 0308 	and.w	r3, r3, #8
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d005      	beq.n	8000c90 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000c84:	4b53      	ldr	r3, [pc, #332]	; (8000dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	4a52      	ldr	r2, [pc, #328]	; (8000dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8000c8a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000c8e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c90:	4b50      	ldr	r3, [pc, #320]	; (8000dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	689b      	ldr	r3, [r3, #8]
 8000c9c:	494d      	ldr	r1, [pc, #308]	; (8000dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d040      	beq.n	8000d30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d107      	bne.n	8000cc6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cb6:	4b47      	ldr	r3, [pc, #284]	; (8000dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d115      	bne.n	8000cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e07f      	b.n	8000dc6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	2b02      	cmp	r3, #2
 8000ccc:	d107      	bne.n	8000cde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cce:	4b41      	ldr	r3, [pc, #260]	; (8000dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d109      	bne.n	8000cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e073      	b.n	8000dc6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cde:	4b3d      	ldr	r3, [pc, #244]	; (8000dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f003 0302 	and.w	r3, r3, #2
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d101      	bne.n	8000cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e06b      	b.n	8000dc6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000cee:	4b39      	ldr	r3, [pc, #228]	; (8000dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	f023 0203 	bic.w	r2, r3, #3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	4936      	ldr	r1, [pc, #216]	; (8000dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000d00:	f7ff fa84 	bl	800020c <HAL_GetTick>
 8000d04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d06:	e00a      	b.n	8000d1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d08:	f7ff fa80 	bl	800020c <HAL_GetTick>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d901      	bls.n	8000d1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	e053      	b.n	8000dc6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d1e:	4b2d      	ldr	r3, [pc, #180]	; (8000dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f003 020c 	and.w	r2, r3, #12
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d1eb      	bne.n	8000d08 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000d30:	4b27      	ldr	r3, [pc, #156]	; (8000dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f003 0307 	and.w	r3, r3, #7
 8000d38:	683a      	ldr	r2, [r7, #0]
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	d210      	bcs.n	8000d60 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d3e:	4b24      	ldr	r3, [pc, #144]	; (8000dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f023 0207 	bic.w	r2, r3, #7
 8000d46:	4922      	ldr	r1, [pc, #136]	; (8000dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d4e:	4b20      	ldr	r3, [pc, #128]	; (8000dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f003 0307 	and.w	r3, r3, #7
 8000d56:	683a      	ldr	r2, [r7, #0]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d001      	beq.n	8000d60 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	e032      	b.n	8000dc6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f003 0304 	and.w	r3, r3, #4
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d008      	beq.n	8000d7e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d6c:	4b19      	ldr	r3, [pc, #100]	; (8000dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	4916      	ldr	r1, [pc, #88]	; (8000dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f003 0308 	and.w	r3, r3, #8
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d009      	beq.n	8000d9e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000d8a:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	691b      	ldr	r3, [r3, #16]
 8000d96:	00db      	lsls	r3, r3, #3
 8000d98:	490e      	ldr	r1, [pc, #56]	; (8000dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000d9e:	f000 f821 	bl	8000de4 <HAL_RCC_GetSysClockFreq>
 8000da2:	4601      	mov	r1, r0
 8000da4:	4b0b      	ldr	r3, [pc, #44]	; (8000dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	091b      	lsrs	r3, r3, #4
 8000daa:	f003 030f 	and.w	r3, r3, #15
 8000dae:	4a0a      	ldr	r2, [pc, #40]	; (8000dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8000db0:	5cd3      	ldrb	r3, [r2, r3]
 8000db2:	fa21 f303 	lsr.w	r3, r1, r3
 8000db6:	4a09      	ldr	r2, [pc, #36]	; (8000ddc <HAL_RCC_ClockConfig+0x1cc>)
 8000db8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000dba:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <HAL_RCC_ClockConfig+0x1d0>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff f9e2 	bl	8000188 <HAL_InitTick>

  return HAL_OK;
 8000dc4:	2300      	movs	r3, #0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3710      	adds	r7, #16
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40022000 	.word	0x40022000
 8000dd4:	40021000 	.word	0x40021000
 8000dd8:	08004168 	.word	0x08004168
 8000ddc:	2000002c 	.word	0x2000002c
 8000de0:	20000000 	.word	0x20000000

08000de4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000de4:	b490      	push	{r4, r7}
 8000de6:	b08a      	sub	sp, #40	; 0x28
 8000de8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000dea:	4b2a      	ldr	r3, [pc, #168]	; (8000e94 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000dec:	1d3c      	adds	r4, r7, #4
 8000dee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000df0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000df4:	4b28      	ldr	r3, [pc, #160]	; (8000e98 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000df6:	881b      	ldrh	r3, [r3, #0]
 8000df8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61fb      	str	r3, [r7, #28]
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61bb      	str	r3, [r7, #24]
 8000e02:	2300      	movs	r3, #0
 8000e04:	627b      	str	r3, [r7, #36]	; 0x24
 8000e06:	2300      	movs	r3, #0
 8000e08:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000e0e:	4b23      	ldr	r3, [pc, #140]	; (8000e9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	f003 030c 	and.w	r3, r3, #12
 8000e1a:	2b04      	cmp	r3, #4
 8000e1c:	d002      	beq.n	8000e24 <HAL_RCC_GetSysClockFreq+0x40>
 8000e1e:	2b08      	cmp	r3, #8
 8000e20:	d003      	beq.n	8000e2a <HAL_RCC_GetSysClockFreq+0x46>
 8000e22:	e02d      	b.n	8000e80 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000e24:	4b1e      	ldr	r3, [pc, #120]	; (8000ea0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000e26:	623b      	str	r3, [r7, #32]
      break;
 8000e28:	e02d      	b.n	8000e86 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	0c9b      	lsrs	r3, r3, #18
 8000e2e:	f003 030f 	and.w	r3, r3, #15
 8000e32:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e36:	4413      	add	r3, r2
 8000e38:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000e3c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d013      	beq.n	8000e70 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000e48:	4b14      	ldr	r3, [pc, #80]	; (8000e9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	0c5b      	lsrs	r3, r3, #17
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e56:	4413      	add	r3, r2
 8000e58:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000e5c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	4a0f      	ldr	r2, [pc, #60]	; (8000ea0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000e62:	fb02 f203 	mul.w	r2, r2, r3
 8000e66:	69bb      	ldr	r3, [r7, #24]
 8000e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24
 8000e6e:	e004      	b.n	8000e7a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	4a0c      	ldr	r2, [pc, #48]	; (8000ea4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000e74:	fb02 f303 	mul.w	r3, r2, r3
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8000e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7c:	623b      	str	r3, [r7, #32]
      break;
 8000e7e:	e002      	b.n	8000e86 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000e80:	4b07      	ldr	r3, [pc, #28]	; (8000ea0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000e82:	623b      	str	r3, [r7, #32]
      break;
 8000e84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000e86:	6a3b      	ldr	r3, [r7, #32]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3728      	adds	r7, #40	; 0x28
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bc90      	pop	{r4, r7}
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	08003f04 	.word	0x08003f04
 8000e98:	08003f14 	.word	0x08003f14
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	007a1200 	.word	0x007a1200
 8000ea4:	003d0900 	.word	0x003d0900

08000ea8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000eb0:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <RCC_Delay+0x34>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ee0 <RCC_Delay+0x38>)
 8000eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eba:	0a5b      	lsrs	r3, r3, #9
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	fb02 f303 	mul.w	r3, r2, r3
 8000ec2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8000ec4:	bf00      	nop
  }
  while (Delay --);
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	1e5a      	subs	r2, r3, #1
 8000eca:	60fa      	str	r2, [r7, #12]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d1f9      	bne.n	8000ec4 <RCC_Delay+0x1c>
}
 8000ed0:	bf00      	nop
 8000ed2:	3714      	adds	r7, #20
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bc80      	pop	{r7}
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	2000002c 	.word	0x2000002c
 8000ee0:	10624dd3 	.word	0x10624dd3

08000ee4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d101      	bne.n	8000ef6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e053      	b.n	8000f9e <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d106      	bne.n	8000f16 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f002 fdc7 	bl	8003aa4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2202      	movs	r2, #2
 8000f1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000f2c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	685a      	ldr	r2, [r3, #4]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	431a      	orrs	r2, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	431a      	orrs	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	691b      	ldr	r3, [r3, #16]
 8000f42:	431a      	orrs	r2, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	695b      	ldr	r3, [r3, #20]
 8000f48:	431a      	orrs	r2, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	699b      	ldr	r3, [r3, #24]
 8000f4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f52:	431a      	orrs	r2, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	69db      	ldr	r3, [r3, #28]
 8000f58:	431a      	orrs	r2, r3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6a1b      	ldr	r3, [r3, #32]
 8000f5e:	ea42 0103 	orr.w	r1, r2, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	430a      	orrs	r2, r1
 8000f6c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	699b      	ldr	r3, [r3, #24]
 8000f72:	0c1a      	lsrs	r2, r3, #16
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f002 0204 	and.w	r2, r2, #4
 8000f7c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	69da      	ldr	r2, [r3, #28]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f8c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2201      	movs	r2, #1
 8000f98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8000f9c:	2300      	movs	r3, #0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b08c      	sub	sp, #48	; 0x30
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	60f8      	str	r0, [r7, #12]
 8000fae:	60b9      	str	r1, [r7, #8]
 8000fb0:	607a      	str	r2, [r7, #4]
 8000fb2:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d101      	bne.n	8000fcc <HAL_SPI_TransmitReceive+0x26>
 8000fc8:	2302      	movs	r3, #2
 8000fca:	e18a      	b.n	80012e2 <HAL_SPI_TransmitReceive+0x33c>
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	2201      	movs	r2, #1
 8000fd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8000fd4:	f7ff f91a 	bl	800020c <HAL_GetTick>
 8000fd8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000fe0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8000fea:	887b      	ldrh	r3, [r7, #2]
 8000fec:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8000fee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d00f      	beq.n	8001016 <HAL_SPI_TransmitReceive+0x70>
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8000ffc:	d107      	bne.n	800100e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d103      	bne.n	800100e <HAL_SPI_TransmitReceive+0x68>
 8001006:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800100a:	2b04      	cmp	r3, #4
 800100c:	d003      	beq.n	8001016 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800100e:	2302      	movs	r3, #2
 8001010:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001014:	e15b      	b.n	80012ce <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d005      	beq.n	8001028 <HAL_SPI_TransmitReceive+0x82>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d002      	beq.n	8001028 <HAL_SPI_TransmitReceive+0x82>
 8001022:	887b      	ldrh	r3, [r7, #2]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d103      	bne.n	8001030 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001028:	2301      	movs	r3, #1
 800102a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800102e:	e14e      	b.n	80012ce <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001036:	b2db      	uxtb	r3, r3
 8001038:	2b04      	cmp	r3, #4
 800103a:	d003      	beq.n	8001044 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	2205      	movs	r2, #5
 8001040:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	2200      	movs	r2, #0
 8001048:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	887a      	ldrh	r2, [r7, #2]
 8001054:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	887a      	ldrh	r2, [r7, #2]
 800105a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	68ba      	ldr	r2, [r7, #8]
 8001060:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	887a      	ldrh	r2, [r7, #2]
 8001066:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	887a      	ldrh	r2, [r7, #2]
 800106c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	2200      	movs	r2, #0
 8001072:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	2200      	movs	r2, #0
 8001078:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001084:	2b40      	cmp	r3, #64	; 0x40
 8001086:	d007      	beq.n	8001098 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001096:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80010a0:	d178      	bne.n	8001194 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d002      	beq.n	80010b0 <HAL_SPI_TransmitReceive+0x10a>
 80010aa:	8b7b      	ldrh	r3, [r7, #26]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d166      	bne.n	800117e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b4:	881a      	ldrh	r2, [r3, #0]
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c0:	1c9a      	adds	r2, r3, #2
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	3b01      	subs	r3, #1
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80010d4:	e053      	b.n	800117e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	f003 0302 	and.w	r3, r3, #2
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d11b      	bne.n	800111c <HAL_SPI_TransmitReceive+0x176>
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d016      	beq.n	800111c <HAL_SPI_TransmitReceive+0x176>
 80010ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d113      	bne.n	800111c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f8:	881a      	ldrh	r2, [r3, #0]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001104:	1c9a      	adds	r2, r3, #2
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800110e:	b29b      	uxth	r3, r3
 8001110:	3b01      	subs	r3, #1
 8001112:	b29a      	uxth	r2, r3
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001118:	2300      	movs	r3, #0
 800111a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	2b01      	cmp	r3, #1
 8001128:	d119      	bne.n	800115e <HAL_SPI_TransmitReceive+0x1b8>
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800112e:	b29b      	uxth	r3, r3
 8001130:	2b00      	cmp	r3, #0
 8001132:	d014      	beq.n	800115e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	68da      	ldr	r2, [r3, #12]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800113e:	b292      	uxth	r2, r2
 8001140:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001146:	1c9a      	adds	r2, r3, #2
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001150:	b29b      	uxth	r3, r3
 8001152:	3b01      	subs	r3, #1
 8001154:	b29a      	uxth	r2, r3
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800115a:	2301      	movs	r3, #1
 800115c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800115e:	f7ff f855 	bl	800020c <HAL_GetTick>
 8001162:	4602      	mov	r2, r0
 8001164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800116a:	429a      	cmp	r2, r3
 800116c:	d807      	bhi.n	800117e <HAL_SPI_TransmitReceive+0x1d8>
 800116e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001170:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001174:	d003      	beq.n	800117e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001176:	2303      	movs	r3, #3
 8001178:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800117c:	e0a7      	b.n	80012ce <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001182:	b29b      	uxth	r3, r3
 8001184:	2b00      	cmp	r3, #0
 8001186:	d1a6      	bne.n	80010d6 <HAL_SPI_TransmitReceive+0x130>
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800118c:	b29b      	uxth	r3, r3
 800118e:	2b00      	cmp	r3, #0
 8001190:	d1a1      	bne.n	80010d6 <HAL_SPI_TransmitReceive+0x130>
 8001192:	e07c      	b.n	800128e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d002      	beq.n	80011a2 <HAL_SPI_TransmitReceive+0x1fc>
 800119c:	8b7b      	ldrh	r3, [r7, #26]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d16b      	bne.n	800127a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	330c      	adds	r3, #12
 80011ac:	7812      	ldrb	r2, [r2, #0]
 80011ae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b4:	1c5a      	adds	r2, r3, #1
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80011be:	b29b      	uxth	r3, r3
 80011c0:	3b01      	subs	r3, #1
 80011c2:	b29a      	uxth	r2, r3
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80011c8:	e057      	b.n	800127a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	f003 0302 	and.w	r3, r3, #2
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d11c      	bne.n	8001212 <HAL_SPI_TransmitReceive+0x26c>
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80011dc:	b29b      	uxth	r3, r3
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d017      	beq.n	8001212 <HAL_SPI_TransmitReceive+0x26c>
 80011e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d114      	bne.n	8001212 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	330c      	adds	r3, #12
 80011f2:	7812      	ldrb	r2, [r2, #0]
 80011f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	1c5a      	adds	r2, r3, #1
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001204:	b29b      	uxth	r3, r3
 8001206:	3b01      	subs	r3, #1
 8001208:	b29a      	uxth	r2, r3
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800120e:	2300      	movs	r3, #0
 8001210:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	f003 0301 	and.w	r3, r3, #1
 800121c:	2b01      	cmp	r3, #1
 800121e:	d119      	bne.n	8001254 <HAL_SPI_TransmitReceive+0x2ae>
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001224:	b29b      	uxth	r3, r3
 8001226:	2b00      	cmp	r3, #0
 8001228:	d014      	beq.n	8001254 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	68da      	ldr	r2, [r3, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001234:	b2d2      	uxtb	r2, r2
 8001236:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800123c:	1c5a      	adds	r2, r3, #1
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001246:	b29b      	uxth	r3, r3
 8001248:	3b01      	subs	r3, #1
 800124a:	b29a      	uxth	r2, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001250:	2301      	movs	r3, #1
 8001252:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001254:	f7fe ffda 	bl	800020c <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001260:	429a      	cmp	r2, r3
 8001262:	d803      	bhi.n	800126c <HAL_SPI_TransmitReceive+0x2c6>
 8001264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001266:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800126a:	d102      	bne.n	8001272 <HAL_SPI_TransmitReceive+0x2cc>
 800126c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800126e:	2b00      	cmp	r3, #0
 8001270:	d103      	bne.n	800127a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001278:	e029      	b.n	80012ce <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800127e:	b29b      	uxth	r3, r3
 8001280:	2b00      	cmp	r3, #0
 8001282:	d1a2      	bne.n	80011ca <HAL_SPI_TransmitReceive+0x224>
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001288:	b29b      	uxth	r3, r3
 800128a:	2b00      	cmp	r3, #0
 800128c:	d19d      	bne.n	80011ca <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800128e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001290:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001292:	68f8      	ldr	r0, [r7, #12]
 8001294:	f000 f893 	bl	80013be <SPI_EndRxTxTransaction>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d006      	beq.n	80012ac <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	2220      	movs	r2, #32
 80012a8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80012aa:	e010      	b.n	80012ce <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d10b      	bne.n	80012cc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	617b      	str	r3, [r7, #20]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	617b      	str	r3, [r7, #20]
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	e000      	b.n	80012ce <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80012cc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	2201      	movs	r2, #1
 80012d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	2200      	movs	r2, #0
 80012da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80012de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3730      	adds	r7, #48	; 0x30
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b084      	sub	sp, #16
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	60f8      	str	r0, [r7, #12]
 80012f2:	60b9      	str	r1, [r7, #8]
 80012f4:	603b      	str	r3, [r7, #0]
 80012f6:	4613      	mov	r3, r2
 80012f8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80012fa:	e04c      	b.n	8001396 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001302:	d048      	beq.n	8001396 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001304:	f7fe ff82 	bl	800020c <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	683a      	ldr	r2, [r7, #0]
 8001310:	429a      	cmp	r2, r3
 8001312:	d902      	bls.n	800131a <SPI_WaitFlagStateUntilTimeout+0x30>
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d13d      	bne.n	8001396 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	685a      	ldr	r2, [r3, #4]
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001328:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001332:	d111      	bne.n	8001358 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800133c:	d004      	beq.n	8001348 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001346:	d107      	bne.n	8001358 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001356:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800135c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001360:	d10f      	bne.n	8001382 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001380:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	2201      	movs	r2, #1
 8001386:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e00f      	b.n	80013b6 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	689a      	ldr	r2, [r3, #8]
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	4013      	ands	r3, r2
 80013a0:	68ba      	ldr	r2, [r7, #8]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	bf0c      	ite	eq
 80013a6:	2301      	moveq	r3, #1
 80013a8:	2300      	movne	r3, #0
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	461a      	mov	r2, r3
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d1a3      	bne.n	80012fc <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b086      	sub	sp, #24
 80013c2:	af02      	add	r7, sp, #8
 80013c4:	60f8      	str	r0, [r7, #12]
 80013c6:	60b9      	str	r1, [r7, #8]
 80013c8:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	9300      	str	r3, [sp, #0]
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	2200      	movs	r2, #0
 80013d2:	2180      	movs	r1, #128	; 0x80
 80013d4:	68f8      	ldr	r0, [r7, #12]
 80013d6:	f7ff ff88 	bl	80012ea <SPI_WaitFlagStateUntilTimeout>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d007      	beq.n	80013f0 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013e4:	f043 0220 	orr.w	r2, r3, #32
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e000      	b.n	80013f2 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <ES_enc28j60SpiInit>:

/**
 * Initialise SPI, separate from main initialisation so that
 * multiple SPI devices can be used together
 */
void ES_enc28j60SpiInit(SPI_HandleTypeDef *hspi){
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b082      	sub	sp, #8
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
//  ENC28J60_SPI1_Configuration();
	enc28j60_set_spi(hspi);
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f000 fbfa 	bl	8001bfc <enc28j60_set_spi>
}
 8001408:	bf00      	nop
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <ES_enc28j60Init>:

/**
 * Initialise the ENC28J60 using default chip select pin
 * Flash the 2 MagJack LEDs
 */
void ES_enc28j60Init( uint8_t* macaddr ) {
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /*initialize enc28j60*/
  enc28j60Init( macaddr );
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f000 fde3 	bl	8001fe4 <enc28j60Init>
  enc28j60clkout(2); // change clkout from 6.25MHz to 12.5MHz
 800141e:	2002      	movs	r0, #2
 8001420:	f000 fdcf 	bl	8001fc2 <enc28j60clkout>
  HAL_Delay(10);
 8001424:	200a      	movs	r0, #10
 8001426:	f7fe fefb 	bl	8000220 <HAL_Delay>

  int f;
  for( f=0; f<3; f++ ) {
 800142a:	2300      	movs	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	e014      	b.n	800145a <ES_enc28j60Init+0x4a>
  	// 0x880 is PHLCON LEDB=on, LEDA=on
  	// enc28j60PhyWrite(PHLCON,0b0011 1000 1000 00 00);
  	enc28j60PhyWrite(PHLCON,0x3880);
 8001430:	f44f 5162 	mov.w	r1, #14464	; 0x3880
 8001434:	2014      	movs	r0, #20
 8001436:	f000 fd99 	bl	8001f6c <enc28j60PhyWrite>
  	HAL_Delay(500);
 800143a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800143e:	f7fe feef 	bl	8000220 <HAL_Delay>

  	// 0x990 is PHLCON LEDB=off, LEDA=off
  	// enc28j60PhyWrite(PHLCON,0b0011 1001 1001 00 00);
  	enc28j60PhyWrite(PHLCON,0x3990);
 8001442:	f643 1190 	movw	r1, #14736	; 0x3990
 8001446:	2014      	movs	r0, #20
 8001448:	f000 fd90 	bl	8001f6c <enc28j60PhyWrite>
  	HAL_Delay(500);
 800144c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001450:	f7fe fee6 	bl	8000220 <HAL_Delay>
  for( f=0; f<3; f++ ) {
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	3301      	adds	r3, #1
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	2b02      	cmp	r3, #2
 800145e:	dde7      	ble.n	8001430 <ES_enc28j60Init+0x20>
  }

  // 0x476 is PHLCON LEDA=links status, LEDB=receive/transmit
  // enc28j60PhyWrite(PHLCON,0b0011 0100 0111 01 10);
  enc28j60PhyWrite(PHLCON,0x3476);
 8001460:	f243 4176 	movw	r1, #13430	; 0x3476
 8001464:	2014      	movs	r0, #20
 8001466:	f000 fd81 	bl	8001f6c <enc28j60PhyWrite>
  HAL_Delay(100);
 800146a:	2064      	movs	r0, #100	; 0x64
 800146c:	f7fe fed8 	bl	8000220 <HAL_Delay>
}
 8001470:	bf00      	nop
 8001472:	3710      	adds	r7, #16
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <ES_enc28j60Revision>:

uint8_t ES_enc28j60Read( uint8_t address ) {
	return enc28j60Read( address );
}

uint8_t ES_enc28j60Revision(void) {
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
	return enc28j60getrev();
 800147c:	f000 fe58 	bl	8002130 <enc28j60getrev>
 8001480:	4603      	mov	r3, r0
}
 8001482:	4618      	mov	r0, r3
 8001484:	bd80      	pop	{r7, pc}

08001486 <ES_enc28j60PacketReceive>:

void ES_enc28j60PhyWrite(uint8_t address, uint16_t data){
	enc28j60PhyWrite(address,  data);
}

uint16_t ES_enc28j60PacketReceive(uint16_t len, uint8_t* packet){
 8001486:	b580      	push	{r7, lr}
 8001488:	b082      	sub	sp, #8
 800148a:	af00      	add	r7, sp, #0
 800148c:	4603      	mov	r3, r0
 800148e:	6039      	str	r1, [r7, #0]
 8001490:	80fb      	strh	r3, [r7, #6]
	return enc28j60PacketReceive(len, packet);
 8001492:	88fb      	ldrh	r3, [r7, #6]
 8001494:	6839      	ldr	r1, [r7, #0]
 8001496:	4618      	mov	r0, r3
 8001498:	f000 fed6 	bl	8002248 <enc28j60PacketReceive>
 800149c:	4603      	mov	r3, r0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <ES_packetloop_icmp_tcp>:

uint16_t ES_get_tcp_data_pointer(void) {
	return get_tcp_data_pointer();
}

uint16_t ES_packetloop_icmp_tcp(uint8_t *buf,uint16_t plen) {
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b082      	sub	sp, #8
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
 80014ae:	460b      	mov	r3, r1
 80014b0:	807b      	strh	r3, [r7, #2]
	return packetloop_icmp_tcp(buf,plen);
 80014b2:	887b      	ldrh	r3, [r7, #2]
 80014b4:	4619      	mov	r1, r3
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f001 fdfe 	bl	80030b8 <packetloop_icmp_tcp>
 80014bc:	4603      	mov	r3, r0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <ES_fill_tcp_data>:

/*uint16_t ES_fill_tcp_data_p(uint8_t *buf,uint16_t pos, const prog_char *progmem_s){
	return fill_tcp_data_p(buf, pos, progmem_s);
}*/

uint16_t ES_fill_tcp_data(uint8_t *buf,uint16_t pos, const char *s){
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b084      	sub	sp, #16
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	60f8      	str	r0, [r7, #12]
 80014ce:	460b      	mov	r3, r1
 80014d0:	607a      	str	r2, [r7, #4]
 80014d2:	817b      	strh	r3, [r7, #10]
	return fill_tcp_data(buf,pos, s);
 80014d4:	897b      	ldrh	r3, [r7, #10]
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	4619      	mov	r1, r3
 80014da:	68f8      	ldr	r0, [r7, #12]
 80014dc:	f001 fa7c 	bl	80029d8 <fill_tcp_data>
 80014e0:	4603      	mov	r3, r0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <ES_www_server_reply>:

uint16_t ES_fill_tcp_data_len(uint8_t *buf,uint16_t pos, const char *s, uint16_t len ){
	return fill_tcp_data_len(buf,pos, s, len);
}

void ES_www_server_reply(uint8_t *buf,uint16_t dlen) {
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b082      	sub	sp, #8
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
 80014f2:	460b      	mov	r3, r1
 80014f4:	807b      	strh	r3, [r7, #2]
	www_server_reply(buf,dlen);
 80014f6:	887b      	ldrh	r3, [r7, #2]
 80014f8:	4619      	mov	r1, r3
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f001 fb24 	bl	8002b48 <www_server_reply>
}
 8001500:	bf00      	nop
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <allocateIPAddress>:

// Utility functions 

// Perform all processing to get an IP address plus other addresses returned, e.g. gw, dns, dhcp server.
// Returns 1 for successful IP address allocation, 0 otherwise
uint8_t allocateIPAddress(uint8_t *buf, uint16_t buffer_size, uint8_t *mymac, uint16_t myport, uint8_t *myip, uint8_t *mynetmask, uint8_t *gwip, uint8_t *dnsip, uint8_t *dhcpsvrip ) {
 8001508:	b580      	push	{r7, lr}
 800150a:	b08c      	sub	sp, #48	; 0x30
 800150c:	af04      	add	r7, sp, #16
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	607a      	str	r2, [r7, #4]
 8001512:	461a      	mov	r2, r3
 8001514:	460b      	mov	r3, r1
 8001516:	817b      	strh	r3, [r7, #10]
 8001518:	4613      	mov	r3, r2
 800151a:	813b      	strh	r3, [r7, #8]
  uint16_t dat_p;
  int plen = 0;
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]
  long lastDhcpRequest = HAL_GetTick();
 8001520:	f7fe fe74 	bl	800020c <HAL_GetTick>
 8001524:	4603      	mov	r3, r0
 8001526:	61fb      	str	r3, [r7, #28]
  uint8_t dhcpState = 0;
 8001528:	2300      	movs	r3, #0
 800152a:	74fb      	strb	r3, [r7, #19]
  bool gotIp = FALSE;
 800152c:	2300      	movs	r3, #0
 800152e:	76fb      	strb	r3, [r7, #27]
  uint8_t dhcpTries = 10;	// After 10 attempts fail gracefully so other action can be carried out
 8001530:	230a      	movs	r3, #10
 8001532:	76bb      	strb	r3, [r7, #26]

  dhcp_start( buf, mymac, myip, mynetmask,gwip, dnsip, dhcpsvrip );
 8001534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001536:	9302      	str	r3, [sp, #8]
 8001538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800153a:	9301      	str	r3, [sp, #4]
 800153c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001542:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001544:	6879      	ldr	r1, [r7, #4]
 8001546:	68f8      	ldr	r0, [r7, #12]
 8001548:	f000 f894 	bl	8001674 <dhcp_start>

  while( !gotIp ) {
 800154c:	e054      	b.n	80015f8 <allocateIPAddress+0xf0>
    // handle ping and wait for a tcp packet
    plen = enc28j60PacketReceive(buffer_size, buf);
 800154e:	897b      	ldrh	r3, [r7, #10]
 8001550:	68f9      	ldr	r1, [r7, #12]
 8001552:	4618      	mov	r0, r3
 8001554:	f000 fe78 	bl	8002248 <enc28j60PacketReceive>
 8001558:	4603      	mov	r3, r0
 800155a:	617b      	str	r3, [r7, #20]
    dat_p=packetloop_icmp_tcp(buf,plen);
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	b29b      	uxth	r3, r3
 8001560:	4619      	mov	r1, r3
 8001562:	68f8      	ldr	r0, [r7, #12]
 8001564:	f001 fda8 	bl	80030b8 <packetloop_icmp_tcp>
 8001568:	4603      	mov	r3, r0
 800156a:	823b      	strh	r3, [r7, #16]
    if(dat_p==0) {
 800156c:	8a3b      	ldrh	r3, [r7, #16]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d142      	bne.n	80015f8 <allocateIPAddress+0xf0>
      check_for_dhcp_answer( buf, plen);
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	b29b      	uxth	r3, r3
 8001576:	4619      	mov	r1, r3
 8001578:	68f8      	ldr	r0, [r7, #12]
 800157a:	f000 fa3f 	bl	80019fc <check_for_dhcp_answer>
      dhcpState = dhcp_state();
 800157e:	f000 f85b 	bl	8001638 <dhcp_state>
 8001582:	4603      	mov	r3, r0
 8001584:	74fb      	strb	r3, [r7, #19]
      // we are idle here
      if( dhcpState != DHCP_STATE_OK ) {
 8001586:	7cfb      	ldrb	r3, [r7, #19]
 8001588:	2b05      	cmp	r3, #5
 800158a:	d021      	beq.n	80015d0 <allocateIPAddress+0xc8>
        if (HAL_GetTick() > (lastDhcpRequest + 10000L) ){
 800158c:	f7fe fe3e 	bl	800020c <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001598:	3310      	adds	r3, #16
 800159a:	429a      	cmp	r2, r3
 800159c:	d92c      	bls.n	80015f8 <allocateIPAddress+0xf0>
          lastDhcpRequest = HAL_GetTick();
 800159e:	f7fe fe35 	bl	800020c <HAL_GetTick>
 80015a2:	4603      	mov	r3, r0
 80015a4:	61fb      	str	r3, [r7, #28]
	  if( --dhcpTries <= 0 ) 
 80015a6:	7ebb      	ldrb	r3, [r7, #26]
 80015a8:	3b01      	subs	r3, #1
 80015aa:	76bb      	strb	r3, [r7, #26]
 80015ac:	7ebb      	ldrb	r3, [r7, #26]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d101      	bne.n	80015b6 <allocateIPAddress+0xae>
		  return 0;		// Failed to allocate address
 80015b2:	2300      	movs	r3, #0
 80015b4:	e027      	b.n	8001606 <allocateIPAddress+0xfe>
          // send dhcp
          dhcp_start( buf, mymac, myip, mynetmask,gwip, dnsip, dhcpsvrip );
 80015b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015b8:	9302      	str	r3, [sp, #8]
 80015ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015bc:	9301      	str	r3, [sp, #4]
 80015be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015c0:	9300      	str	r3, [sp, #0]
 80015c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	68f8      	ldr	r0, [r7, #12]
 80015ca:	f000 f853 	bl	8001674 <dhcp_start>
 80015ce:	e013      	b.n	80015f8 <allocateIPAddress+0xf0>
        }
      } else {
        if( !gotIp ) {
 80015d0:	7efb      	ldrb	r3, [r7, #27]
 80015d2:	f083 0301 	eor.w	r3, r3, #1
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d00d      	beq.n	80015f8 <allocateIPAddress+0xf0>
          gotIp = TRUE;
 80015dc:	2301      	movs	r3, #1
 80015de:	76fb      	strb	r3, [r7, #27]

          //init the ethernet/ip layer:
          init_ip_arp_udp_tcp(mymac, myip, myport);
 80015e0:	893b      	ldrh	r3, [r7, #8]
 80015e2:	461a      	mov	r2, r3
 80015e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f000 fee4 	bl	80023b4 <init_ip_arp_udp_tcp>

          // Set the Router IP
          client_set_gwip(gwip);  // e.g internal IP of dsl router
 80015ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80015ee:	f001 fc63 	bl	8002eb8 <client_set_gwip>

#ifdef DNS_client
          // Set the DNS server IP address if required, or use default
          dnslkup_set_dnsip( dnsip );
 80015f2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80015f4:	f000 fae6 	bl	8001bc4 <dnslkup_set_dnsip>
  while( !gotIp ) {
 80015f8:	7efb      	ldrb	r3, [r7, #27]
 80015fa:	f083 0301 	eor.w	r3, r3, #1
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	2b00      	cmp	r3, #0
 8001602:	d1a4      	bne.n	800154e <allocateIPAddress+0x46>
        }
      }
    }
  }

  return 1;
 8001604:	2301      	movs	r3, #1

}
 8001606:	4618      	mov	r0, r3
 8001608:	3720      	adds	r7, #32
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <addToBuf>:
uint16_t currentSecs = 0;
static uint32_t leaseStart = 0;
static uint32_t leaseTime = 0;
static uint8_t* bufPtr;

static void addToBuf(uint8_t b) {
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	71fb      	strb	r3, [r7, #7]
    *bufPtr++ = b;
 800161a:	4b06      	ldr	r3, [pc, #24]	; (8001634 <addToBuf+0x24>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	1c5a      	adds	r2, r3, #1
 8001620:	4904      	ldr	r1, [pc, #16]	; (8001634 <addToBuf+0x24>)
 8001622:	600a      	str	r2, [r1, #0]
 8001624:	79fa      	ldrb	r2, [r7, #7]
 8001626:	701a      	strb	r2, [r3, #0]
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	200000cc 	.word	0x200000cc

08001638 <dhcp_state>:

uint8_t dhcp_state(void)
{
 8001638:	b598      	push	{r3, r4, r7, lr}
 800163a:	af00      	add	r7, sp, #0
        // Check lease and request renew if currently OK and time
        // leaseStart - start time in millis
        // leaseTime - length of lease in millis
        //
        if( dhcpState == DHCP_STATE_OK && (leaseStart + leaseTime) <= HAL_GetTick() ) {
 800163c:	4b0a      	ldr	r3, [pc, #40]	; (8001668 <dhcp_state+0x30>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b05      	cmp	r3, #5
 8001642:	d10c      	bne.n	800165e <dhcp_state+0x26>
 8001644:	4b09      	ldr	r3, [pc, #36]	; (800166c <dhcp_state+0x34>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	4b09      	ldr	r3, [pc, #36]	; (8001670 <dhcp_state+0x38>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	18d4      	adds	r4, r2, r3
 800164e:	f7fe fddd 	bl	800020c <HAL_GetTick>
 8001652:	4603      	mov	r3, r0
 8001654:	429c      	cmp	r4, r3
 8001656:	d802      	bhi.n	800165e <dhcp_state+0x26>
                // Calling app needs to detect this and init renewal
                dhcpState = DHCP_STATE_RENEW;
 8001658:	4b03      	ldr	r3, [pc, #12]	; (8001668 <dhcp_state+0x30>)
 800165a:	2206      	movs	r2, #6
 800165c:	701a      	strb	r2, [r3, #0]
        }
        return(dhcpState);
 800165e:	4b02      	ldr	r3, [pc, #8]	; (8001668 <dhcp_state+0x30>)
 8001660:	781b      	ldrb	r3, [r3, #0]
}
 8001662:	4618      	mov	r0, r3
 8001664:	bd98      	pop	{r3, r4, r7, pc}
 8001666:	bf00      	nop
 8001668:	200000b1 	.word	0x200000b1
 800166c:	200000c4 	.word	0x200000c4
 8001670:	200000c8 	.word	0x200000c8

08001674 <dhcp_start>:
// Wait for DHCPACK
// All configured
void dhcp_start(uint8_t *buf, uint8_t *macaddrin, uint8_t *ipaddrin,
                uint8_t *maskin, uint8_t *gwipin, uint8_t *dhcpsvrin,
                uint8_t *dnssvrin )
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
 8001680:	603b      	str	r3, [r7, #0]
        macaddr = macaddrin;
 8001682:	4a34      	ldr	r2, [pc, #208]	; (8001754 <dhcp_start+0xe0>)
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	6013      	str	r3, [r2, #0]
        dhcpip = ipaddrin;
 8001688:	4a33      	ldr	r2, [pc, #204]	; (8001758 <dhcp_start+0xe4>)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6013      	str	r3, [r2, #0]
        dhcpmask = maskin;
 800168e:	4a33      	ldr	r2, [pc, #204]	; (800175c <dhcp_start+0xe8>)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	6013      	str	r3, [r2, #0]
        gwaddr = gwipin;
 8001694:	4a32      	ldr	r2, [pc, #200]	; (8001760 <dhcp_start+0xec>)
 8001696:	6a3b      	ldr	r3, [r7, #32]
 8001698:	6013      	str	r3, [r2, #0]
        dhcpserver = dhcpsvrin;
 800169a:	4a32      	ldr	r2, [pc, #200]	; (8001764 <dhcp_start+0xf0>)
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	6013      	str	r3, [r2, #0]
        dnsserver = dnssvrin;
 80016a0:	4a31      	ldr	r2, [pc, #196]	; (8001768 <dhcp_start+0xf4>)
 80016a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016a4:	6013      	str	r3, [r2, #0]
        /*srand(analogRead(0));*/ srand(0x13);
 80016a6:	2013      	movs	r0, #19
 80016a8:	f002 fb42 	bl	8003d30 <srand>
        currentXid = 0x00654321 + rand();
 80016ac:	f002 fb64 	bl	8003d78 <rand>
 80016b0:	4602      	mov	r2, r0
 80016b2:	4b2e      	ldr	r3, [pc, #184]	; (800176c <dhcp_start+0xf8>)
 80016b4:	4413      	add	r3, r2
 80016b6:	461a      	mov	r2, r3
 80016b8:	4b2d      	ldr	r3, [pc, #180]	; (8001770 <dhcp_start+0xfc>)
 80016ba:	601a      	str	r2, [r3, #0]
        currentSecs = 0;
 80016bc:	4b2d      	ldr	r3, [pc, #180]	; (8001774 <dhcp_start+0x100>)
 80016be:	2200      	movs	r2, #0
 80016c0:	801a      	strh	r2, [r3, #0]
        int n;
        for( n=0; n<4; n++ ) {
 80016c2:	2300      	movs	r3, #0
 80016c4:	617b      	str	r3, [r7, #20]
 80016c6:	e020      	b.n	800170a <dhcp_start+0x96>
          dhcpip[n] = 0;
 80016c8:	4b23      	ldr	r3, [pc, #140]	; (8001758 <dhcp_start+0xe4>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	4413      	add	r3, r2
 80016d0:	2200      	movs	r2, #0
 80016d2:	701a      	strb	r2, [r3, #0]
          dhcpmask[n] = 0;
 80016d4:	4b21      	ldr	r3, [pc, #132]	; (800175c <dhcp_start+0xe8>)
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	4413      	add	r3, r2
 80016dc:	2200      	movs	r2, #0
 80016de:	701a      	strb	r2, [r3, #0]
          gwaddr[n] = 0;
 80016e0:	4b1f      	ldr	r3, [pc, #124]	; (8001760 <dhcp_start+0xec>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	4413      	add	r3, r2
 80016e8:	2200      	movs	r2, #0
 80016ea:	701a      	strb	r2, [r3, #0]
          dhcpserver[n] = 0;
 80016ec:	4b1d      	ldr	r3, [pc, #116]	; (8001764 <dhcp_start+0xf0>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	4413      	add	r3, r2
 80016f4:	2200      	movs	r2, #0
 80016f6:	701a      	strb	r2, [r3, #0]
          dnsserver[n] = 0;
 80016f8:	4b1b      	ldr	r3, [pc, #108]	; (8001768 <dhcp_start+0xf4>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	4413      	add	r3, r2
 8001700:	2200      	movs	r2, #0
 8001702:	701a      	strb	r2, [r3, #0]
        for( n=0; n<4; n++ ) {
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	3301      	adds	r3, #1
 8001708:	617b      	str	r3, [r7, #20]
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	2b03      	cmp	r3, #3
 800170e:	dddb      	ble.n	80016c8 <dhcp_start+0x54>
        }
        // Set a unique hostname, use Arduino- plus last octet of mac address
        hostname[8] = 'A' + (macaddr[5] >> 4);
 8001710:	4b10      	ldr	r3, [pc, #64]	; (8001754 <dhcp_start+0xe0>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	3305      	adds	r3, #5
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	091b      	lsrs	r3, r3, #4
 800171a:	b2db      	uxtb	r3, r3
 800171c:	3341      	adds	r3, #65	; 0x41
 800171e:	b2da      	uxtb	r2, r3
 8001720:	4b15      	ldr	r3, [pc, #84]	; (8001778 <dhcp_start+0x104>)
 8001722:	721a      	strb	r2, [r3, #8]
        hostname[9] = 'A' + (macaddr[5] & 0x0F);
 8001724:	4b0b      	ldr	r3, [pc, #44]	; (8001754 <dhcp_start+0xe0>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	3305      	adds	r3, #5
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	f003 030f 	and.w	r3, r3, #15
 8001730:	b2db      	uxtb	r3, r3
 8001732:	3341      	adds	r3, #65	; 0x41
 8001734:	b2da      	uxtb	r2, r3
 8001736:	4b10      	ldr	r3, [pc, #64]	; (8001778 <dhcp_start+0x104>)
 8001738:	725a      	strb	r2, [r3, #9]

        // Reception of broadcast packets turned off by default, but
        // it has been shown that some routers send responses as
        // broadcasts. Enable here and disable later
        enc28j60EnableBroadcast();
 800173a:	f000 fd0d 	bl	8002158 <enc28j60EnableBroadcast>
        dhcp_send( buf, DHCPDISCOVER );
 800173e:	2101      	movs	r1, #1
 8001740:	68f8      	ldr	r0, [r7, #12]
 8001742:	f000 f82f 	bl	80017a4 <dhcp_send>
        dhcpState = DHCP_STATE_DISCOVER;
 8001746:	4b0d      	ldr	r3, [pc, #52]	; (800177c <dhcp_start+0x108>)
 8001748:	2201      	movs	r2, #1
 800174a:	701a      	strb	r2, [r3, #0]
}
 800174c:	bf00      	nop
 800174e:	3718      	adds	r7, #24
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	200000b4 	.word	0x200000b4
 8001758:	20000358 	.word	0x20000358
 800175c:	20000364 	.word	0x20000364
 8001760:	20000360 	.word	0x20000360
 8001764:	2000035c 	.word	0x2000035c
 8001768:	20000354 	.word	0x20000354
 800176c:	00654321 	.word	0x00654321
 8001770:	200000bc 	.word	0x200000bc
 8001774:	200000c0 	.word	0x200000c0
 8001778:	20000008 	.word	0x20000008
 800177c:	200000b1 	.word	0x200000b1

08001780 <dhcp_request_ip>:

void dhcp_request_ip(uint8_t *buf )
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
        dhcp_send( buf, DHCPREQUEST );
 8001788:	2103      	movs	r1, #3
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f000 f80a 	bl	80017a4 <dhcp_send>
        dhcpState = DHCP_STATE_REQUEST;
 8001790:	4b03      	ldr	r3, [pc, #12]	; (80017a0 <dhcp_request_ip+0x20>)
 8001792:	2203      	movs	r2, #3
 8001794:	701a      	strb	r2, [r3, #0]
}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	200000b1 	.word	0x200000b1

080017a4 <dhcp_send>:


// Main DHCP message sending function, either DHCPDISCOVER or DHCPREQUEST
void dhcp_send(uint8_t *buf, uint8_t requestType ) {
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	460b      	mov	r3, r1
 80017ae:	70fb      	strb	r3, [r7, #3]
        int i=0;
 80017b0:	2300      	movs	r3, #0
 80017b2:	60fb      	str	r3, [r7, #12]
        haveDhcpAnswer=0;
 80017b4:	4b87      	ldr	r3, [pc, #540]	; (80019d4 <dhcp_send+0x230>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	701a      	strb	r2, [r3, #0]
        dhcp_ansError=0;
 80017ba:	4b87      	ldr	r3, [pc, #540]	; (80019d8 <dhcp_send+0x234>)
 80017bc:	2200      	movs	r2, #0
 80017be:	701a      	strb	r2, [r3, #0]
        dhcptid_l++; // increment for next request, finally wrap
 80017c0:	4b86      	ldr	r3, [pc, #536]	; (80019dc <dhcp_send+0x238>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	3301      	adds	r3, #1
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	4b84      	ldr	r3, [pc, #528]	; (80019dc <dhcp_send+0x238>)
 80017ca:	701a      	strb	r2, [r3, #0]
        // destination IP gets replaced after this call
       
        memset(buf, 0, 400); //XXX OUCH!   
 80017cc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80017d0:	2100      	movs	r1, #0
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f002 faa4 	bl	8003d20 <memset>
        send_udp_prepare(buf,(DHCPCLIENT_SRC_PORT_H<<8)|(dhcptid_l&0xff),dhcpip,DHCP_DEST_PORT);
 80017d8:	4b80      	ldr	r3, [pc, #512]	; (80019dc <dhcp_send+0x238>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	b21b      	sxth	r3, r3
 80017de:	ea6f 43c3 	mvn.w	r3, r3, lsl #19
 80017e2:	ea6f 43d3 	mvn.w	r3, r3, lsr #19
 80017e6:	b21b      	sxth	r3, r3
 80017e8:	b299      	uxth	r1, r3
 80017ea:	4b7d      	ldr	r3, [pc, #500]	; (80019e0 <dhcp_send+0x23c>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	2344      	movs	r3, #68	; 0x44
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f001 f9e5 	bl	8002bc0 <send_udp_prepare>

        memcpy(buf + ETH_SRC_MAC, macaddr, 6);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	1d98      	adds	r0, r3, #6
 80017fa:	4b7a      	ldr	r3, [pc, #488]	; (80019e4 <dhcp_send+0x240>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2206      	movs	r2, #6
 8001800:	4619      	mov	r1, r3
 8001802:	f002 fa82 	bl	8003d0a <memcpy>
        memset(buf + ETH_DST_MAC, 0xFF, 6);
 8001806:	2206      	movs	r2, #6
 8001808:	21ff      	movs	r1, #255	; 0xff
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f002 fa88 	bl	8003d20 <memset>
        buf[IP_TOTLEN_L_P]=0x82;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3311      	adds	r3, #17
 8001814:	2282      	movs	r2, #130	; 0x82
 8001816:	701a      	strb	r2, [r3, #0]
        buf[IP_PROTO_P]=IP_PROTO_UDP_V;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3317      	adds	r3, #23
 800181c:	2211      	movs	r2, #17
 800181e:	701a      	strb	r2, [r3, #0]
        memset(buf + IP_DST_P, 0xFF, 4);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	331e      	adds	r3, #30
 8001824:	2204      	movs	r2, #4
 8001826:	21ff      	movs	r1, #255	; 0xff
 8001828:	4618      	mov	r0, r3
 800182a:	f002 fa79 	bl	8003d20 <memset>
        buf[UDP_DST_PORT_L_P]=DHCP_SRC_PORT; 
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	3325      	adds	r3, #37	; 0x25
 8001832:	2243      	movs	r2, #67	; 0x43
 8001834:	701a      	strb	r2, [r3, #0]
        buf[UDP_SRC_PORT_H_P]=0;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	3322      	adds	r3, #34	; 0x22
 800183a:	2200      	movs	r2, #0
 800183c:	701a      	strb	r2, [r3, #0]
        buf[UDP_SRC_PORT_L_P]=DHCP_DEST_PORT;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	3323      	adds	r3, #35	; 0x23
 8001842:	2244      	movs	r2, #68	; 0x44
 8001844:	701a      	strb	r2, [r3, #0]

        // Build DHCP Packet from buf[UDP_DATA_P]
        // Make dhcpPtr start of UDP data buffer
        dhcpData *dhcpPtr = (dhcpData *)&buf[UDP_DATA_P];
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	332a      	adds	r3, #42	; 0x2a
 800184a:	60bb      	str	r3, [r7, #8]
        // 0-3 op, htype, hlen, hops
        dhcpPtr->op = DHCP_BOOTREQUEST;
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	2201      	movs	r2, #1
 8001850:	701a      	strb	r2, [r3, #0]
        dhcpPtr->htype = 1;
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	2201      	movs	r2, #1
 8001856:	705a      	strb	r2, [r3, #1]
        dhcpPtr->hlen = 6;
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	2206      	movs	r2, #6
 800185c:	709a      	strb	r2, [r3, #2]
        dhcpPtr->hops = 0;
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	2200      	movs	r2, #0
 8001862:	70da      	strb	r2, [r3, #3]
        // 4-7 xid
        memcpy(&dhcpPtr->xid, &currentXid, sizeof(currentXid));
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	3304      	adds	r3, #4
 8001868:	4a5f      	ldr	r2, [pc, #380]	; (80019e8 <dhcp_send+0x244>)
 800186a:	6812      	ldr	r2, [r2, #0]
 800186c:	601a      	str	r2, [r3, #0]
        // 8-9 secs
        memcpy(&dhcpPtr->secs, &currentSecs, sizeof(currentSecs));
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	3308      	adds	r3, #8
 8001872:	4a5e      	ldr	r2, [pc, #376]	; (80019ec <dhcp_send+0x248>)
 8001874:	8812      	ldrh	r2, [r2, #0]
 8001876:	801a      	strh	r2, [r3, #0]
        // 16-19 yiaddr
        memset(dhcpPtr->yiaddr, 0, 4);
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	3310      	adds	r3, #16
 800187c:	2204      	movs	r2, #4
 800187e:	2100      	movs	r1, #0
 8001880:	4618      	mov	r0, r3
 8001882:	f002 fa4d 	bl	8003d20 <memset>
        // 28-43 chaddr(16)
        memcpy(dhcpPtr->chaddr, macaddr, 6);
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	f103 001c 	add.w	r0, r3, #28
 800188c:	4b55      	ldr	r3, [pc, #340]	; (80019e4 <dhcp_send+0x240>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2206      	movs	r2, #6
 8001892:	4619      	mov	r1, r3
 8001894:	f002 fa39 	bl	8003d0a <memcpy>

        // options defined as option, length, value
        bufPtr = buf + UDP_DATA_P + sizeof( dhcpData );
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f503 738b 	add.w	r3, r3, #278	; 0x116
 800189e:	4a54      	ldr	r2, [pc, #336]	; (80019f0 <dhcp_send+0x24c>)
 80018a0:	6013      	str	r3, [r2, #0]
        // Magic cookie 99, 130, 83 and 99
        addToBuf(99);
 80018a2:	2063      	movs	r0, #99	; 0x63
 80018a4:	f7ff feb4 	bl	8001610 <addToBuf>
        addToBuf(130);
 80018a8:	2082      	movs	r0, #130	; 0x82
 80018aa:	f7ff feb1 	bl	8001610 <addToBuf>
        addToBuf(83);
 80018ae:	2053      	movs	r0, #83	; 0x53
 80018b0:	f7ff feae 	bl	8001610 <addToBuf>
        addToBuf(99);
 80018b4:	2063      	movs	r0, #99	; 0x63
 80018b6:	f7ff feab 	bl	8001610 <addToBuf>
        
        // Set correct options
        // Option 1 - DHCP message type
        addToBuf(53);   // DHCPDISCOVER, DHCPREQUEST
 80018ba:	2035      	movs	r0, #53	; 0x35
 80018bc:	f7ff fea8 	bl	8001610 <addToBuf>
        addToBuf(1);      // Length 
 80018c0:	2001      	movs	r0, #1
 80018c2:	f7ff fea5 	bl	8001610 <addToBuf>
        addToBuf(requestType);      // Value
 80018c6:	78fb      	ldrb	r3, [r7, #3]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff fea1 	bl	8001610 <addToBuf>

        // Client Identifier Option, this is the client mac address
        addToBuf(61);     // Client identifier
 80018ce:	203d      	movs	r0, #61	; 0x3d
 80018d0:	f7ff fe9e 	bl	8001610 <addToBuf>
        addToBuf(7);      // Length 
 80018d4:	2007      	movs	r0, #7
 80018d6:	f7ff fe9b 	bl	8001610 <addToBuf>
        addToBuf(0x01);      // Value
 80018da:	2001      	movs	r0, #1
 80018dc:	f7ff fe98 	bl	8001610 <addToBuf>
        for( i=0; i<6; i++)
 80018e0:	2300      	movs	r3, #0
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	e00a      	b.n	80018fc <dhcp_send+0x158>
                addToBuf(macaddr[i]);
 80018e6:	4b3f      	ldr	r3, [pc, #252]	; (80019e4 <dhcp_send+0x240>)
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	4413      	add	r3, r2
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff fe8d 	bl	8001610 <addToBuf>
        for( i=0; i<6; i++)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	3301      	adds	r3, #1
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2b05      	cmp	r3, #5
 8001900:	ddf1      	ble.n	80018e6 <dhcp_send+0x142>

        // Host name Option
        addToBuf(12);     // Host name
 8001902:	200c      	movs	r0, #12
 8001904:	f7ff fe84 	bl	8001610 <addToBuf>
        addToBuf(10);      // Length 
 8001908:	200a      	movs	r0, #10
 800190a:	f7ff fe81 	bl	8001610 <addToBuf>
        for( i=0; i<10; i++)
 800190e:	2300      	movs	r3, #0
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	e009      	b.n	8001928 <dhcp_send+0x184>
                addToBuf(hostname[i]);
 8001914:	4a37      	ldr	r2, [pc, #220]	; (80019f4 <dhcp_send+0x250>)
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	4413      	add	r3, r2
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff fe77 	bl	8001610 <addToBuf>
        for( i=0; i<10; i++)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	3301      	adds	r3, #1
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2b09      	cmp	r3, #9
 800192c:	ddf2      	ble.n	8001914 <dhcp_send+0x170>

        if( requestType == DHCPREQUEST ) {
 800192e:	78fb      	ldrb	r3, [r7, #3]
 8001930:	2b03      	cmp	r3, #3
 8001932:	d12d      	bne.n	8001990 <dhcp_send+0x1ec>
                // Request IP address
                addToBuf(50);     // Requested IP address
 8001934:	2032      	movs	r0, #50	; 0x32
 8001936:	f7ff fe6b 	bl	8001610 <addToBuf>
                addToBuf(4);      // Length 
 800193a:	2004      	movs	r0, #4
 800193c:	f7ff fe68 	bl	8001610 <addToBuf>
                for( i=0; i<4; i++)
 8001940:	2300      	movs	r3, #0
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	e00a      	b.n	800195c <dhcp_send+0x1b8>
                        addToBuf(dhcpip[i]);
 8001946:	4b26      	ldr	r3, [pc, #152]	; (80019e0 <dhcp_send+0x23c>)
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	4413      	add	r3, r2
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff fe5d 	bl	8001610 <addToBuf>
                for( i=0; i<4; i++)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	3301      	adds	r3, #1
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2b03      	cmp	r3, #3
 8001960:	ddf1      	ble.n	8001946 <dhcp_send+0x1a2>

                // Request using server ip address
                addToBuf(54);     // Server IP address
 8001962:	2036      	movs	r0, #54	; 0x36
 8001964:	f7ff fe54 	bl	8001610 <addToBuf>
                addToBuf(4);      // Length 
 8001968:	2004      	movs	r0, #4
 800196a:	f7ff fe51 	bl	8001610 <addToBuf>
                for( i=0; i<4; i++)
 800196e:	2300      	movs	r3, #0
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	e00a      	b.n	800198a <dhcp_send+0x1e6>
                        addToBuf(dhcpserver[i]);
 8001974:	4b20      	ldr	r3, [pc, #128]	; (80019f8 <dhcp_send+0x254>)
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	4413      	add	r3, r2
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff fe46 	bl	8001610 <addToBuf>
                for( i=0; i<4; i++)
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	3301      	adds	r3, #1
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2b03      	cmp	r3, #3
 800198e:	ddf1      	ble.n	8001974 <dhcp_send+0x1d0>
        }

        // Additional information in parameter list - minimal list for what we need
        addToBuf(55);     // Parameter request list
 8001990:	2037      	movs	r0, #55	; 0x37
 8001992:	f7ff fe3d 	bl	8001610 <addToBuf>
        addToBuf(3);      // Length 
 8001996:	2003      	movs	r0, #3
 8001998:	f7ff fe3a 	bl	8001610 <addToBuf>
        addToBuf(1);      // Subnet mask
 800199c:	2001      	movs	r0, #1
 800199e:	f7ff fe37 	bl	8001610 <addToBuf>
        addToBuf(3);      // Route/Gateway
 80019a2:	2003      	movs	r0, #3
 80019a4:	f7ff fe34 	bl	8001610 <addToBuf>
        addToBuf(6);      // DNS Server
 80019a8:	2006      	movs	r0, #6
 80019aa:	f7ff fe31 	bl	8001610 <addToBuf>

        // payload len should be around 300
        addToBuf(255);      // end option
 80019ae:	20ff      	movs	r0, #255	; 0xff
 80019b0:	f7ff fe2e 	bl	8001610 <addToBuf>
        send_udp_transmit(buf, bufPtr - buf - UDP_DATA_P);
 80019b4:	4b0e      	ldr	r3, [pc, #56]	; (80019f0 <dhcp_send+0x24c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	461a      	mov	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	b29b      	uxth	r3, r3
 80019c0:	3b2a      	subs	r3, #42	; 0x2a
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	4619      	mov	r1, r3
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f001 f980 	bl	8002ccc <send_udp_transmit>
}
 80019cc:	bf00      	nop
 80019ce:	3710      	adds	r7, #16
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	200000b8 	.word	0x200000b8
 80019d8:	200000b9 	.word	0x200000b9
 80019dc:	200000b0 	.word	0x200000b0
 80019e0:	20000358 	.word	0x20000358
 80019e4:	200000b4 	.word	0x200000b4
 80019e8:	200000bc 	.word	0x200000bc
 80019ec:	200000c0 	.word	0x200000c0
 80019f0:	200000cc 	.word	0x200000cc
 80019f4:	20000008 	.word	0x20000008
 80019f8:	2000035c 	.word	0x2000035c

080019fc <check_for_dhcp_answer>:
// process the answer from the dhcp server:
// return 1 on sucessful processing of answer.
// We set also the variable haveDhcpAnswer
// Either DHCPOFFER, DHCPACK or DHCPNACK
// Return 0 for nothing processed, 1 for done soemthing
uint8_t check_for_dhcp_answer(uint8_t *buf, uint16_t plen){
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	460b      	mov	r3, r1
 8001a06:	807b      	strh	r3, [r7, #2]
    // Map struct onto payload
    dhcpData *dhcpPtr = (dhcpData *)&buf[UDP_DATA_P];
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	332a      	adds	r3, #42	; 0x2a
 8001a0c:	60fb      	str	r3, [r7, #12]
    if (plen >= 70 && buf[UDP_SRC_PORT_L_P] == DHCP_SRC_PORT &&
 8001a0e:	887b      	ldrh	r3, [r7, #2]
 8001a10:	2b45      	cmp	r3, #69	; 0x45
 8001a12:	d933      	bls.n	8001a7c <check_for_dhcp_answer+0x80>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	3323      	adds	r3, #35	; 0x23
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	2b43      	cmp	r3, #67	; 0x43
 8001a1c:	d12e      	bne.n	8001a7c <check_for_dhcp_answer+0x80>
            dhcpPtr->op == DHCP_BOOTREPLY && !memcmp(&dhcpPtr->xid, &currentXid, 4) ) {
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	781b      	ldrb	r3, [r3, #0]
    if (plen >= 70 && buf[UDP_SRC_PORT_L_P] == DHCP_SRC_PORT &&
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d12a      	bne.n	8001a7c <check_for_dhcp_answer+0x80>
            dhcpPtr->op == DHCP_BOOTREPLY && !memcmp(&dhcpPtr->xid, &currentXid, 4) ) {
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	3304      	adds	r3, #4
 8001a2a:	2204      	movs	r2, #4
 8001a2c:	4916      	ldr	r1, [pc, #88]	; (8001a88 <check_for_dhcp_answer+0x8c>)
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f002 f95c 	bl	8003cec <memcmp>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d120      	bne.n	8001a7c <check_for_dhcp_answer+0x80>
        // Check for lease expiry
        // uint32_t currentSecs = millis();
        int optionIndex = UDP_DATA_P + sizeof( dhcpData ) + 4;
 8001a3a:	f44f 738d 	mov.w	r3, #282	; 0x11a
 8001a3e:	60bb      	str	r3, [r7, #8]
        if( buf[optionIndex] == 53 )
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	4413      	add	r3, r2
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b35      	cmp	r3, #53	; 0x35
 8001a4a:	d117      	bne.n	8001a7c <check_for_dhcp_answer+0x80>
            switch( buf[optionIndex+2] ) {
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	3302      	adds	r3, #2
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	4413      	add	r3, r2
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d002      	beq.n	8001a60 <check_for_dhcp_answer+0x64>
 8001a5a:	2b05      	cmp	r3, #5
 8001a5c:	d007      	beq.n	8001a6e <check_for_dhcp_answer+0x72>
 8001a5e:	e00d      	b.n	8001a7c <check_for_dhcp_answer+0x80>
                case DHCPOFFER: return have_dhcpoffer( buf, plen );
 8001a60:	887b      	ldrh	r3, [r7, #2]
 8001a62:	4619      	mov	r1, r3
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f000 f811 	bl	8001a8c <have_dhcpoffer>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	e007      	b.n	8001a7e <check_for_dhcp_answer+0x82>
                case DHCPACK:   return have_dhcpack( buf, plen );
 8001a6e:	887b      	ldrh	r3, [r7, #2]
 8001a70:	4619      	mov	r1, r3
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 f88c 	bl	8001b90 <have_dhcpack>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	e000      	b.n	8001a7e <check_for_dhcp_answer+0x82>
            }
    }
    return 0;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	200000bc 	.word	0x200000bc

08001a8c <have_dhcpoffer>:


uint8_t have_dhcpoffer (uint8_t *buf,uint16_t plen) {
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	460b      	mov	r3, r1
 8001a96:	807b      	strh	r3, [r7, #2]
    // Map struct onto payload
    dhcpData *dhcpPtr = (dhcpData *)((uint8_t *)buf + UDP_DATA_P);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	332a      	adds	r3, #42	; 0x2a
 8001a9c:	60fb      	str	r3, [r7, #12]
    // Offered IP address is in yiaddr
    memcpy(dhcpip, dhcpPtr->yiaddr, 4);
 8001a9e:	4b36      	ldr	r3, [pc, #216]	; (8001b78 <have_dhcpoffer+0xec>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	68fa      	ldr	r2, [r7, #12]
 8001aa4:	3210      	adds	r2, #16
 8001aa6:	6812      	ldr	r2, [r2, #0]
 8001aa8:	601a      	str	r2, [r3, #0]
    // Scan through variable length option list identifying options we want
    uint8_t *ptr = (uint8_t*) (dhcpPtr + 1) + 4;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	33ec      	adds	r3, #236	; 0xec
 8001aae:	3304      	adds	r3, #4
 8001ab0:	617b      	str	r3, [r7, #20]
    do {
        uint8_t option = *ptr++;
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	1c5a      	adds	r2, r3, #1
 8001ab6:	617a      	str	r2, [r7, #20]
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	72fb      	strb	r3, [r7, #11]
        uint8_t optionLen = *ptr++;
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	1c5a      	adds	r2, r3, #1
 8001ac0:	617a      	str	r2, [r7, #20]
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	72bb      	strb	r3, [r7, #10]
        uint8_t i;
        switch (option) {
 8001ac6:	7afb      	ldrb	r3, [r7, #11]
 8001ac8:	2b06      	cmp	r3, #6
 8001aca:	d017      	beq.n	8001afc <have_dhcpoffer+0x70>
 8001acc:	2b06      	cmp	r3, #6
 8001ace:	dc04      	bgt.n	8001ada <have_dhcpoffer+0x4e>
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d007      	beq.n	8001ae4 <have_dhcpoffer+0x58>
 8001ad4:	2b03      	cmp	r3, #3
 8001ad6:	d00b      	beq.n	8001af0 <have_dhcpoffer+0x64>
 8001ad8:	e03c      	b.n	8001b54 <have_dhcpoffer+0xc8>
 8001ada:	2b33      	cmp	r3, #51	; 0x33
 8001adc:	d014      	beq.n	8001b08 <have_dhcpoffer+0x7c>
 8001ade:	2b36      	cmp	r3, #54	; 0x36
 8001ae0:	d032      	beq.n	8001b48 <have_dhcpoffer+0xbc>
 8001ae2:	e037      	b.n	8001b54 <have_dhcpoffer+0xc8>
            case 1:  memcpy(dhcpmask, ptr, 4);
 8001ae4:	4b25      	ldr	r3, [pc, #148]	; (8001b7c <have_dhcpoffer+0xf0>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	697a      	ldr	r2, [r7, #20]
 8001aea:	6812      	ldr	r2, [r2, #0]
 8001aec:	601a      	str	r2, [r3, #0]
                     break;
 8001aee:	e031      	b.n	8001b54 <have_dhcpoffer+0xc8>
            case 3:  memcpy(gwaddr, ptr, 4);
 8001af0:	4b23      	ldr	r3, [pc, #140]	; (8001b80 <have_dhcpoffer+0xf4>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	697a      	ldr	r2, [r7, #20]
 8001af6:	6812      	ldr	r2, [r2, #0]
 8001af8:	601a      	str	r2, [r3, #0]
                     break;
 8001afa:	e02b      	b.n	8001b54 <have_dhcpoffer+0xc8>
            case 6:  memcpy(dnsserver, ptr, 4);
 8001afc:	4b21      	ldr	r3, [pc, #132]	; (8001b84 <have_dhcpoffer+0xf8>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	697a      	ldr	r2, [r7, #20]
 8001b02:	6812      	ldr	r2, [r2, #0]
 8001b04:	601a      	str	r2, [r3, #0]
                     break;
 8001b06:	e025      	b.n	8001b54 <have_dhcpoffer+0xc8>
            case 51: leaseTime = 0;
 8001b08:	4b1f      	ldr	r3, [pc, #124]	; (8001b88 <have_dhcpoffer+0xfc>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]
                     for (i = 0; i<4; i++)
 8001b0e:	2300      	movs	r3, #0
 8001b10:	74fb      	strb	r3, [r7, #19]
 8001b12:	e00d      	b.n	8001b30 <have_dhcpoffer+0xa4>
                         leaseTime = (leaseTime + ptr[i]) << 8;
 8001b14:	7cfb      	ldrb	r3, [r7, #19]
 8001b16:	697a      	ldr	r2, [r7, #20]
 8001b18:	4413      	add	r3, r2
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	4b1a      	ldr	r3, [pc, #104]	; (8001b88 <have_dhcpoffer+0xfc>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4413      	add	r3, r2
 8001b24:	021b      	lsls	r3, r3, #8
 8001b26:	4a18      	ldr	r2, [pc, #96]	; (8001b88 <have_dhcpoffer+0xfc>)
 8001b28:	6013      	str	r3, [r2, #0]
                     for (i = 0; i<4; i++)
 8001b2a:	7cfb      	ldrb	r3, [r7, #19]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	74fb      	strb	r3, [r7, #19]
 8001b30:	7cfb      	ldrb	r3, [r7, #19]
 8001b32:	2b03      	cmp	r3, #3
 8001b34:	d9ee      	bls.n	8001b14 <have_dhcpoffer+0x88>
                     leaseTime *= 1000;      // milliseconds
 8001b36:	4b14      	ldr	r3, [pc, #80]	; (8001b88 <have_dhcpoffer+0xfc>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b3e:	fb02 f303 	mul.w	r3, r2, r3
 8001b42:	4a11      	ldr	r2, [pc, #68]	; (8001b88 <have_dhcpoffer+0xfc>)
 8001b44:	6013      	str	r3, [r2, #0]
                     break;
 8001b46:	e005      	b.n	8001b54 <have_dhcpoffer+0xc8>
            case 54: memcpy(dhcpserver, ptr, 4);
 8001b48:	4b10      	ldr	r3, [pc, #64]	; (8001b8c <have_dhcpoffer+0x100>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	697a      	ldr	r2, [r7, #20]
 8001b4e:	6812      	ldr	r2, [r2, #0]
 8001b50:	601a      	str	r2, [r3, #0]
                     break;
 8001b52:	bf00      	nop
        }
        ptr += optionLen;
 8001b54:	7abb      	ldrb	r3, [r7, #10]
 8001b56:	697a      	ldr	r2, [r7, #20]
 8001b58:	4413      	add	r3, r2
 8001b5a:	617b      	str	r3, [r7, #20]
    } while (ptr < buf + plen);
 8001b5c:	887b      	ldrh	r3, [r7, #2]
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	4413      	add	r3, r2
 8001b62:	697a      	ldr	r2, [r7, #20]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d3a4      	bcc.n	8001ab2 <have_dhcpoffer+0x26>
    dhcp_request_ip( buf );
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f7ff fe09 	bl	8001780 <dhcp_request_ip>
    return 1;
 8001b6e:	2301      	movs	r3, #1
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3718      	adds	r7, #24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	20000358 	.word	0x20000358
 8001b7c:	20000364 	.word	0x20000364
 8001b80:	20000360 	.word	0x20000360
 8001b84:	20000354 	.word	0x20000354
 8001b88:	200000c8 	.word	0x200000c8
 8001b8c:	2000035c 	.word	0x2000035c

08001b90 <have_dhcpack>:

uint8_t have_dhcpack (uint8_t *buf,uint16_t plen) {
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	460b      	mov	r3, r1
 8001b9a:	807b      	strh	r3, [r7, #2]
    dhcpState = DHCP_STATE_OK;
 8001b9c:	4b07      	ldr	r3, [pc, #28]	; (8001bbc <have_dhcpack+0x2c>)
 8001b9e:	2205      	movs	r2, #5
 8001ba0:	701a      	strb	r2, [r3, #0]
    leaseStart = HAL_GetTick();
 8001ba2:	f7fe fb33 	bl	800020c <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	4b05      	ldr	r3, [pc, #20]	; (8001bc0 <have_dhcpack+0x30>)
 8001baa:	601a      	str	r2, [r3, #0]
    // Turn off broadcast. Application if it needs it can re-enable it
    enc28j60DisableBroadcast();
 8001bac:	f000 fae8 	bl	8002180 <enc28j60DisableBroadcast>
    return 2;
 8001bb0:	2302      	movs	r3, #2
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	200000b1 	.word	0x200000b1
 8001bc0:	200000c4 	.word	0x200000c4

08001bc4 <dnslkup_set_dnsip>:
}

// set DNS server to be used for lookups.
// defaults to Google DNS server if not called.
void dnslkup_set_dnsip(uint8_t *dnsipaddr)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
        uint8_t i=0;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	73fb      	strb	r3, [r7, #15]
        while(i<4){
 8001bd0:	e009      	b.n	8001be6 <dnslkup_set_dnsip+0x22>
                dnsip[i]=dnsipaddr[i];
 8001bd2:	7bfb      	ldrb	r3, [r7, #15]
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	441a      	add	r2, r3
 8001bd8:	7bfb      	ldrb	r3, [r7, #15]
 8001bda:	7811      	ldrb	r1, [r2, #0]
 8001bdc:	4a06      	ldr	r2, [pc, #24]	; (8001bf8 <dnslkup_set_dnsip+0x34>)
 8001bde:	54d1      	strb	r1, [r2, r3]
                i++;
 8001be0:	7bfb      	ldrb	r3, [r7, #15]
 8001be2:	3301      	adds	r3, #1
 8001be4:	73fb      	strb	r3, [r7, #15]
        while(i<4){
 8001be6:	7bfb      	ldrb	r3, [r7, #15]
 8001be8:	2b03      	cmp	r3, #3
 8001bea:	d9f2      	bls.n	8001bd2 <dnslkup_set_dnsip+0xe>
        }
}
 8001bec:	bf00      	nop
 8001bee:	3714      	adds	r7, #20
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bc80      	pop	{r7}
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	20000014 	.word	0x20000014

08001bfc <enc28j60_set_spi>:
  GPIO_SetBits(GPIOA, GPIO_PIN_4);
}
#endif

void enc28j60_set_spi(SPI_HandleTypeDef *hspi_new)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
	hspi = hspi_new;
 8001c04:	4a03      	ldr	r2, [pc, #12]	; (8001c14 <enc28j60_set_spi+0x18>)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6013      	str	r3, [r2, #0]
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr
 8001c14:	200000d8 	.word	0x200000d8

08001c18 <ENC28J60_SendByte>:

void error (float error_num, char infinite);
unsigned char ENC28J60_SendByte(uint8_t tx)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af02      	add	r7, sp, #8
 8001c1e:	4603      	mov	r3, r0
 8001c20:	71fb      	strb	r3, [r7, #7]
	if (hspi == NULL)
 8001c22:	4b0f      	ldr	r3, [pc, #60]	; (8001c60 <ENC28J60_SendByte+0x48>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <ENC28J60_SendByte+0x16>
		return 0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	e014      	b.n	8001c58 <ENC28J60_SendByte+0x40>

	if (r != HAL_OK)
		error(r, 0);
*/

	uint8_t rx = 0;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	72fb      	strb	r3, [r7, #11]
	int r;

	r = HAL_SPI_TransmitReceive(hspi, &tx, &rx, 1, 0xffffffff);
 8001c32:	4b0b      	ldr	r3, [pc, #44]	; (8001c60 <ENC28J60_SendByte+0x48>)
 8001c34:	6818      	ldr	r0, [r3, #0]
 8001c36:	f107 020b 	add.w	r2, r7, #11
 8001c3a:	1df9      	adds	r1, r7, #7
 8001c3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c40:	9300      	str	r3, [sp, #0]
 8001c42:	2301      	movs	r3, #1
 8001c44:	f7ff f9af 	bl	8000fa6 <HAL_SPI_TransmitReceive>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	60fb      	str	r3, [r7, #12]

	if (r != HAL_OK)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <ENC28J60_SendByte+0x3e>
		Error_Handler();
 8001c52:	f001 feef 	bl	8003a34 <Error_Handler>

	return rx;
 8001c56:	7afb      	ldrb	r3, [r7, #11]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	200000d8 	.word	0x200000d8

08001c64 <enc28j60ReadOp>:

uint8_t enc28j60ReadOp(uint8_t op, uint8_t address)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	460a      	mov	r2, r1
 8001c6e:	71fb      	strb	r3, [r7, #7]
 8001c70:	4613      	mov	r3, r2
 8001c72:	71bb      	strb	r3, [r7, #6]
		uint8_t temp;
        enableChip;
 8001c74:	4b1a      	ldr	r3, [pc, #104]	; (8001ce0 <enc28j60ReadOp+0x7c>)
 8001c76:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001c7a:	611a      	str	r2, [r3, #16]
 8001c7c:	4b19      	ldr	r3, [pc, #100]	; (8001ce4 <enc28j60ReadOp+0x80>)
 8001c7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c82:	611a      	str	r2, [r3, #16]
 8001c84:	2002      	movs	r0, #2
 8001c86:	f7fe facb 	bl	8000220 <HAL_Delay>
        // issue read command
        ENC28J60_SendByte(op | (address & ADDR_MASK));
 8001c8a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001c8e:	f003 031f 	and.w	r3, r3, #31
 8001c92:	b25a      	sxtb	r2, r3
 8001c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	b25b      	sxtb	r3, r3
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff ffba 	bl	8001c18 <ENC28J60_SendByte>
        temp = ENC28J60_SendByte(0xFF);
 8001ca4:	20ff      	movs	r0, #255	; 0xff
 8001ca6:	f7ff ffb7 	bl	8001c18 <ENC28J60_SendByte>
 8001caa:	4603      	mov	r3, r0
 8001cac:	73fb      	strb	r3, [r7, #15]
        if (address & 0x80)
 8001cae:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	da04      	bge.n	8001cc0 <enc28j60ReadOp+0x5c>
            temp = ENC28J60_SendByte(0xFF);
 8001cb6:	20ff      	movs	r0, #255	; 0xff
 8001cb8:	f7ff ffae 	bl	8001c18 <ENC28J60_SendByte>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	73fb      	strb	r3, [r7, #15]

        // release CS
        disableChip;
 8001cc0:	4b07      	ldr	r3, [pc, #28]	; (8001ce0 <enc28j60ReadOp+0x7c>)
 8001cc2:	2210      	movs	r2, #16
 8001cc4:	611a      	str	r2, [r3, #16]
 8001cc6:	4b07      	ldr	r3, [pc, #28]	; (8001ce4 <enc28j60ReadOp+0x80>)
 8001cc8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001ccc:	611a      	str	r2, [r3, #16]
 8001cce:	2002      	movs	r0, #2
 8001cd0:	f7fe faa6 	bl	8000220 <HAL_Delay>
        return temp;
 8001cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40010800 	.word	0x40010800
 8001ce4:	40011000 	.word	0x40011000

08001ce8 <enc28j60WriteOp>:

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	71fb      	strb	r3, [r7, #7]
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	71bb      	strb	r3, [r7, #6]
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	717b      	strb	r3, [r7, #5]
    enableChip;
 8001cfa:	4b15      	ldr	r3, [pc, #84]	; (8001d50 <enc28j60WriteOp+0x68>)
 8001cfc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001d00:	611a      	str	r2, [r3, #16]
 8001d02:	4b14      	ldr	r3, [pc, #80]	; (8001d54 <enc28j60WriteOp+0x6c>)
 8001d04:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d08:	611a      	str	r2, [r3, #16]
 8001d0a:	2002      	movs	r0, #2
 8001d0c:	f7fe fa88 	bl	8000220 <HAL_Delay>
    ENC28J60_SendByte(op | (address & ADDR_MASK));
 8001d10:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001d14:	f003 031f 	and.w	r3, r3, #31
 8001d18:	b25a      	sxtb	r2, r3
 8001d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	b25b      	sxtb	r3, r3
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff ff77 	bl	8001c18 <ENC28J60_SendByte>
    ENC28J60_SendByte(data);
 8001d2a:	797b      	ldrb	r3, [r7, #5]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff ff73 	bl	8001c18 <ENC28J60_SendByte>
    disableChip;
 8001d32:	4b07      	ldr	r3, [pc, #28]	; (8001d50 <enc28j60WriteOp+0x68>)
 8001d34:	2210      	movs	r2, #16
 8001d36:	611a      	str	r2, [r3, #16]
 8001d38:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <enc28j60WriteOp+0x6c>)
 8001d3a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001d3e:	611a      	str	r2, [r3, #16]
 8001d40:	2002      	movs	r0, #2
 8001d42:	f7fe fa6d 	bl	8000220 <HAL_Delay>
}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40010800 	.word	0x40010800
 8001d54:	40011000 	.word	0x40011000

08001d58 <enc28j60ReadBuffer>:
 while(!enc28j60Read(ESTAT) & ESTAT_CLKRDY);
}


void enc28j60ReadBuffer(uint16_t len, uint8_t* data)
{
 8001d58:	b590      	push	{r4, r7, lr}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	6039      	str	r1, [r7, #0]
 8001d62:	80fb      	strh	r3, [r7, #6]
    enableChip;
 8001d64:	4b14      	ldr	r3, [pc, #80]	; (8001db8 <enc28j60ReadBuffer+0x60>)
 8001d66:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001d6a:	611a      	str	r2, [r3, #16]
 8001d6c:	4b13      	ldr	r3, [pc, #76]	; (8001dbc <enc28j60ReadBuffer+0x64>)
 8001d6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d72:	611a      	str	r2, [r3, #16]
 8001d74:	2002      	movs	r0, #2
 8001d76:	f7fe fa53 	bl	8000220 <HAL_Delay>
    ENC28J60_SendByte(ENC28J60_READ_BUF_MEM);
 8001d7a:	203a      	movs	r0, #58	; 0x3a
 8001d7c:	f7ff ff4c 	bl	8001c18 <ENC28J60_SendByte>
    while (len--) {
 8001d80:	e007      	b.n	8001d92 <enc28j60ReadBuffer+0x3a>
        *data++ = ENC28J60_SendByte(0x00);
 8001d82:	683c      	ldr	r4, [r7, #0]
 8001d84:	1c63      	adds	r3, r4, #1
 8001d86:	603b      	str	r3, [r7, #0]
 8001d88:	2000      	movs	r0, #0
 8001d8a:	f7ff ff45 	bl	8001c18 <ENC28J60_SendByte>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	7023      	strb	r3, [r4, #0]
    while (len--) {
 8001d92:	88fb      	ldrh	r3, [r7, #6]
 8001d94:	1e5a      	subs	r2, r3, #1
 8001d96:	80fa      	strh	r2, [r7, #6]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1f2      	bne.n	8001d82 <enc28j60ReadBuffer+0x2a>
    }
    disableChip;
 8001d9c:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <enc28j60ReadBuffer+0x60>)
 8001d9e:	2210      	movs	r2, #16
 8001da0:	611a      	str	r2, [r3, #16]
 8001da2:	4b06      	ldr	r3, [pc, #24]	; (8001dbc <enc28j60ReadBuffer+0x64>)
 8001da4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001da8:	611a      	str	r2, [r3, #16]
 8001daa:	2002      	movs	r0, #2
 8001dac:	f7fe fa38 	bl	8000220 <HAL_Delay>
    // Remove next line suggested by user epam - not needed
//    *data='\0';
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd90      	pop	{r4, r7, pc}
 8001db8:	40010800 	.word	0x40010800
 8001dbc:	40011000 	.word	0x40011000

08001dc0 <enc28j60ReadBufferWord>:

static uint16_t enc28j60ReadBufferWord() {
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
    uint16_t result;
    enc28j60ReadBuffer(2, (uint8_t*) &result);
 8001dc6:	1dbb      	adds	r3, r7, #6
 8001dc8:	4619      	mov	r1, r3
 8001dca:	2002      	movs	r0, #2
 8001dcc:	f7ff ffc4 	bl	8001d58 <enc28j60ReadBuffer>
    return result;
 8001dd0:	88fb      	ldrh	r3, [r7, #6]
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
	...

08001ddc <enc28j60WriteBuffer>:


void enc28j60WriteBuffer(uint16_t len, uint8_t* data)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4603      	mov	r3, r0
 8001de4:	6039      	str	r1, [r7, #0]
 8001de6:	80fb      	strh	r3, [r7, #6]
    enableChip;
 8001de8:	4b14      	ldr	r3, [pc, #80]	; (8001e3c <enc28j60WriteBuffer+0x60>)
 8001dea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001dee:	611a      	str	r2, [r3, #16]
 8001df0:	4b13      	ldr	r3, [pc, #76]	; (8001e40 <enc28j60WriteBuffer+0x64>)
 8001df2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001df6:	611a      	str	r2, [r3, #16]
 8001df8:	2002      	movs	r0, #2
 8001dfa:	f7fe fa11 	bl	8000220 <HAL_Delay>
    ENC28J60_SendByte(ENC28J60_WRITE_BUF_MEM);
 8001dfe:	207a      	movs	r0, #122	; 0x7a
 8001e00:	f7ff ff0a 	bl	8001c18 <ENC28J60_SendByte>
    while (len--)
 8001e04:	e006      	b.n	8001e14 <enc28j60WriteBuffer+0x38>
        ENC28J60_SendByte(*data++);
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	1c5a      	adds	r2, r3, #1
 8001e0a:	603a      	str	r2, [r7, #0]
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff ff02 	bl	8001c18 <ENC28J60_SendByte>
    while (len--)
 8001e14:	88fb      	ldrh	r3, [r7, #6]
 8001e16:	1e5a      	subs	r2, r3, #1
 8001e18:	80fa      	strh	r2, [r7, #6]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1f3      	bne.n	8001e06 <enc28j60WriteBuffer+0x2a>

    disableChip;
 8001e1e:	4b07      	ldr	r3, [pc, #28]	; (8001e3c <enc28j60WriteBuffer+0x60>)
 8001e20:	2210      	movs	r2, #16
 8001e22:	611a      	str	r2, [r3, #16]
 8001e24:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <enc28j60WriteBuffer+0x64>)
 8001e26:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001e2a:	611a      	str	r2, [r3, #16]
 8001e2c:	2002      	movs	r0, #2
 8001e2e:	f7fe f9f7 	bl	8000220 <HAL_Delay>
}
 8001e32:	bf00      	nop
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40010800 	.word	0x40010800
 8001e40:	40011000 	.word	0x40011000

08001e44 <enc28j60SetBank>:

void enc28j60SetBank(uint8_t address)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	71fb      	strb	r3, [r7, #7]
    if ((address & BANK_MASK) != Enc28j60Bank) {
 8001e4e:	79fb      	ldrb	r3, [r7, #7]
 8001e50:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001e54:	4a0d      	ldr	r2, [pc, #52]	; (8001e8c <enc28j60SetBank+0x48>)
 8001e56:	7812      	ldrb	r2, [r2, #0]
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d013      	beq.n	8001e84 <enc28j60SetBank+0x40>
        enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_BSEL1|ECON1_BSEL0);
 8001e5c:	2203      	movs	r2, #3
 8001e5e:	211f      	movs	r1, #31
 8001e60:	20a0      	movs	r0, #160	; 0xa0
 8001e62:	f7ff ff41 	bl	8001ce8 <enc28j60WriteOp>
        Enc28j60Bank = address & BANK_MASK;
 8001e66:	79fb      	ldrb	r3, [r7, #7]
 8001e68:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	4b07      	ldr	r3, [pc, #28]	; (8001e8c <enc28j60SetBank+0x48>)
 8001e70:	701a      	strb	r2, [r3, #0]
        enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, Enc28j60Bank>>5);
 8001e72:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <enc28j60SetBank+0x48>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	095b      	lsrs	r3, r3, #5
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	211f      	movs	r1, #31
 8001e7e:	2080      	movs	r0, #128	; 0x80
 8001e80:	f7ff ff32 	bl	8001ce8 <enc28j60WriteOp>
    }
}
 8001e84:	bf00      	nop
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	200000d0 	.word	0x200000d0

08001e90 <enc28j60Read>:

uint8_t enc28j60Read(uint8_t address)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	4603      	mov	r3, r0
 8001e98:	71fb      	strb	r3, [r7, #7]
        // set the bank
        enc28j60SetBank(address);
 8001e9a:	79fb      	ldrb	r3, [r7, #7]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff ffd1 	bl	8001e44 <enc28j60SetBank>
        // do the read
        return enc28j60ReadOp(ENC28J60_READ_CTRL_REG, address);
 8001ea2:	79fb      	ldrb	r3, [r7, #7]
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	2000      	movs	r0, #0
 8001ea8:	f7ff fedc 	bl	8001c64 <enc28j60ReadOp>
 8001eac:	4603      	mov	r3, r0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <enc28j60WriteWord>:

void enc28j60WriteWord(uint8_t address, uint16_t data) {
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b082      	sub	sp, #8
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	460a      	mov	r2, r1
 8001ec0:	71fb      	strb	r3, [r7, #7]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	80bb      	strh	r3, [r7, #4]
    enc28j60Write(address, data & 0xff);
 8001ec6:	88bb      	ldrh	r3, [r7, #4]
 8001ec8:	b2da      	uxtb	r2, r3
 8001eca:	79fb      	ldrb	r3, [r7, #7]
 8001ecc:	4611      	mov	r1, r2
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f000 f836 	bl	8001f40 <enc28j60Write>
    enc28j60Write(address + 1, data >> 8);
 8001ed4:	79fb      	ldrb	r3, [r7, #7]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	b2da      	uxtb	r2, r3
 8001eda:	88bb      	ldrh	r3, [r7, #4]
 8001edc:	0a1b      	lsrs	r3, r3, #8
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4610      	mov	r0, r2
 8001ee6:	f000 f82b 	bl	8001f40 <enc28j60Write>
}
 8001eea:	bf00      	nop
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <enc28j60PhyReadH>:

// read upper 8 bits
uint16_t enc28j60PhyReadH(uint8_t address)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b082      	sub	sp, #8
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	4603      	mov	r3, r0
 8001efa:	71fb      	strb	r3, [r7, #7]
	// Set the right address and start the register read operation
	enc28j60Write(MIREGADR, address);
 8001efc:	79fb      	ldrb	r3, [r7, #7]
 8001efe:	4619      	mov	r1, r3
 8001f00:	20d4      	movs	r0, #212	; 0xd4
 8001f02:	f000 f81d 	bl	8001f40 <enc28j60Write>
	enc28j60Write(MICMD, MICMD_MIIRD);
 8001f06:	2101      	movs	r1, #1
 8001f08:	20d2      	movs	r0, #210	; 0xd2
 8001f0a:	f000 f819 	bl	8001f40 <enc28j60Write>
	Delay(15);
 8001f0e:	200f      	movs	r0, #15
 8001f10:	f7fe f986 	bl	8000220 <HAL_Delay>

	// wait until the PHY read completes
	while(enc28j60Read(MISTAT) & MISTAT_BUSY);
 8001f14:	bf00      	nop
 8001f16:	20ea      	movs	r0, #234	; 0xea
 8001f18:	f7ff ffba 	bl	8001e90 <enc28j60Read>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1f7      	bne.n	8001f16 <enc28j60PhyReadH+0x24>

	// reset reading bit
	enc28j60Write(MICMD, 0x00);
 8001f26:	2100      	movs	r1, #0
 8001f28:	20d2      	movs	r0, #210	; 0xd2
 8001f2a:	f000 f809 	bl	8001f40 <enc28j60Write>
	
	return (enc28j60Read(MIRDH));
 8001f2e:	20d9      	movs	r0, #217	; 0xd9
 8001f30:	f7ff ffae 	bl	8001e90 <enc28j60Read>
 8001f34:	4603      	mov	r3, r0
 8001f36:	b29b      	uxth	r3, r3
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <enc28j60Write>:


void enc28j60Write(uint8_t address, uint8_t data)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	460a      	mov	r2, r1
 8001f4a:	71fb      	strb	r3, [r7, #7]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	71bb      	strb	r3, [r7, #6]
        // set the bank
        enc28j60SetBank(address);
 8001f50:	79fb      	ldrb	r3, [r7, #7]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff ff76 	bl	8001e44 <enc28j60SetBank>
        // do the write
        enc28j60WriteOp(ENC28J60_WRITE_CTRL_REG, address, data);
 8001f58:	79ba      	ldrb	r2, [r7, #6]
 8001f5a:	79fb      	ldrb	r3, [r7, #7]
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	2040      	movs	r0, #64	; 0x40
 8001f60:	f7ff fec2 	bl	8001ce8 <enc28j60WriteOp>
}
 8001f64:	bf00      	nop
 8001f66:	3708      	adds	r7, #8
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <enc28j60PhyWrite>:


void enc28j60PhyWrite(uint8_t address, uint16_t data)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	460a      	mov	r2, r1
 8001f76:	71fb      	strb	r3, [r7, #7]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	80bb      	strh	r3, [r7, #4]
        // set the PHY register address
        enc28j60Write(MIREGADR, address);
 8001f7c:	79fb      	ldrb	r3, [r7, #7]
 8001f7e:	4619      	mov	r1, r3
 8001f80:	20d4      	movs	r0, #212	; 0xd4
 8001f82:	f7ff ffdd 	bl	8001f40 <enc28j60Write>
        // write the PHY data
        enc28j60Write(MIWRL, data);
 8001f86:	88bb      	ldrh	r3, [r7, #4]
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	20d6      	movs	r0, #214	; 0xd6
 8001f8e:	f7ff ffd7 	bl	8001f40 <enc28j60Write>
        enc28j60Write(MIWRH, data>>8);
 8001f92:	88bb      	ldrh	r3, [r7, #4]
 8001f94:	0a1b      	lsrs	r3, r3, #8
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	20d7      	movs	r0, #215	; 0xd7
 8001f9e:	f7ff ffcf 	bl	8001f40 <enc28j60Write>
        // wait until the PHY write completes
        while(enc28j60Read(MISTAT) & MISTAT_BUSY){
 8001fa2:	e002      	b.n	8001faa <enc28j60PhyWrite+0x3e>
                Delay(15);
 8001fa4:	200f      	movs	r0, #15
 8001fa6:	f7fe f93b 	bl	8000220 <HAL_Delay>
        while(enc28j60Read(MISTAT) & MISTAT_BUSY){
 8001faa:	20ea      	movs	r0, #234	; 0xea
 8001fac:	f7ff ff70 	bl	8001e90 <enc28j60Read>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1f4      	bne.n	8001fa4 <enc28j60PhyWrite+0x38>
        }
}
 8001fba:	bf00      	nop
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <enc28j60clkout>:
    while (enc28j60ReadByte(MISTAT) & MISTAT_BUSY)
        ;
}
*/
void enc28j60clkout(uint8_t clk)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b082      	sub	sp, #8
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	4603      	mov	r3, r0
 8001fca:	71fb      	strb	r3, [r7, #7]
        //setup clkout: 2 is 12.5MHz:
	enc28j60Write(ECOCON, clk & 0x7);
 8001fcc:	79fb      	ldrb	r3, [r7, #7]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	2075      	movs	r0, #117	; 0x75
 8001fd8:	f7ff ffb2 	bl	8001f40 <enc28j60Write>
}
 8001fdc:	bf00      	nop
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <enc28j60Init>:

void enc28j60Init( uint8_t* macaddr )
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
	enableChip; // ss=0
 8001fec:	4b4c      	ldr	r3, [pc, #304]	; (8002120 <enc28j60Init+0x13c>)
 8001fee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001ff2:	611a      	str	r2, [r3, #16]
 8001ff4:	4b4b      	ldr	r3, [pc, #300]	; (8002124 <enc28j60Init+0x140>)
 8001ff6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ffa:	611a      	str	r2, [r3, #16]
 8001ffc:	2002      	movs	r0, #2
 8001ffe:	f7fe f90f 	bl	8000220 <HAL_Delay>

	// perform system reset
	enc28j60WriteOp(ENC28J60_SOFT_RESET, 0, ENC28J60_SOFT_RESET);
 8002002:	22ff      	movs	r2, #255	; 0xff
 8002004:	2100      	movs	r1, #0
 8002006:	20ff      	movs	r0, #255	; 0xff
 8002008:	f7ff fe6e 	bl	8001ce8 <enc28j60WriteOp>
	HAL_Delay(50);
 800200c:	2032      	movs	r0, #50	; 0x32
 800200e:	f7fe f907 	bl	8000220 <HAL_Delay>
	//while(!(enc28j60Read(ESTAT) & ESTAT_CLKRDY));
	// do bank 0 stuff
	// initialize receive buffer
	// 16-bit transfers, must write low byte first
	// set receive buffer start address
	gNextPacketPtr = RXSTART_INIT;
 8002012:	4b45      	ldr	r3, [pc, #276]	; (8002128 <enc28j60Init+0x144>)
 8002014:	2200      	movs	r2, #0
 8002016:	801a      	strh	r2, [r3, #0]
        // Rx start
	enc28j60WriteWord(ERXSTL, RXSTART_INIT);
 8002018:	2100      	movs	r1, #0
 800201a:	2008      	movs	r0, #8
 800201c:	f7ff ff4b 	bl	8001eb6 <enc28j60WriteWord>
	// set receive pointer address
	enc28j60WriteWord(ERXRDPTL, RXSTART_INIT);
 8002020:	2100      	movs	r1, #0
 8002022:	200c      	movs	r0, #12
 8002024:	f7ff ff47 	bl	8001eb6 <enc28j60WriteWord>
	// RX end
	enc28j60WriteWord(ERXNDL, RXSTOP_INIT);
 8002028:	f641 11fe 	movw	r1, #6654	; 0x19fe
 800202c:	200a      	movs	r0, #10
 800202e:	f7ff ff42 	bl	8001eb6 <enc28j60WriteWord>
	// TX start
	enc28j60WriteWord(ETXSTL, TXSTART_INIT);
 8002032:	f641 11ff 	movw	r1, #6655	; 0x19ff
 8002036:	2004      	movs	r0, #4
 8002038:	f7ff ff3d 	bl	8001eb6 <enc28j60WriteWord>
	// TX end
	enc28j60WriteWord(ETXNDL, TXSTOP_INIT);
 800203c:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8002040:	2006      	movs	r0, #6
 8002042:	f7ff ff38 	bl	8001eb6 <enc28j60WriteWord>
        // This is hex 303F->EPMM0=0x3f,EPMM1=0x30
 
	//enc28j60Write(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN);
        //Change to add ERXFCON_BCEN recommended by epam
	//enc28j60Write(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN|ERXFCON_BCEN);
        erxfcon =  ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN|ERXFCON_BCEN;
 8002046:	4b39      	ldr	r3, [pc, #228]	; (800212c <enc28j60Init+0x148>)
 8002048:	22b1      	movs	r2, #177	; 0xb1
 800204a:	701a      	strb	r2, [r3, #0]
	enc28j60Write(ERXFCON, erxfcon );
 800204c:	4b37      	ldr	r3, [pc, #220]	; (800212c <enc28j60Init+0x148>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	4619      	mov	r1, r3
 8002052:	2038      	movs	r0, #56	; 0x38
 8002054:	f7ff ff74 	bl	8001f40 <enc28j60Write>
	enc28j60WriteWord(EPMM0, 0x303f);
 8002058:	f243 013f 	movw	r1, #12351	; 0x303f
 800205c:	2028      	movs	r0, #40	; 0x28
 800205e:	f7ff ff2a 	bl	8001eb6 <enc28j60WriteWord>
	enc28j60WriteWord(EPMCSL, 0xf7f9);
 8002062:	f24f 71f9 	movw	r1, #63481	; 0xf7f9
 8002066:	2030      	movs	r0, #48	; 0x30
 8002068:	f7ff ff25 	bl	8001eb6 <enc28j60WriteWord>
        //
	// do bank 2 stuff
	// enable MAC receive
	enc28j60Write(MACON1, MACON1_MARXEN|MACON1_TXPAUS|MACON1_RXPAUS);
 800206c:	210d      	movs	r1, #13
 800206e:	20c0      	movs	r0, #192	; 0xc0
 8002070:	f7ff ff66 	bl	8001f40 <enc28j60Write>
	// bring MAC out of reset
	enc28j60Write(MACON2, 0x00);
 8002074:	2100      	movs	r1, #0
 8002076:	20c1      	movs	r0, #193	; 0xc1
 8002078:	f7ff ff62 	bl	8001f40 <enc28j60Write>
	// enable automatic padding to 60bytes and CRC operations
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, MACON3, MACON3_PADCFG0|MACON3_TXCRCEN|MACON3_FRMLNEN);  //|MACON3_FULDPX);
 800207c:	2232      	movs	r2, #50	; 0x32
 800207e:	21c2      	movs	r1, #194	; 0xc2
 8002080:	2080      	movs	r0, #128	; 0x80
 8002082:	f7ff fe31 	bl	8001ce8 <enc28j60WriteOp>
	// set inter-frame gap (non-back-to-back)
	enc28j60WriteWord(MAIPGL, 0x0C12);
 8002086:	f640 4112 	movw	r1, #3090	; 0xc12
 800208a:	20c6      	movs	r0, #198	; 0xc6
 800208c:	f7ff ff13 	bl	8001eb6 <enc28j60WriteWord>
	// set inter-frame gap (back-to-back)
	enc28j60Write(MABBIPG, 0x12);
 8002090:	2112      	movs	r1, #18
 8002092:	20c4      	movs	r0, #196	; 0xc4
 8002094:	f7ff ff54 	bl	8001f40 <enc28j60Write>
	// Set the maximum packet size which the controller will accept
        // Do not send packets longer than MAX_FRAMELEN:
	enc28j60WriteWord(MAMXFLL, MAX_FRAMELEN);	
 8002098:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800209c:	20ca      	movs	r0, #202	; 0xca
 800209e:	f7ff ff0a 	bl	8001eb6 <enc28j60WriteWord>
	// do bank 3 stuff
        // write MAC address
        // NOTE: MAC address in ENC28J60 is byte-backward
        enc28j60Write(MAADR5, macaddr[0]);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	4619      	mov	r1, r3
 80020a8:	20e4      	movs	r0, #228	; 0xe4
 80020aa:	f7ff ff49 	bl	8001f40 <enc28j60Write>
        enc28j60Write(MAADR4, macaddr[1]);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	3301      	adds	r3, #1
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	4619      	mov	r1, r3
 80020b6:	20e5      	movs	r0, #229	; 0xe5
 80020b8:	f7ff ff42 	bl	8001f40 <enc28j60Write>
        enc28j60Write(MAADR3, macaddr[2]);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	3302      	adds	r3, #2
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	4619      	mov	r1, r3
 80020c4:	20e2      	movs	r0, #226	; 0xe2
 80020c6:	f7ff ff3b 	bl	8001f40 <enc28j60Write>
        enc28j60Write(MAADR2, macaddr[3]);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	3303      	adds	r3, #3
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	4619      	mov	r1, r3
 80020d2:	20e3      	movs	r0, #227	; 0xe3
 80020d4:	f7ff ff34 	bl	8001f40 <enc28j60Write>
        enc28j60Write(MAADR1, macaddr[4]);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3304      	adds	r3, #4
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	4619      	mov	r1, r3
 80020e0:	20e0      	movs	r0, #224	; 0xe0
 80020e2:	f7ff ff2d 	bl	8001f40 <enc28j60Write>
        enc28j60Write(MAADR0, macaddr[5]);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	3305      	adds	r3, #5
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	4619      	mov	r1, r3
 80020ee:	20e1      	movs	r0, #225	; 0xe1
 80020f0:	f7ff ff26 	bl	8001f40 <enc28j60Write>
	// no loopback of transmitted frames
	enc28j60PhyWrite(PHCON2, PHCON2_HDLDIS);
 80020f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020f8:	2010      	movs	r0, #16
 80020fa:	f7ff ff37 	bl	8001f6c <enc28j60PhyWrite>
	// switch to bank 0
	enc28j60SetBank(ECON1);
 80020fe:	201f      	movs	r0, #31
 8002100:	f7ff fea0 	bl	8001e44 <enc28j60SetBank>
	// enable interrutps
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE|EIE_PKTIE);
 8002104:	22c0      	movs	r2, #192	; 0xc0
 8002106:	211b      	movs	r1, #27
 8002108:	2080      	movs	r0, #128	; 0x80
 800210a:	f7ff fded 	bl	8001ce8 <enc28j60WriteOp>
	// enable packet reception
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
 800210e:	2204      	movs	r2, #4
 8002110:	211f      	movs	r1, #31
 8002112:	2080      	movs	r0, #128	; 0x80
 8002114:	f7ff fde8 	bl	8001ce8 <enc28j60WriteOp>
}
 8002118:	bf00      	nop
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40010800 	.word	0x40010800
 8002124:	40011000 	.word	0x40011000
 8002128:	200000d2 	.word	0x200000d2
 800212c:	200000d4 	.word	0x200000d4

08002130 <enc28j60getrev>:

// read the revision of the chip:
uint8_t enc28j60getrev(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
        uint8_t rev;
        rev=enc28j60Read(EREVID);
 8002136:	2072      	movs	r0, #114	; 0x72
 8002138:	f7ff feaa 	bl	8001e90 <enc28j60Read>
 800213c:	4603      	mov	r3, r0
 800213e:	71fb      	strb	r3, [r7, #7]
        // microchip forgot to step the number on the silcon when they
        // released the revision B7. 6 is now rev B7. We still have
        // to see what they do when they release B8. At the moment
        // there is no B8 out yet
        if (rev>5) rev++;
 8002140:	79fb      	ldrb	r3, [r7, #7]
 8002142:	2b05      	cmp	r3, #5
 8002144:	d902      	bls.n	800214c <enc28j60getrev+0x1c>
 8002146:	79fb      	ldrb	r3, [r7, #7]
 8002148:	3301      	adds	r3, #1
 800214a:	71fb      	strb	r3, [r7, #7]
	return(rev);
 800214c:	79fb      	ldrb	r3, [r7, #7]
}
 800214e:	4618      	mov	r0, r3
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
	...

08002158 <enc28j60EnableBroadcast>:

// A number of utility functions to enable/disable broadcast and multicast bits
void enc28j60EnableBroadcast( void ) {
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
	erxfcon |= ERXFCON_BCEN;
 800215c:	4b07      	ldr	r3, [pc, #28]	; (800217c <enc28j60EnableBroadcast+0x24>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	f043 0301 	orr.w	r3, r3, #1
 8002164:	b2da      	uxtb	r2, r3
 8002166:	4b05      	ldr	r3, [pc, #20]	; (800217c <enc28j60EnableBroadcast+0x24>)
 8002168:	701a      	strb	r2, [r3, #0]
	enc28j60Write(ERXFCON, erxfcon);
 800216a:	4b04      	ldr	r3, [pc, #16]	; (800217c <enc28j60EnableBroadcast+0x24>)
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	4619      	mov	r1, r3
 8002170:	2038      	movs	r0, #56	; 0x38
 8002172:	f7ff fee5 	bl	8001f40 <enc28j60Write>
}
 8002176:	bf00      	nop
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	200000d4 	.word	0x200000d4

08002180 <enc28j60DisableBroadcast>:

void enc28j60DisableBroadcast( void ) {
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
	erxfcon &= ~ERXFCON_BCEN;
 8002184:	4b07      	ldr	r3, [pc, #28]	; (80021a4 <enc28j60DisableBroadcast+0x24>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	f023 0301 	bic.w	r3, r3, #1
 800218c:	b2da      	uxtb	r2, r3
 800218e:	4b05      	ldr	r3, [pc, #20]	; (80021a4 <enc28j60DisableBroadcast+0x24>)
 8002190:	701a      	strb	r2, [r3, #0]
	enc28j60Write(ERXFCON, erxfcon);
 8002192:	4b04      	ldr	r3, [pc, #16]	; (80021a4 <enc28j60DisableBroadcast+0x24>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	4619      	mov	r1, r3
 8002198:	2038      	movs	r0, #56	; 0x38
 800219a:	f7ff fed1 	bl	8001f40 <enc28j60Write>
}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	200000d4 	.word	0x200000d4

080021a8 <enc28j60linkup>:
}


// link status
uint8_t enc28j60linkup(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
        // bit 10 (= bit 3 in upper reg)
	return(enc28j60PhyReadH(PHSTAT2) & 4);
 80021ac:	2011      	movs	r0, #17
 80021ae:	f7ff fea0 	bl	8001ef2 <enc28j60PhyReadH>
 80021b2:	4603      	mov	r3, r0
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	f003 0304 	and.w	r3, r3, #4
 80021ba:	b2db      	uxtb	r3, r3
}
 80021bc:	4618      	mov	r0, r3
 80021be:	bd80      	pop	{r7, pc}

080021c0 <enc28j60PacketSend>:

void enc28j60PacketSend(uint16_t len, uint8_t* packet)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	6039      	str	r1, [r7, #0]
 80021ca:	80fb      	strh	r3, [r7, #6]
        // Check no transmit in progress
        while (enc28j60ReadOp(ENC28J60_READ_CTRL_REG, ECON1) & ECON1_TXRTS)
 80021cc:	e011      	b.n	80021f2 <enc28j60PacketSend+0x32>
        {
                // Reset the transmit logic problem. See Rev. B4 Silicon Errata point 12.
                if( (enc28j60Read(EIR) & EIR_TXERIF) ) {
 80021ce:	201c      	movs	r0, #28
 80021d0:	f7ff fe5e 	bl	8001e90 <enc28j60Read>
 80021d4:	4603      	mov	r3, r0
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d009      	beq.n	80021f2 <enc28j60PacketSend+0x32>
                        enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRST);
 80021de:	2280      	movs	r2, #128	; 0x80
 80021e0:	211f      	movs	r1, #31
 80021e2:	2080      	movs	r0, #128	; 0x80
 80021e4:	f7ff fd80 	bl	8001ce8 <enc28j60WriteOp>
                        enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
 80021e8:	2280      	movs	r2, #128	; 0x80
 80021ea:	211f      	movs	r1, #31
 80021ec:	20a0      	movs	r0, #160	; 0xa0
 80021ee:	f7ff fd7b 	bl	8001ce8 <enc28j60WriteOp>
        while (enc28j60ReadOp(ENC28J60_READ_CTRL_REG, ECON1) & ECON1_TXRTS)
 80021f2:	211f      	movs	r1, #31
 80021f4:	2000      	movs	r0, #0
 80021f6:	f7ff fd35 	bl	8001c64 <enc28j60ReadOp>
 80021fa:	4603      	mov	r3, r0
 80021fc:	f003 0308 	and.w	r3, r3, #8
 8002200:	2b00      	cmp	r3, #0
 8002202:	d1e4      	bne.n	80021ce <enc28j60PacketSend+0xe>
                }
        }

	// Set the write pointer to start of transmit buffer area
	enc28j60WriteWord(EWRPTL, TXSTART_INIT);
 8002204:	f641 11ff 	movw	r1, #6655	; 0x19ff
 8002208:	2002      	movs	r0, #2
 800220a:	f7ff fe54 	bl	8001eb6 <enc28j60WriteWord>
	// Set the TXND pointer to correspond to the packet size given
	enc28j60WriteWord(ETXNDL, (TXSTART_INIT+len));
 800220e:	88fb      	ldrh	r3, [r7, #6]
 8002210:	f503 53cf 	add.w	r3, r3, #6624	; 0x19e0
 8002214:	331f      	adds	r3, #31
 8002216:	b29b      	uxth	r3, r3
 8002218:	4619      	mov	r1, r3
 800221a:	2006      	movs	r0, #6
 800221c:	f7ff fe4b 	bl	8001eb6 <enc28j60WriteWord>
	// write per-packet control byte (0x00 means use macon3 settings)
	enc28j60WriteOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
 8002220:	2200      	movs	r2, #0
 8002222:	2100      	movs	r1, #0
 8002224:	207a      	movs	r0, #122	; 0x7a
 8002226:	f7ff fd5f 	bl	8001ce8 <enc28j60WriteOp>
	// copy the packet into the transmit buffer
	enc28j60WriteBuffer(len, packet);
 800222a:	88fb      	ldrh	r3, [r7, #6]
 800222c:	6839      	ldr	r1, [r7, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f7ff fdd4 	bl	8001ddc <enc28j60WriteBuffer>
	// send the contents of the transmit buffer onto the network
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
 8002234:	2208      	movs	r2, #8
 8002236:	211f      	movs	r1, #31
 8002238:	2080      	movs	r0, #128	; 0x80
 800223a:	f7ff fd55 	bl	8001ce8 <enc28j60WriteOp>
        // Reset the transmit logic problem. See Rev. B4 Silicon Errata point 12.
}
 800223e:	bf00      	nop
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
	...

08002248 <enc28j60PacketReceive>:
// The packet will by headed by an ethernet header.
//      maxlen  The maximum acceptable length of a retrieved packet.
//      packet  Pointer where packet data should be stored.
// Returns: Packet length in bytes if a packet was retrieved, zero otherwise.
uint16_t enc28j60PacketReceive(uint16_t maxlen, uint8_t* packet)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	6039      	str	r1, [r7, #0]
 8002252:	80fb      	strh	r3, [r7, #6]
        	uint16_t rxstat;
	uint16_t len;
	// check if a packet has been received and buffered
	//if( !(enc28j60Read(EIR) & EIR_PKTIF) ){
        // The above does not work. See Rev. B4 Silicon Errata point 6.
	if( enc28j60Read(EPKTCNT) ==0 ){
 8002254:	2039      	movs	r0, #57	; 0x39
 8002256:	f7ff fe1b 	bl	8001e90 <enc28j60Read>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d101      	bne.n	8002264 <enc28j60PacketReceive+0x1c>
		return(0);
 8002260:	2300      	movs	r3, #0
 8002262:	e04f      	b.n	8002304 <enc28j60PacketReceive+0xbc>
        }

	// Set the read pointer to the start of the received packet
	enc28j60WriteWord(ERDPTL, gNextPacketPtr);
 8002264:	4b29      	ldr	r3, [pc, #164]	; (800230c <enc28j60PacketReceive+0xc4>)
 8002266:	881b      	ldrh	r3, [r3, #0]
 8002268:	4619      	mov	r1, r3
 800226a:	2000      	movs	r0, #0
 800226c:	f7ff fe23 	bl	8001eb6 <enc28j60WriteWord>
	//enc28j60Write(ERDPTL, (gNextPacketPtr &0xFF));
	//enc28j60Write(ERDPTH, (gNextPacketPtr)>>8);
	// read the next packet pointer
	gNextPacketPtr  = enc28j60ReadBufferWord();
 8002270:	f7ff fda6 	bl	8001dc0 <enc28j60ReadBufferWord>
 8002274:	4603      	mov	r3, r0
 8002276:	461a      	mov	r2, r3
 8002278:	4b24      	ldr	r3, [pc, #144]	; (800230c <enc28j60PacketReceive+0xc4>)
 800227a:	801a      	strh	r2, [r3, #0]
	//gNextPacketPtr  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
	//gNextPacketPtr |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
	// read the packet length (see datasheet page 43)
	len = enc28j60ReadBufferWord() - 4;
 800227c:	f7ff fda0 	bl	8001dc0 <enc28j60ReadBufferWord>
 8002280:	4603      	mov	r3, r0
 8002282:	3b04      	subs	r3, #4
 8002284:	81fb      	strh	r3, [r7, #14]
	//len = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
	//len |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
        //len-=4; //remove the CRC count
	// read the receive status (see datasheet page 43)
	rxstat  = enc28j60ReadBufferWord();
 8002286:	f7ff fd9b 	bl	8001dc0 <enc28j60ReadBufferWord>
 800228a:	4603      	mov	r3, r0
 800228c:	81bb      	strh	r3, [r7, #12]
	//rxstat  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
	//rxstat |= ((uint16_t)enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0))<<8;
	// limit retrieve length
        if (len>maxlen-1){
 800228e:	89fa      	ldrh	r2, [r7, #14]
 8002290:	88fb      	ldrh	r3, [r7, #6]
 8002292:	3b01      	subs	r3, #1
 8002294:	429a      	cmp	r2, r3
 8002296:	dd02      	ble.n	800229e <enc28j60PacketReceive+0x56>
                len=maxlen-1;
 8002298:	88fb      	ldrh	r3, [r7, #6]
 800229a:	3b01      	subs	r3, #1
 800229c:	81fb      	strh	r3, [r7, #14]
        }
        // check CRC and symbol errors (see datasheet page 44, table 7-3):
        // The ERXFCON.CRCEN is set by default. Normally we should not
        // need to check this.
        if ((rxstat & 0x80)==0){
 800229e:	89bb      	ldrh	r3, [r7, #12]
 80022a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d102      	bne.n	80022ae <enc28j60PacketReceive+0x66>
                // invalid
                len=0;
 80022a8:	2300      	movs	r3, #0
 80022aa:	81fb      	strh	r3, [r7, #14]
 80022ac:	e004      	b.n	80022b8 <enc28j60PacketReceive+0x70>
        }else{
                // copy the packet from the receive buffer
                enc28j60ReadBuffer(len, packet);
 80022ae:	89fb      	ldrh	r3, [r7, #14]
 80022b0:	6839      	ldr	r1, [r7, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff fd50 	bl	8001d58 <enc28j60ReadBuffer>
        }
	// Move the RX read pointer to the start of the next received packet
	// This frees the memory we just read out
	enc28j60WriteWord(ERXRDPTL, gNextPacketPtr );
 80022b8:	4b14      	ldr	r3, [pc, #80]	; (800230c <enc28j60PacketReceive+0xc4>)
 80022ba:	881b      	ldrh	r3, [r3, #0]
 80022bc:	4619      	mov	r1, r3
 80022be:	200c      	movs	r0, #12
 80022c0:	f7ff fdf9 	bl	8001eb6 <enc28j60WriteWord>
	//enc28j60Write(ERXRDPTL, (gNextPacketPtr &0xFF));
	//enc28j60Write(ERXRDPTH, (gNextPacketPtr)>>8);
        // However, compensate for the errata point 13, rev B4: enver write an even address!
        if ((gNextPacketPtr - 1 < RXSTART_INIT)
 80022c4:	4b11      	ldr	r3, [pc, #68]	; (800230c <enc28j60PacketReceive+0xc4>)
 80022c6:	881b      	ldrh	r3, [r3, #0]
 80022c8:	3b01      	subs	r3, #1
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	db06      	blt.n	80022dc <enc28j60PacketReceive+0x94>
                || (gNextPacketPtr -1 > RXSTOP_INIT)) {
 80022ce:	4b0f      	ldr	r3, [pc, #60]	; (800230c <enc28j60PacketReceive+0xc4>)
 80022d0:	881b      	ldrh	r3, [r3, #0]
 80022d2:	3b01      	subs	r3, #1
 80022d4:	f641 12fe 	movw	r2, #6654	; 0x19fe
 80022d8:	4293      	cmp	r3, r2
 80022da:	dd05      	ble.n	80022e8 <enc28j60PacketReceive+0xa0>
                enc28j60WriteWord(ERXRDPTL, RXSTOP_INIT);
 80022dc:	f641 11fe 	movw	r1, #6654	; 0x19fe
 80022e0:	200c      	movs	r0, #12
 80022e2:	f7ff fde8 	bl	8001eb6 <enc28j60WriteWord>
 80022e6:	e007      	b.n	80022f8 <enc28j60PacketReceive+0xb0>
                //enc28j60Write(ERXRDPTL, (RXSTOP_INIT)&0xFF);
                //enc28j60Write(ERXRDPTH, (RXSTOP_INIT)>>8);
        } else {
                enc28j60WriteWord(ERXRDPTL, (gNextPacketPtr-1));
 80022e8:	4b08      	ldr	r3, [pc, #32]	; (800230c <enc28j60PacketReceive+0xc4>)
 80022ea:	881b      	ldrh	r3, [r3, #0]
 80022ec:	3b01      	subs	r3, #1
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	4619      	mov	r1, r3
 80022f2:	200c      	movs	r0, #12
 80022f4:	f7ff fddf 	bl	8001eb6 <enc28j60WriteWord>
                //enc28j60Write(ERXRDPTL, (gNextPacketPtr-1)&0xFF);
                //enc28j60Write(ERXRDPTH, (gNextPacketPtr-1)>>8);
        }
	// decrement the packet counter indicate we are done with this packet
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
 80022f8:	2240      	movs	r2, #64	; 0x40
 80022fa:	211e      	movs	r1, #30
 80022fc:	2080      	movs	r0, #128	; 0x80
 80022fe:	f7ff fcf3 	bl	8001ce8 <enc28j60WriteOp>
	return(len);
 8002302:	89fb      	ldrh	r3, [r7, #14]
        }
	// decrement the packet counter indicate we are done with this packet
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
	return(len);
*/
}
 8002304:	4618      	mov	r0, r3
 8002306:	3710      	adds	r7, #16
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	200000d2 	.word	0x200000d2

08002310 <checksum>:
//
// For more information on how this algorithm works see:
// http://www.netfor2.com/checksum.html
// http://www.msc.uky.edu/ken/cs471/notes/chap3.htm
// The RFC has also a C code example: http://www.faqs.org/rfcs/rfc1071.html
uint16_t checksum(uint8_t *buf, uint16_t len,uint8_t type){
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	460b      	mov	r3, r1
 800231a:	807b      	strh	r3, [r7, #2]
 800231c:	4613      	mov	r3, r2
 800231e:	707b      	strb	r3, [r7, #1]
        // type 0=ip , icmp
        //      1=udp
        //      2=tcp
        uint32_t sum = 0;
 8002320:	2300      	movs	r3, #0
 8002322:	60fb      	str	r3, [r7, #12]

        //if(type==0){    
        //        // do not add anything, standard IP checksum as described above
        //        // Usable for ICMP and IP header
        //}
        if(type==1){
 8002324:	787b      	ldrb	r3, [r7, #1]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d107      	bne.n	800233a <checksum+0x2a>
                sum+=IP_PROTO_UDP_V; // protocol udp
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	3311      	adds	r3, #17
 800232e:	60fb      	str	r3, [r7, #12]
                // the length here is the length of udp (data+header len)
                // =length given to this function - (IP.scr+IP.dst length)
                sum+=len-8; // = real udp len
 8002330:	887a      	ldrh	r2, [r7, #2]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	4413      	add	r3, r2
 8002336:	3b08      	subs	r3, #8
 8002338:	60fb      	str	r3, [r7, #12]
        }
        if(type==2){
 800233a:	787b      	ldrb	r3, [r7, #1]
 800233c:	2b02      	cmp	r3, #2
 800233e:	d119      	bne.n	8002374 <checksum+0x64>
                sum+=IP_PROTO_TCP_V; 
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	3306      	adds	r3, #6
 8002344:	60fb      	str	r3, [r7, #12]
                // the length here is the length of tcp (data+header len)
                // =length given to this function - (IP.scr+IP.dst length)
                sum+=len-8; // = real tcp len
 8002346:	887a      	ldrh	r2, [r7, #2]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	4413      	add	r3, r2
 800234c:	3b08      	subs	r3, #8
 800234e:	60fb      	str	r3, [r7, #12]
        }
        // build the sum of 16bit words
        while(len >1){
 8002350:	e010      	b.n	8002374 <checksum+0x64>
                sum += 0xFFFF & (((uint32_t)*buf<<8)|*(buf+1));
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	021b      	lsls	r3, r3, #8
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	3201      	adds	r2, #1
 800235c:	7812      	ldrb	r2, [r2, #0]
 800235e:	4313      	orrs	r3, r2
 8002360:	b29b      	uxth	r3, r3
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	4413      	add	r3, r2
 8002366:	60fb      	str	r3, [r7, #12]
                buf+=2;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	3302      	adds	r3, #2
 800236c:	607b      	str	r3, [r7, #4]
                len-=2;
 800236e:	887b      	ldrh	r3, [r7, #2]
 8002370:	3b02      	subs	r3, #2
 8002372:	807b      	strh	r3, [r7, #2]
        while(len >1){
 8002374:	887b      	ldrh	r3, [r7, #2]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d8eb      	bhi.n	8002352 <checksum+0x42>
        }
        // if there is a byte left then add it (padded with zero)
        if (len){
 800237a:	887b      	ldrh	r3, [r7, #2]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d00c      	beq.n	800239a <checksum+0x8a>
                sum += ((uint32_t)(0xFF & *buf))<<8;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	021b      	lsls	r3, r3, #8
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	4413      	add	r3, r2
 800238a:	60fb      	str	r3, [r7, #12]
        }
        // now calculate the sum over the bytes in the sum
        // until the result is only 16bit long
        while (sum>>16){
 800238c:	e005      	b.n	800239a <checksum+0x8a>
                sum = (sum & 0xFFFF)+(sum >> 16);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	b29a      	uxth	r2, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	0c1b      	lsrs	r3, r3, #16
 8002396:	4413      	add	r3, r2
 8002398:	60fb      	str	r3, [r7, #12]
        while (sum>>16){
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	0c1b      	lsrs	r3, r3, #16
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1f5      	bne.n	800238e <checksum+0x7e>
        }
        // build 1's complement:
        return( (uint16_t) sum ^ 0xFFFF);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	43db      	mvns	r3, r3
 80023a8:	b29b      	uxth	r3, r3
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3714      	adds	r7, #20
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bc80      	pop	{r7}
 80023b2:	4770      	bx	lr

080023b4 <init_ip_arp_udp_tcp>:

#endif

// This initializes the web server
// you must call this function once before you use any of the other functions:
void init_ip_arp_udp_tcp(uint8_t *mymac,uint8_t *myip,uint16_t port){
 80023b4:	b480      	push	{r7}
 80023b6:	b087      	sub	sp, #28
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	4613      	mov	r3, r2
 80023c0:	80fb      	strh	r3, [r7, #6]
        uint8_t i=0;
 80023c2:	2300      	movs	r3, #0
 80023c4:	75fb      	strb	r3, [r7, #23]
        wwwport_h=(port>>8)&0xff;
 80023c6:	88fb      	ldrh	r3, [r7, #6]
 80023c8:	0a1b      	lsrs	r3, r3, #8
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	b2da      	uxtb	r2, r3
 80023ce:	4b14      	ldr	r3, [pc, #80]	; (8002420 <init_ip_arp_udp_tcp+0x6c>)
 80023d0:	701a      	strb	r2, [r3, #0]
        wwwport_l=(port&0xff);
 80023d2:	88fb      	ldrh	r3, [r7, #6]
 80023d4:	b2da      	uxtb	r2, r3
 80023d6:	4b13      	ldr	r3, [pc, #76]	; (8002424 <init_ip_arp_udp_tcp+0x70>)
 80023d8:	701a      	strb	r2, [r3, #0]
        while(i<4){
 80023da:	e009      	b.n	80023f0 <init_ip_arp_udp_tcp+0x3c>
                ipaddr[i]=myip[i];
 80023dc:	7dfb      	ldrb	r3, [r7, #23]
 80023de:	68ba      	ldr	r2, [r7, #8]
 80023e0:	441a      	add	r2, r3
 80023e2:	7dfb      	ldrb	r3, [r7, #23]
 80023e4:	7811      	ldrb	r1, [r2, #0]
 80023e6:	4a10      	ldr	r2, [pc, #64]	; (8002428 <init_ip_arp_udp_tcp+0x74>)
 80023e8:	54d1      	strb	r1, [r2, r3]
                i++;
 80023ea:	7dfb      	ldrb	r3, [r7, #23]
 80023ec:	3301      	adds	r3, #1
 80023ee:	75fb      	strb	r3, [r7, #23]
        while(i<4){
 80023f0:	7dfb      	ldrb	r3, [r7, #23]
 80023f2:	2b03      	cmp	r3, #3
 80023f4:	d9f2      	bls.n	80023dc <init_ip_arp_udp_tcp+0x28>
        }
        i=0;
 80023f6:	2300      	movs	r3, #0
 80023f8:	75fb      	strb	r3, [r7, #23]
        while(i<6){
 80023fa:	e009      	b.n	8002410 <init_ip_arp_udp_tcp+0x5c>
                macaddr[i]=mymac[i];
 80023fc:	7dfb      	ldrb	r3, [r7, #23]
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	441a      	add	r2, r3
 8002402:	7dfb      	ldrb	r3, [r7, #23]
 8002404:	7811      	ldrb	r1, [r2, #0]
 8002406:	4a09      	ldr	r2, [pc, #36]	; (800242c <init_ip_arp_udp_tcp+0x78>)
 8002408:	54d1      	strb	r1, [r2, r3]
                i++;
 800240a:	7dfb      	ldrb	r3, [r7, #23]
 800240c:	3301      	adds	r3, #1
 800240e:	75fb      	strb	r3, [r7, #23]
        while(i<6){
 8002410:	7dfb      	ldrb	r3, [r7, #23]
 8002412:	2b05      	cmp	r3, #5
 8002414:	d9f2      	bls.n	80023fc <init_ip_arp_udp_tcp+0x48>
        }
}
 8002416:	bf00      	nop
 8002418:	371c      	adds	r7, #28
 800241a:	46bd      	mov	sp, r7
 800241c:	bc80      	pop	{r7}
 800241e:	4770      	bx	lr
 8002420:	200000dc 	.word	0x200000dc
 8002424:	20000018 	.word	0x20000018
 8002428:	20000104 	.word	0x20000104
 800242c:	20000368 	.word	0x20000368

08002430 <check_ip_message_is_from>:

#ifndef DISABLE_IP_STACK

uint8_t check_ip_message_is_from(uint8_t *buf,uint8_t *ip)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
        uint8_t i=0;
 800243a:	2300      	movs	r3, #0
 800243c:	73fb      	strb	r3, [r7, #15]
        while(i<4){
 800243e:	e010      	b.n	8002462 <check_ip_message_is_from+0x32>
                if(buf[IP_SRC_P+i]!=ip[i]){
 8002440:	7bfb      	ldrb	r3, [r7, #15]
 8002442:	331a      	adds	r3, #26
 8002444:	461a      	mov	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4413      	add	r3, r2
 800244a:	781a      	ldrb	r2, [r3, #0]
 800244c:	7bfb      	ldrb	r3, [r7, #15]
 800244e:	6839      	ldr	r1, [r7, #0]
 8002450:	440b      	add	r3, r1
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	429a      	cmp	r2, r3
 8002456:	d001      	beq.n	800245c <check_ip_message_is_from+0x2c>
                        return(0);
 8002458:	2300      	movs	r3, #0
 800245a:	e006      	b.n	800246a <check_ip_message_is_from+0x3a>
                }
                i++;
 800245c:	7bfb      	ldrb	r3, [r7, #15]
 800245e:	3301      	adds	r3, #1
 8002460:	73fb      	strb	r3, [r7, #15]
        while(i<4){
 8002462:	7bfb      	ldrb	r3, [r7, #15]
 8002464:	2b03      	cmp	r3, #3
 8002466:	d9eb      	bls.n	8002440 <check_ip_message_is_from+0x10>
        }
        return(1);
 8002468:	2301      	movs	r3, #1
}
 800246a:	4618      	mov	r0, r3
 800246c:	3714      	adds	r7, #20
 800246e:	46bd      	mov	sp, r7
 8002470:	bc80      	pop	{r7}
 8002472:	4770      	bx	lr

08002474 <eth_type_is_arp_and_my_ip>:

uint8_t eth_type_is_arp_and_my_ip(uint8_t *buf,uint16_t len){
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	460b      	mov	r3, r1
 800247e:	807b      	strh	r3, [r7, #2]
        uint8_t i=0;
 8002480:	2300      	movs	r3, #0
 8002482:	73fb      	strb	r3, [r7, #15]
        //  
        if (len<41){
 8002484:	887b      	ldrh	r3, [r7, #2]
 8002486:	2b28      	cmp	r3, #40	; 0x28
 8002488:	d801      	bhi.n	800248e <eth_type_is_arp_and_my_ip+0x1a>
                return(0);
 800248a:	2300      	movs	r3, #0
 800248c:	e01f      	b.n	80024ce <eth_type_is_arp_and_my_ip+0x5a>
        }
        if(buf[ETH_TYPE_H_P] != ETHTYPE_ARP_H_V || 
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	330c      	adds	r3, #12
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2b08      	cmp	r3, #8
 8002496:	d104      	bne.n	80024a2 <eth_type_is_arp_and_my_ip+0x2e>
           buf[ETH_TYPE_L_P] != ETHTYPE_ARP_L_V){
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	330d      	adds	r3, #13
 800249c:	781b      	ldrb	r3, [r3, #0]
        if(buf[ETH_TYPE_H_P] != ETHTYPE_ARP_H_V || 
 800249e:	2b06      	cmp	r3, #6
 80024a0:	d011      	beq.n	80024c6 <eth_type_is_arp_and_my_ip+0x52>
                return(0);
 80024a2:	2300      	movs	r3, #0
 80024a4:	e013      	b.n	80024ce <eth_type_is_arp_and_my_ip+0x5a>
        }
        while(i<4){
                if(buf[ETH_ARP_DST_IP_P+i] != ipaddr[i]){
 80024a6:	7bfb      	ldrb	r3, [r7, #15]
 80024a8:	3326      	adds	r3, #38	; 0x26
 80024aa:	461a      	mov	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4413      	add	r3, r2
 80024b0:	781a      	ldrb	r2, [r3, #0]
 80024b2:	7bfb      	ldrb	r3, [r7, #15]
 80024b4:	4908      	ldr	r1, [pc, #32]	; (80024d8 <eth_type_is_arp_and_my_ip+0x64>)
 80024b6:	5ccb      	ldrb	r3, [r1, r3]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d001      	beq.n	80024c0 <eth_type_is_arp_and_my_ip+0x4c>
                        return(0);
 80024bc:	2300      	movs	r3, #0
 80024be:	e006      	b.n	80024ce <eth_type_is_arp_and_my_ip+0x5a>
                }
                i++;
 80024c0:	7bfb      	ldrb	r3, [r7, #15]
 80024c2:	3301      	adds	r3, #1
 80024c4:	73fb      	strb	r3, [r7, #15]
        while(i<4){
 80024c6:	7bfb      	ldrb	r3, [r7, #15]
 80024c8:	2b03      	cmp	r3, #3
 80024ca:	d9ec      	bls.n	80024a6 <eth_type_is_arp_and_my_ip+0x32>
        }
        return(1);
 80024cc:	2301      	movs	r3, #1
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3714      	adds	r7, #20
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bc80      	pop	{r7}
 80024d6:	4770      	bx	lr
 80024d8:	20000104 	.word	0x20000104

080024dc <eth_type_is_ip_and_my_ip>:

uint8_t eth_type_is_ip_and_my_ip(uint8_t *buf,uint16_t len){
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	460b      	mov	r3, r1
 80024e6:	807b      	strh	r3, [r7, #2]
        uint8_t i=0;
 80024e8:	2300      	movs	r3, #0
 80024ea:	73fb      	strb	r3, [r7, #15]
        //eth+ip+udp header is 42
        if (len<42){
 80024ec:	887b      	ldrh	r3, [r7, #2]
 80024ee:	2b29      	cmp	r3, #41	; 0x29
 80024f0:	d801      	bhi.n	80024f6 <eth_type_is_ip_and_my_ip+0x1a>
                return(0);
 80024f2:	2300      	movs	r3, #0
 80024f4:	e026      	b.n	8002544 <eth_type_is_ip_and_my_ip+0x68>
        }
        if(buf[ETH_TYPE_H_P]!=ETHTYPE_IP_H_V || 
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	330c      	adds	r3, #12
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	2b08      	cmp	r3, #8
 80024fe:	d104      	bne.n	800250a <eth_type_is_ip_and_my_ip+0x2e>
           buf[ETH_TYPE_L_P]!=ETHTYPE_IP_L_V){
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	330d      	adds	r3, #13
 8002504:	781b      	ldrb	r3, [r3, #0]
        if(buf[ETH_TYPE_H_P]!=ETHTYPE_IP_H_V || 
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <eth_type_is_ip_and_my_ip+0x32>
                return(0);
 800250a:	2300      	movs	r3, #0
 800250c:	e01a      	b.n	8002544 <eth_type_is_ip_and_my_ip+0x68>
        }
        if (buf[IP_HEADER_LEN_VER_P]!=0x45){
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	330e      	adds	r3, #14
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	2b45      	cmp	r3, #69	; 0x45
 8002516:	d011      	beq.n	800253c <eth_type_is_ip_and_my_ip+0x60>
                // must be IP V4 and 20 byte header
                return(0);
 8002518:	2300      	movs	r3, #0
 800251a:	e013      	b.n	8002544 <eth_type_is_ip_and_my_ip+0x68>
        }
        while(i<4){
                if(buf[IP_DST_P+i]!=ipaddr[i]){
 800251c:	7bfb      	ldrb	r3, [r7, #15]
 800251e:	331e      	adds	r3, #30
 8002520:	461a      	mov	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4413      	add	r3, r2
 8002526:	781a      	ldrb	r2, [r3, #0]
 8002528:	7bfb      	ldrb	r3, [r7, #15]
 800252a:	4909      	ldr	r1, [pc, #36]	; (8002550 <eth_type_is_ip_and_my_ip+0x74>)
 800252c:	5ccb      	ldrb	r3, [r1, r3]
 800252e:	429a      	cmp	r2, r3
 8002530:	d001      	beq.n	8002536 <eth_type_is_ip_and_my_ip+0x5a>
                        return(0);
 8002532:	2300      	movs	r3, #0
 8002534:	e006      	b.n	8002544 <eth_type_is_ip_and_my_ip+0x68>
                }
                i++;
 8002536:	7bfb      	ldrb	r3, [r7, #15]
 8002538:	3301      	adds	r3, #1
 800253a:	73fb      	strb	r3, [r7, #15]
        while(i<4){
 800253c:	7bfb      	ldrb	r3, [r7, #15]
 800253e:	2b03      	cmp	r3, #3
 8002540:	d9ec      	bls.n	800251c <eth_type_is_ip_and_my_ip+0x40>
        }
        return(1);
 8002542:	2301      	movs	r3, #1
}
 8002544:	4618      	mov	r0, r3
 8002546:	3714      	adds	r7, #20
 8002548:	46bd      	mov	sp, r7
 800254a:	bc80      	pop	{r7}
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	20000104 	.word	0x20000104

08002554 <make_eth>:

// make a return eth header from a received eth packet
void make_eth(uint8_t *buf)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
        uint8_t i=0;
 800255c:	2300      	movs	r3, #0
 800255e:	73fb      	strb	r3, [r7, #15]
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
 8002560:	e015      	b.n	800258e <make_eth+0x3a>
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
 8002562:	7bfb      	ldrb	r3, [r7, #15]
 8002564:	3306      	adds	r3, #6
 8002566:	461a      	mov	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	441a      	add	r2, r3
 800256c:	7bfb      	ldrb	r3, [r7, #15]
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	440b      	add	r3, r1
 8002572:	7812      	ldrb	r2, [r2, #0]
 8002574:	701a      	strb	r2, [r3, #0]
                buf[ETH_SRC_MAC +i]=macaddr[i];
 8002576:	7bfa      	ldrb	r2, [r7, #15]
 8002578:	7bfb      	ldrb	r3, [r7, #15]
 800257a:	3306      	adds	r3, #6
 800257c:	4619      	mov	r1, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	440b      	add	r3, r1
 8002582:	4907      	ldr	r1, [pc, #28]	; (80025a0 <make_eth+0x4c>)
 8002584:	5c8a      	ldrb	r2, [r1, r2]
 8002586:	701a      	strb	r2, [r3, #0]
                i++;
 8002588:	7bfb      	ldrb	r3, [r7, #15]
 800258a:	3301      	adds	r3, #1
 800258c:	73fb      	strb	r3, [r7, #15]
        while(i<6){
 800258e:	7bfb      	ldrb	r3, [r7, #15]
 8002590:	2b05      	cmp	r3, #5
 8002592:	d9e6      	bls.n	8002562 <make_eth+0xe>
        }
}
 8002594:	bf00      	nop
 8002596:	3714      	adds	r7, #20
 8002598:	46bd      	mov	sp, r7
 800259a:	bc80      	pop	{r7}
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	20000368 	.word	0x20000368

080025a4 <fill_ip_hdr_checksum>:
		buf[ ETH_TYPE_L_P ] = ETHTYPE_IP_L_V;
}


void fill_ip_hdr_checksum(uint8_t *buf)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
        uint16_t ck;
        // clear the 2 byte checksum
        buf[IP_CHECKSUM_P]=0;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	3318      	adds	r3, #24
 80025b0:	2200      	movs	r2, #0
 80025b2:	701a      	strb	r2, [r3, #0]
        buf[IP_CHECKSUM_P+1]=0;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	3319      	adds	r3, #25
 80025b8:	2200      	movs	r2, #0
 80025ba:	701a      	strb	r2, [r3, #0]
        buf[IP_FLAGS_P]=0x40; // don't fragment
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	3314      	adds	r3, #20
 80025c0:	2240      	movs	r2, #64	; 0x40
 80025c2:	701a      	strb	r2, [r3, #0]
        buf[IP_FLAGS_P+1]=0;  // fragement offset
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	3315      	adds	r3, #21
 80025c8:	2200      	movs	r2, #0
 80025ca:	701a      	strb	r2, [r3, #0]
        buf[IP_TTL_P]=64; // ttl
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	3316      	adds	r3, #22
 80025d0:	2240      	movs	r2, #64	; 0x40
 80025d2:	701a      	strb	r2, [r3, #0]
        // calculate the checksum:
        ck=checksum(&buf[IP_P], IP_HEADER_LEN,0);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	330e      	adds	r3, #14
 80025d8:	2200      	movs	r2, #0
 80025da:	2114      	movs	r1, #20
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff fe97 	bl	8002310 <checksum>
 80025e2:	4603      	mov	r3, r0
 80025e4:	81fb      	strh	r3, [r7, #14]
        buf[IP_CHECKSUM_P]=ck>>8;
 80025e6:	89fb      	ldrh	r3, [r7, #14]
 80025e8:	0a1b      	lsrs	r3, r3, #8
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	3318      	adds	r3, #24
 80025f0:	b2d2      	uxtb	r2, r2
 80025f2:	701a      	strb	r2, [r3, #0]
        buf[IP_CHECKSUM_P+1]=ck & 0xff;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	3319      	adds	r3, #25
 80025f8:	89fa      	ldrh	r2, [r7, #14]
 80025fa:	b2d2      	uxtb	r2, r2
 80025fc:	701a      	strb	r2, [r3, #0]
}
 80025fe:	bf00      	nop
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
	...

08002608 <make_ip>:
        fill_ip_hdr_checksum(buf);
}


void make_ip(uint8_t *buf)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
        uint8_t i=0;
 8002610:	2300      	movs	r3, #0
 8002612:	73fb      	strb	r3, [r7, #15]
        while(i<4){
 8002614:	e017      	b.n	8002646 <make_ip+0x3e>
                buf[IP_DST_P+i]=buf[IP_SRC_P+i];
 8002616:	7bfb      	ldrb	r3, [r7, #15]
 8002618:	331a      	adds	r3, #26
 800261a:	461a      	mov	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	441a      	add	r2, r3
 8002620:	7bfb      	ldrb	r3, [r7, #15]
 8002622:	331e      	adds	r3, #30
 8002624:	4619      	mov	r1, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	440b      	add	r3, r1
 800262a:	7812      	ldrb	r2, [r2, #0]
 800262c:	701a      	strb	r2, [r3, #0]
                buf[IP_SRC_P+i]=ipaddr[i];
 800262e:	7bfa      	ldrb	r2, [r7, #15]
 8002630:	7bfb      	ldrb	r3, [r7, #15]
 8002632:	331a      	adds	r3, #26
 8002634:	4619      	mov	r1, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	440b      	add	r3, r1
 800263a:	4908      	ldr	r1, [pc, #32]	; (800265c <make_ip+0x54>)
 800263c:	5c8a      	ldrb	r2, [r1, r2]
 800263e:	701a      	strb	r2, [r3, #0]
                i++;
 8002640:	7bfb      	ldrb	r3, [r7, #15]
 8002642:	3301      	adds	r3, #1
 8002644:	73fb      	strb	r3, [r7, #15]
        while(i<4){
 8002646:	7bfb      	ldrb	r3, [r7, #15]
 8002648:	2b03      	cmp	r3, #3
 800264a:	d9e4      	bls.n	8002616 <make_ip+0xe>
        }
        fill_ip_hdr_checksum(buf);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f7ff ffa9 	bl	80025a4 <fill_ip_hdr_checksum>
}
 8002652:	bf00      	nop
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	20000104 	.word	0x20000104

08002660 <step_seq>:

// swap seq and ack number and count ack number up
void step_seq(uint8_t *buf,uint16_t rel_ack_num,uint8_t cp_seq)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	460b      	mov	r3, r1
 800266a:	807b      	strh	r3, [r7, #2]
 800266c:	4613      	mov	r3, r2
 800266e:	707b      	strb	r3, [r7, #1]
        uint8_t i;
        uint8_t tseq;
        i=4;
 8002670:	2304      	movs	r3, #4
 8002672:	73fb      	strb	r3, [r7, #15]
        // sequence numbers:
        // add the rel ack num to SEQACK
        while(i>0){
 8002674:	e02b      	b.n	80026ce <step_seq+0x6e>
                rel_ack_num=buf[TCP_SEQ_H_P+i-1]+rel_ack_num;
 8002676:	7bfb      	ldrb	r3, [r7, #15]
 8002678:	3325      	adds	r3, #37	; 0x25
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	4413      	add	r3, r2
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	b29a      	uxth	r2, r3
 8002682:	887b      	ldrh	r3, [r7, #2]
 8002684:	4413      	add	r3, r2
 8002686:	807b      	strh	r3, [r7, #2]
                tseq=buf[TCP_SEQACK_H_P+i-1];
 8002688:	7bfb      	ldrb	r3, [r7, #15]
 800268a:	3329      	adds	r3, #41	; 0x29
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	4413      	add	r3, r2
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	73bb      	strb	r3, [r7, #14]
                buf[TCP_SEQACK_H_P+i-1]=0xff&rel_ack_num;
 8002694:	7bfb      	ldrb	r3, [r7, #15]
 8002696:	3329      	adds	r3, #41	; 0x29
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	4413      	add	r3, r2
 800269c:	887a      	ldrh	r2, [r7, #2]
 800269e:	b2d2      	uxtb	r2, r2
 80026a0:	701a      	strb	r2, [r3, #0]
                if (cp_seq){
 80026a2:	787b      	ldrb	r3, [r7, #1]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d006      	beq.n	80026b6 <step_seq+0x56>
                        // copy the acknum sent to us into the sequence number
                        buf[TCP_SEQ_H_P+i-1]=tseq;
 80026a8:	7bfb      	ldrb	r3, [r7, #15]
 80026aa:	3325      	adds	r3, #37	; 0x25
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	4413      	add	r3, r2
 80026b0:	7bba      	ldrb	r2, [r7, #14]
 80026b2:	701a      	strb	r2, [r3, #0]
 80026b4:	e005      	b.n	80026c2 <step_seq+0x62>
                }else{
                        buf[TCP_SEQ_H_P+i-1]= 0; // some preset vallue
 80026b6:	7bfb      	ldrb	r3, [r7, #15]
 80026b8:	3325      	adds	r3, #37	; 0x25
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	4413      	add	r3, r2
 80026be:	2200      	movs	r2, #0
 80026c0:	701a      	strb	r2, [r3, #0]
                }
                rel_ack_num=rel_ack_num>>8;
 80026c2:	887b      	ldrh	r3, [r7, #2]
 80026c4:	0a1b      	lsrs	r3, r3, #8
 80026c6:	807b      	strh	r3, [r7, #2]
                i--;
 80026c8:	7bfb      	ldrb	r3, [r7, #15]
 80026ca:	3b01      	subs	r3, #1
 80026cc:	73fb      	strb	r3, [r7, #15]
        while(i>0){
 80026ce:	7bfb      	ldrb	r3, [r7, #15]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d1d0      	bne.n	8002676 <step_seq+0x16>
        }
}
 80026d4:	bf00      	nop
 80026d6:	3714      	adds	r7, #20
 80026d8:	46bd      	mov	sp, r7
 80026da:	bc80      	pop	{r7}
 80026dc:	4770      	bx	lr

080026de <make_tcphead>:
//
// After calling this function you can fill in the first data byte at TCP_OPTIONS_P+4
// If cp_seq=0 then an initial sequence number is used (should be use in synack)
// otherwise it is copied from the packet we received
void make_tcphead(uint8_t *buf,uint16_t rel_ack_num,uint8_t cp_seq)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b084      	sub	sp, #16
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
 80026e6:	460b      	mov	r3, r1
 80026e8:	807b      	strh	r3, [r7, #2]
 80026ea:	4613      	mov	r3, r2
 80026ec:	707b      	strb	r3, [r7, #1]
        uint8_t i;
        // copy ports:
        i=buf[TCP_DST_PORT_H_P];
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026f4:	73fb      	strb	r3, [r7, #15]
        buf[TCP_DST_PORT_H_P]=buf[TCP_SRC_PORT_H_P];
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	3324      	adds	r3, #36	; 0x24
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 8002700:	701a      	strb	r2, [r3, #0]
        buf[TCP_SRC_PORT_H_P]=i;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	3322      	adds	r3, #34	; 0x22
 8002706:	7bfa      	ldrb	r2, [r7, #15]
 8002708:	701a      	strb	r2, [r3, #0]
        //
        i=buf[TCP_DST_PORT_L_P];
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002710:	73fb      	strb	r3, [r7, #15]
        buf[TCP_DST_PORT_L_P]=buf[TCP_SRC_PORT_L_P];
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	3325      	adds	r3, #37	; 0x25
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 800271c:	701a      	strb	r2, [r3, #0]
        buf[TCP_SRC_PORT_L_P]=i;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	3323      	adds	r3, #35	; 0x23
 8002722:	7bfa      	ldrb	r2, [r7, #15]
 8002724:	701a      	strb	r2, [r3, #0]
        step_seq(buf,rel_ack_num,cp_seq);
 8002726:	787a      	ldrb	r2, [r7, #1]
 8002728:	887b      	ldrh	r3, [r7, #2]
 800272a:	4619      	mov	r1, r3
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f7ff ff97 	bl	8002660 <step_seq>
        // zero the checksum
        buf[TCP_CHECKSUM_H_P]=0;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	3332      	adds	r3, #50	; 0x32
 8002736:	2200      	movs	r2, #0
 8002738:	701a      	strb	r2, [r3, #0]
        buf[TCP_CHECKSUM_L_P]=0;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	3333      	adds	r3, #51	; 0x33
 800273e:	2200      	movs	r2, #0
 8002740:	701a      	strb	r2, [r3, #0]
        // no options:
        // 20 bytes:
        // The tcp header length is only a 4 bit field (the upper 4 bits).
        // It is calculated in units of 4 bytes.
        // E.g 20 bytes: 20/4=6 => 0x50=header len field
        buf[TCP_HEADER_LEN_P]=0x50;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	332e      	adds	r3, #46	; 0x2e
 8002746:	2250      	movs	r2, #80	; 0x50
 8002748:	701a      	strb	r2, [r3, #0]
}
 800274a:	bf00      	nop
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
	...

08002754 <make_arp_answer_from_request>:

void make_arp_answer_from_request(uint8_t *buf)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
        uint8_t i=0;
 800275c:	2300      	movs	r3, #0
 800275e:	73fb      	strb	r3, [r7, #15]
        //
        make_eth(buf);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f7ff fef7 	bl	8002554 <make_eth>
        buf[ETH_ARP_OPCODE_H_P]=ETH_ARP_OPCODE_REPLY_H_V;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	3314      	adds	r3, #20
 800276a:	2200      	movs	r2, #0
 800276c:	701a      	strb	r2, [r3, #0]
        buf[ETH_ARP_OPCODE_L_P]=ETH_ARP_OPCODE_REPLY_L_V;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	3315      	adds	r3, #21
 8002772:	2202      	movs	r2, #2
 8002774:	701a      	strb	r2, [r3, #0]
        // fill the mac addresses:
        while(i<6){
 8002776:	e017      	b.n	80027a8 <make_arp_answer_from_request+0x54>
                buf[ETH_ARP_DST_MAC_P+i]=buf[ETH_ARP_SRC_MAC_P+i];
 8002778:	7bfb      	ldrb	r3, [r7, #15]
 800277a:	3316      	adds	r3, #22
 800277c:	461a      	mov	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	441a      	add	r2, r3
 8002782:	7bfb      	ldrb	r3, [r7, #15]
 8002784:	3320      	adds	r3, #32
 8002786:	4619      	mov	r1, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	440b      	add	r3, r1
 800278c:	7812      	ldrb	r2, [r2, #0]
 800278e:	701a      	strb	r2, [r3, #0]
                buf[ETH_ARP_SRC_MAC_P+i]=macaddr[i];
 8002790:	7bfa      	ldrb	r2, [r7, #15]
 8002792:	7bfb      	ldrb	r3, [r7, #15]
 8002794:	3316      	adds	r3, #22
 8002796:	4619      	mov	r1, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	440b      	add	r3, r1
 800279c:	4917      	ldr	r1, [pc, #92]	; (80027fc <make_arp_answer_from_request+0xa8>)
 800279e:	5c8a      	ldrb	r2, [r1, r2]
 80027a0:	701a      	strb	r2, [r3, #0]
                i++;
 80027a2:	7bfb      	ldrb	r3, [r7, #15]
 80027a4:	3301      	adds	r3, #1
 80027a6:	73fb      	strb	r3, [r7, #15]
        while(i<6){
 80027a8:	7bfb      	ldrb	r3, [r7, #15]
 80027aa:	2b05      	cmp	r3, #5
 80027ac:	d9e4      	bls.n	8002778 <make_arp_answer_from_request+0x24>
        }
        i=0;
 80027ae:	2300      	movs	r3, #0
 80027b0:	73fb      	strb	r3, [r7, #15]
        while(i<4){
 80027b2:	e017      	b.n	80027e4 <make_arp_answer_from_request+0x90>
                buf[ETH_ARP_DST_IP_P+i]=buf[ETH_ARP_SRC_IP_P+i];
 80027b4:	7bfb      	ldrb	r3, [r7, #15]
 80027b6:	331c      	adds	r3, #28
 80027b8:	461a      	mov	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	441a      	add	r2, r3
 80027be:	7bfb      	ldrb	r3, [r7, #15]
 80027c0:	3326      	adds	r3, #38	; 0x26
 80027c2:	4619      	mov	r1, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	440b      	add	r3, r1
 80027c8:	7812      	ldrb	r2, [r2, #0]
 80027ca:	701a      	strb	r2, [r3, #0]
                buf[ETH_ARP_SRC_IP_P+i]=ipaddr[i];
 80027cc:	7bfa      	ldrb	r2, [r7, #15]
 80027ce:	7bfb      	ldrb	r3, [r7, #15]
 80027d0:	331c      	adds	r3, #28
 80027d2:	4619      	mov	r1, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	440b      	add	r3, r1
 80027d8:	4909      	ldr	r1, [pc, #36]	; (8002800 <make_arp_answer_from_request+0xac>)
 80027da:	5c8a      	ldrb	r2, [r1, r2]
 80027dc:	701a      	strb	r2, [r3, #0]
                i++;
 80027de:	7bfb      	ldrb	r3, [r7, #15]
 80027e0:	3301      	adds	r3, #1
 80027e2:	73fb      	strb	r3, [r7, #15]
        while(i<4){
 80027e4:	7bfb      	ldrb	r3, [r7, #15]
 80027e6:	2b03      	cmp	r3, #3
 80027e8:	d9e4      	bls.n	80027b4 <make_arp_answer_from_request+0x60>
        }
        // eth+arp is 42 bytes:
        enc28j60PacketSend(42,buf); 
 80027ea:	6879      	ldr	r1, [r7, #4]
 80027ec:	202a      	movs	r0, #42	; 0x2a
 80027ee:	f7ff fce7 	bl	80021c0 <enc28j60PacketSend>
}
 80027f2:	bf00      	nop
 80027f4:	3710      	adds	r7, #16
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	20000368 	.word	0x20000368
 8002800:	20000104 	.word	0x20000104

08002804 <make_echo_reply_from_request>:

void make_echo_reply_from_request(uint8_t *buf,uint16_t len)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	460b      	mov	r3, r1
 800280e:	807b      	strh	r3, [r7, #2]
        make_eth(buf);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f7ff fe9f 	bl	8002554 <make_eth>
        make_ip(buf);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f7ff fef6 	bl	8002608 <make_ip>
        buf[ICMP_TYPE_P]=ICMP_TYPE_ECHOREPLY_V;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	3322      	adds	r3, #34	; 0x22
 8002820:	2200      	movs	r2, #0
 8002822:	701a      	strb	r2, [r3, #0]
        // we changed only the icmp.type field from request(=8) to reply(=0).
        // we can therefore easily correct the checksum:
        if (buf[ICMP_CHECKSUM_P] > (0xff-0x08)){
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	3324      	adds	r3, #36	; 0x24
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	2bf7      	cmp	r3, #247	; 0xf7
 800282c:	d905      	bls.n	800283a <make_echo_reply_from_request+0x36>
                buf[ICMP_CHECKSUM_P+1]++;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	3325      	adds	r3, #37	; 0x25
 8002832:	781a      	ldrb	r2, [r3, #0]
 8002834:	3201      	adds	r2, #1
 8002836:	b2d2      	uxtb	r2, r2
 8002838:	701a      	strb	r2, [r3, #0]
        }
        buf[ICMP_CHECKSUM_P]+=0x08;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	3324      	adds	r3, #36	; 0x24
 800283e:	781a      	ldrb	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	3324      	adds	r3, #36	; 0x24
 8002844:	3208      	adds	r2, #8
 8002846:	b2d2      	uxtb	r2, r2
 8002848:	701a      	strb	r2, [r3, #0]
        //
        enc28j60PacketSend(len,buf);
 800284a:	887b      	ldrh	r3, [r7, #2]
 800284c:	6879      	ldr	r1, [r7, #4]
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff fcb6 	bl	80021c0 <enc28j60PacketSend>
}
 8002854:	bf00      	nop
 8002856:	3708      	adds	r7, #8
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <make_tcp_synack_from_syn>:
        enc28j60PacketSend(UDP_HEADER_LEN+IP_HEADER_LEN+ETH_HEADER_LEN+datalen,buf);
}

// this is for the server not the client:
void make_tcp_synack_from_syn(uint8_t *buf)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
        uint16_t ck;
        make_eth(buf);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f7ff fe75 	bl	8002554 <make_eth>
        // total length field in the IP header must be set:
        // 20 bytes IP + 24 bytes (20tcp+4tcp options)
        buf[IP_TOTLEN_H_P]=0;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	3310      	adds	r3, #16
 800286e:	2200      	movs	r2, #0
 8002870:	701a      	strb	r2, [r3, #0]
        buf[IP_TOTLEN_L_P]=IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+4;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	3311      	adds	r3, #17
 8002876:	222c      	movs	r2, #44	; 0x2c
 8002878:	701a      	strb	r2, [r3, #0]
        make_ip(buf);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f7ff fec4 	bl	8002608 <make_ip>
        buf[TCP_FLAGS_P]=TCP_FLAGS_SYNACK_V;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	332f      	adds	r3, #47	; 0x2f
 8002884:	2212      	movs	r2, #18
 8002886:	701a      	strb	r2, [r3, #0]
        make_tcphead(buf,1,0);
 8002888:	2200      	movs	r2, #0
 800288a:	2101      	movs	r1, #1
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f7ff ff26 	bl	80026de <make_tcphead>
        // put an inital seq number
        buf[TCP_SEQ_H_P+0]= 0;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	3326      	adds	r3, #38	; 0x26
 8002896:	2200      	movs	r2, #0
 8002898:	701a      	strb	r2, [r3, #0]
        buf[TCP_SEQ_H_P+1]= 0;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	3327      	adds	r3, #39	; 0x27
 800289e:	2200      	movs	r2, #0
 80028a0:	701a      	strb	r2, [r3, #0]
        // we step only the second byte, this allows us to send packts 
        // with 255 bytes, 512  or 765 (step by 3) without generating
        // overlapping numbers.
        buf[TCP_SEQ_H_P+2]= seqnum; 
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	3328      	adds	r3, #40	; 0x28
 80028a6:	4a23      	ldr	r2, [pc, #140]	; (8002934 <make_tcp_synack_from_syn+0xd8>)
 80028a8:	7812      	ldrb	r2, [r2, #0]
 80028aa:	701a      	strb	r2, [r3, #0]
        buf[TCP_SEQ_H_P+3]= 0;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	3329      	adds	r3, #41	; 0x29
 80028b0:	2200      	movs	r2, #0
 80028b2:	701a      	strb	r2, [r3, #0]
        // step the inititial seq num by something we will not use
        // during this tcp session:
        seqnum+=3;
 80028b4:	4b1f      	ldr	r3, [pc, #124]	; (8002934 <make_tcp_synack_from_syn+0xd8>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	3303      	adds	r3, #3
 80028ba:	b2da      	uxtb	r2, r3
 80028bc:	4b1d      	ldr	r3, [pc, #116]	; (8002934 <make_tcp_synack_from_syn+0xd8>)
 80028be:	701a      	strb	r2, [r3, #0]
        // add an mss options field with MSS to 1280:
        // 1280 in hex is 0x500
        buf[TCP_OPTIONS_P]=2;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	3336      	adds	r3, #54	; 0x36
 80028c4:	2202      	movs	r2, #2
 80028c6:	701a      	strb	r2, [r3, #0]
        buf[TCP_OPTIONS_P+1]=4;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3337      	adds	r3, #55	; 0x37
 80028cc:	2204      	movs	r2, #4
 80028ce:	701a      	strb	r2, [r3, #0]
        buf[TCP_OPTIONS_P+2]=0x05;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	3338      	adds	r3, #56	; 0x38
 80028d4:	2205      	movs	r2, #5
 80028d6:	701a      	strb	r2, [r3, #0]
        buf[TCP_OPTIONS_P+3]=0x0;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	3339      	adds	r3, #57	; 0x39
 80028dc:	2200      	movs	r2, #0
 80028de:	701a      	strb	r2, [r3, #0]
        // The tcp header length is only a 4 bit field (the upper 4 bits).
        // It is calculated in units of 4 bytes.
        // E.g 24 bytes: 24/4=6 => 0x60=header len field
        buf[TCP_HEADER_LEN_P]=0x60;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	332e      	adds	r3, #46	; 0x2e
 80028e4:	2260      	movs	r2, #96	; 0x60
 80028e6:	701a      	strb	r2, [r3, #0]
        // here we must just be sure that the web browser contacting us
        // will send only one get packet
        buf[TCP_WIN_SIZE]=0x5; // 1400=0x578
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	3330      	adds	r3, #48	; 0x30
 80028ec:	2205      	movs	r2, #5
 80028ee:	701a      	strb	r2, [r3, #0]
        buf[TCP_WIN_SIZE+1]=0x78;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	3331      	adds	r3, #49	; 0x31
 80028f4:	2278      	movs	r2, #120	; 0x78
 80028f6:	701a      	strb	r2, [r3, #0]
        // calculate the checksum, len=8 (start from ip.src) + TCP_HEADER_LEN_PLAIN + 4 (one option: mss)
        ck=checksum(&buf[IP_SRC_P], 8+TCP_HEADER_LEN_PLAIN+4,2);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	331a      	adds	r3, #26
 80028fc:	2202      	movs	r2, #2
 80028fe:	2120      	movs	r1, #32
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff fd05 	bl	8002310 <checksum>
 8002906:	4603      	mov	r3, r0
 8002908:	81fb      	strh	r3, [r7, #14]
        buf[TCP_CHECKSUM_H_P]=ck>>8;
 800290a:	89fb      	ldrh	r3, [r7, #14]
 800290c:	0a1b      	lsrs	r3, r3, #8
 800290e:	b29a      	uxth	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	3332      	adds	r3, #50	; 0x32
 8002914:	b2d2      	uxtb	r2, r2
 8002916:	701a      	strb	r2, [r3, #0]
        buf[TCP_CHECKSUM_L_P]=ck& 0xff;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	3333      	adds	r3, #51	; 0x33
 800291c:	89fa      	ldrh	r2, [r7, #14]
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	701a      	strb	r2, [r3, #0]
        // add 4 for option mss:
        enc28j60PacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+4+ETH_HEADER_LEN,buf);
 8002922:	6879      	ldr	r1, [r7, #4]
 8002924:	203a      	movs	r0, #58	; 0x3a
 8002926:	f7ff fc4b 	bl	80021c0 <enc28j60PacketSend>
}
 800292a:	bf00      	nop
 800292c:	3710      	adds	r7, #16
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	2000001d 	.word	0x2000001d

08002938 <get_tcp_data_len>:

// do some basic length calculations and store the result in static variables
uint16_t get_tcp_data_len(uint8_t *buf)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
        int16_t i;
        i=(((int16_t)buf[IP_TOTLEN_H_P])<<8)|(buf[IP_TOTLEN_L_P]&0xff);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3310      	adds	r3, #16
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	021b      	lsls	r3, r3, #8
 8002948:	b21a      	sxth	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	3311      	adds	r3, #17
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	b21b      	sxth	r3, r3
 8002952:	4313      	orrs	r3, r2
 8002954:	81fb      	strh	r3, [r7, #14]
        i-=IP_HEADER_LEN;
 8002956:	89fb      	ldrh	r3, [r7, #14]
 8002958:	3b14      	subs	r3, #20
 800295a:	b29b      	uxth	r3, r3
 800295c:	81fb      	strh	r3, [r7, #14]
        i-=(buf[TCP_HEADER_LEN_P]>>4)*4; // generate len in bytes;
 800295e:	89fa      	ldrh	r2, [r7, #14]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	332e      	adds	r3, #46	; 0x2e
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	091b      	lsrs	r3, r3, #4
 8002968:	b2db      	uxtb	r3, r3
 800296a:	b29b      	uxth	r3, r3
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	b29b      	uxth	r3, r3
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	b29b      	uxth	r3, r3
 8002974:	81fb      	strh	r3, [r7, #14]
        if (i<=0){
 8002976:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800297a:	2b00      	cmp	r3, #0
 800297c:	dc01      	bgt.n	8002982 <get_tcp_data_len+0x4a>
                i=0;
 800297e:	2300      	movs	r3, #0
 8002980:	81fb      	strh	r3, [r7, #14]
        }
        return((uint16_t)i);
 8002982:	89fb      	ldrh	r3, [r7, #14]
}
 8002984:	4618      	mov	r0, r3
 8002986:	3714      	adds	r7, #20
 8002988:	46bd      	mov	sp, r7
 800298a:	bc80      	pop	{r7}
 800298c:	4770      	bx	lr

0800298e <fill_tcp_data_len>:
}
*/

// fill a binary string of len data into the tcp packet
uint16_t fill_tcp_data_len(uint8_t *buf,uint16_t pos, const char *s, uint16_t len)
{
 800298e:	b480      	push	{r7}
 8002990:	b085      	sub	sp, #20
 8002992:	af00      	add	r7, sp, #0
 8002994:	60f8      	str	r0, [r7, #12]
 8002996:	607a      	str	r2, [r7, #4]
 8002998:	461a      	mov	r2, r3
 800299a:	460b      	mov	r3, r1
 800299c:	817b      	strh	r3, [r7, #10]
 800299e:	4613      	mov	r3, r2
 80029a0:	813b      	strh	r3, [r7, #8]
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while (len) {
 80029a2:	e010      	b.n	80029c6 <fill_tcp_data_len+0x38>
                buf[TCP_CHECKSUM_L_P+3+pos]=*s;
 80029a4:	897b      	ldrh	r3, [r7, #10]
 80029a6:	3336      	adds	r3, #54	; 0x36
 80029a8:	461a      	mov	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	4413      	add	r3, r2
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	7812      	ldrb	r2, [r2, #0]
 80029b2:	701a      	strb	r2, [r3, #0]
                pos++;
 80029b4:	897b      	ldrh	r3, [r7, #10]
 80029b6:	3301      	adds	r3, #1
 80029b8:	817b      	strh	r3, [r7, #10]
                s++;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	3301      	adds	r3, #1
 80029be:	607b      	str	r3, [r7, #4]
                len--;
 80029c0:	893b      	ldrh	r3, [r7, #8]
 80029c2:	3b01      	subs	r3, #1
 80029c4:	813b      	strh	r3, [r7, #8]
        while (len) {
 80029c6:	893b      	ldrh	r3, [r7, #8]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1eb      	bne.n	80029a4 <fill_tcp_data_len+0x16>
        }
        return(pos);
 80029cc:	897b      	ldrh	r3, [r7, #10]
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3714      	adds	r7, #20
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr

080029d8 <fill_tcp_data>:

// fill in tcp data at position pos. pos=0 means start of
// tcp data. Returns the position at which the string after
// this string could be filled.
uint16_t fill_tcp_data(uint8_t *buf,uint16_t pos, const char *s)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	460b      	mov	r3, r1
 80029e2:	607a      	str	r2, [r7, #4]
 80029e4:	817b      	strh	r3, [r7, #10]
        return(fill_tcp_data_len(buf,pos,(char*)s,strlen(s)));
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f7fd fbb0 	bl	800014c <strlen>
 80029ec:	4603      	mov	r3, r0
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	8979      	ldrh	r1, [r7, #10]
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	f7ff ffca 	bl	800298e <fill_tcp_data_len>
 80029fa:	4603      	mov	r3, r0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3710      	adds	r7, #16
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <make_tcp_ack_from_any>:

// Make just an ack packet with no tcp data inside
// This will modify the eth/ip/tcp header 
void make_tcp_ack_from_any(uint8_t *buf,int16_t datlentoack,uint8_t addflags)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	807b      	strh	r3, [r7, #2]
 8002a10:	4613      	mov	r3, r2
 8002a12:	707b      	strb	r3, [r7, #1]
        uint16_t j;
        make_eth(buf);
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f7ff fd9d 	bl	8002554 <make_eth>
        // fill the header:
        buf[TCP_FLAGS_P]=TCP_FLAGS_ACK_V|addflags;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	332f      	adds	r3, #47	; 0x2f
 8002a1e:	787a      	ldrb	r2, [r7, #1]
 8002a20:	f042 0210 	orr.w	r2, r2, #16
 8002a24:	b2d2      	uxtb	r2, r2
 8002a26:	701a      	strb	r2, [r3, #0]
        if (addflags==TCP_FLAGS_RST_V){
 8002a28:	787b      	ldrb	r3, [r7, #1]
 8002a2a:	2b04      	cmp	r3, #4
 8002a2c:	d106      	bne.n	8002a3c <make_tcp_ack_from_any+0x38>
                make_tcphead(buf,datlentoack,1); 
 8002a2e:	887b      	ldrh	r3, [r7, #2]
 8002a30:	2201      	movs	r2, #1
 8002a32:	4619      	mov	r1, r3
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f7ff fe52 	bl	80026de <make_tcphead>
 8002a3a:	e00b      	b.n	8002a54 <make_tcp_ack_from_any+0x50>
        } else {
                if (datlentoack==0){
 8002a3c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d101      	bne.n	8002a48 <make_tcp_ack_from_any+0x44>
                        // if there is no data then we must still acknoledge one packet
                        datlentoack = 1;
 8002a44:	2301      	movs	r3, #1
 8002a46:	807b      	strh	r3, [r7, #2]
                }
                make_tcphead(buf,datlentoack,1); // no options
 8002a48:	887b      	ldrh	r3, [r7, #2]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f7ff fe45 	bl	80026de <make_tcphead>
        }
        // total length field in the IP header must be set:
        // 20 bytes IP + 20 bytes tcp (when no options) 
        j=IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN;
 8002a54:	2328      	movs	r3, #40	; 0x28
 8002a56:	81fb      	strh	r3, [r7, #14]
        buf[IP_TOTLEN_H_P]=j>>8;
 8002a58:	89fb      	ldrh	r3, [r7, #14]
 8002a5a:	0a1b      	lsrs	r3, r3, #8
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	3310      	adds	r3, #16
 8002a62:	b2d2      	uxtb	r2, r2
 8002a64:	701a      	strb	r2, [r3, #0]
        buf[IP_TOTLEN_L_P]=j& 0xff;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	3311      	adds	r3, #17
 8002a6a:	89fa      	ldrh	r2, [r7, #14]
 8002a6c:	b2d2      	uxtb	r2, r2
 8002a6e:	701a      	strb	r2, [r3, #0]
        make_ip(buf);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f7ff fdc9 	bl	8002608 <make_ip>
        // use a low window size otherwise we have to have
        // timers and can not just react on every packet.
        buf[TCP_WIN_SIZE]=0x4; // 1024=0x400
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	3330      	adds	r3, #48	; 0x30
 8002a7a:	2204      	movs	r2, #4
 8002a7c:	701a      	strb	r2, [r3, #0]
        buf[TCP_WIN_SIZE+1]=0x0;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	3331      	adds	r3, #49	; 0x31
 8002a82:	2200      	movs	r2, #0
 8002a84:	701a      	strb	r2, [r3, #0]
        // calculate the checksum, len=8 (start from ip.src) + TCP_HEADER_LEN_PLAIN + data len
        j=checksum(&buf[IP_SRC_P], 8+TCP_HEADER_LEN_PLAIN,2);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	331a      	adds	r3, #26
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	211c      	movs	r1, #28
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7ff fc3e 	bl	8002310 <checksum>
 8002a94:	4603      	mov	r3, r0
 8002a96:	81fb      	strh	r3, [r7, #14]
        buf[TCP_CHECKSUM_H_P]=j>>8;
 8002a98:	89fb      	ldrh	r3, [r7, #14]
 8002a9a:	0a1b      	lsrs	r3, r3, #8
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	3332      	adds	r3, #50	; 0x32
 8002aa2:	b2d2      	uxtb	r2, r2
 8002aa4:	701a      	strb	r2, [r3, #0]
        buf[TCP_CHECKSUM_L_P]=j& 0xff;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	3333      	adds	r3, #51	; 0x33
 8002aaa:	89fa      	ldrh	r2, [r7, #14]
 8002aac:	b2d2      	uxtb	r2, r2
 8002aae:	701a      	strb	r2, [r3, #0]
        enc28j60PacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+ETH_HEADER_LEN,buf);
 8002ab0:	6879      	ldr	r1, [r7, #4]
 8002ab2:	2036      	movs	r0, #54	; 0x36
 8002ab4:	f7ff fb84 	bl	80021c0 <enc28j60PacketSend>
}
 8002ab8:	bf00      	nop
 8002aba:	3710      	adds	r7, #16
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <make_tcp_ack_with_data_noflags>:
// You can use this function only immediately after make_tcp_ack_from_any
// This is because this function will NOT modify the eth/ip/tcp header except for
// length and checksum
// You must set TCP_FLAGS before calling this
void make_tcp_ack_with_data_noflags(uint8_t *buf,uint16_t dlen)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	460b      	mov	r3, r1
 8002aca:	807b      	strh	r3, [r7, #2]
        uint16_t j;
        // total length field in the IP header must be set:
        // 20 bytes IP + 20 bytes tcp (when no options) + len of data
        j=IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+dlen;
 8002acc:	887b      	ldrh	r3, [r7, #2]
 8002ace:	3328      	adds	r3, #40	; 0x28
 8002ad0:	81fb      	strh	r3, [r7, #14]
        buf[IP_TOTLEN_H_P]=j>>8;
 8002ad2:	89fb      	ldrh	r3, [r7, #14]
 8002ad4:	0a1b      	lsrs	r3, r3, #8
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	3310      	adds	r3, #16
 8002adc:	b2d2      	uxtb	r2, r2
 8002ade:	701a      	strb	r2, [r3, #0]
        buf[IP_TOTLEN_L_P]=j& 0xff;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	3311      	adds	r3, #17
 8002ae4:	89fa      	ldrh	r2, [r7, #14]
 8002ae6:	b2d2      	uxtb	r2, r2
 8002ae8:	701a      	strb	r2, [r3, #0]
        fill_ip_hdr_checksum(buf);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f7ff fd5a 	bl	80025a4 <fill_ip_hdr_checksum>
        // zero the checksum
        buf[TCP_CHECKSUM_H_P]=0;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	3332      	adds	r3, #50	; 0x32
 8002af4:	2200      	movs	r2, #0
 8002af6:	701a      	strb	r2, [r3, #0]
        buf[TCP_CHECKSUM_L_P]=0;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	3333      	adds	r3, #51	; 0x33
 8002afc:	2200      	movs	r2, #0
 8002afe:	701a      	strb	r2, [r3, #0]
        // calculate the checksum, len=8 (start from ip.src) + TCP_HEADER_LEN_PLAIN + data len
        j=checksum(&buf[IP_SRC_P], 8+TCP_HEADER_LEN_PLAIN+dlen,2);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f103 001a 	add.w	r0, r3, #26
 8002b06:	887b      	ldrh	r3, [r7, #2]
 8002b08:	331c      	adds	r3, #28
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	2202      	movs	r2, #2
 8002b0e:	4619      	mov	r1, r3
 8002b10:	f7ff fbfe 	bl	8002310 <checksum>
 8002b14:	4603      	mov	r3, r0
 8002b16:	81fb      	strh	r3, [r7, #14]
        buf[TCP_CHECKSUM_H_P]=j>>8;
 8002b18:	89fb      	ldrh	r3, [r7, #14]
 8002b1a:	0a1b      	lsrs	r3, r3, #8
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	3332      	adds	r3, #50	; 0x32
 8002b22:	b2d2      	uxtb	r2, r2
 8002b24:	701a      	strb	r2, [r3, #0]
        buf[TCP_CHECKSUM_L_P]=j& 0xff;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	3333      	adds	r3, #51	; 0x33
 8002b2a:	89fa      	ldrh	r2, [r7, #14]
 8002b2c:	b2d2      	uxtb	r2, r2
 8002b2e:	701a      	strb	r2, [r3, #0]
        enc28j60PacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+dlen+ETH_HEADER_LEN,buf);
 8002b30:	887b      	ldrh	r3, [r7, #2]
 8002b32:	3336      	adds	r3, #54	; 0x36
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	6879      	ldr	r1, [r7, #4]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7ff fb41 	bl	80021c0 <enc28j60PacketSend>
}
 8002b3e:	bf00      	nop
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
	...

08002b48 <www_server_reply>:
// dlen is the amount of tcp data (http data) we send in this packet
// You can use this function only immediately after make_tcp_ack_from_any
// This is because this function will NOT modify the eth/ip/tcp header except for
// length and checksum
void www_server_reply(uint8_t *buf,uint16_t dlen)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	460b      	mov	r3, r1
 8002b52:	807b      	strh	r3, [r7, #2]
        make_tcp_ack_from_any(buf,info_data_len,0); // send ack for http get
 8002b54:	4b0a      	ldr	r3, [pc, #40]	; (8002b80 <www_server_reply+0x38>)
 8002b56:	881b      	ldrh	r3, [r3, #0]
 8002b58:	b21b      	sxth	r3, r3
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f7ff ff50 	bl	8002a04 <make_tcp_ack_from_any>
        // fill the header:
        // This code requires that we send only one data packet
        // because we keep no state information. We must therefore set
        // the fin here:
        buf[TCP_FLAGS_P]=TCP_FLAGS_ACK_V|TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	332f      	adds	r3, #47	; 0x2f
 8002b68:	2219      	movs	r2, #25
 8002b6a:	701a      	strb	r2, [r3, #0]
        make_tcp_ack_with_data_noflags(buf,dlen); // send data
 8002b6c:	887b      	ldrh	r3, [r7, #2]
 8002b6e:	4619      	mov	r1, r3
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f7ff ffa5 	bl	8002ac0 <make_tcp_ack_with_data_noflags>
}
 8002b76:	bf00      	nop
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	20000108 	.word	0x20000108

08002b84 <fill_buf_p>:

#if defined (NTP_client) ||  defined (WOL_client) || defined (UDP_client) || defined (TCP_client) || defined (PING_client)
// fill buffer with a prog-mem string - CHANGED TO NON PROGMEM!
void fill_buf_p(uint8_t *buf,uint16_t len, const char *s)
{   
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	607a      	str	r2, [r7, #4]
 8002b90:	817b      	strh	r3, [r7, #10]
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while (len) {
 8002b92:	e00c      	b.n	8002bae <fill_buf_p+0x2a>
                *buf=*s;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	781a      	ldrb	r2, [r3, #0]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	701a      	strb	r2, [r3, #0]
                buf++;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	60fb      	str	r3, [r7, #12]
                s++;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	607b      	str	r3, [r7, #4]
                len--;
 8002ba8:	897b      	ldrh	r3, [r7, #10]
 8002baa:	3b01      	subs	r3, #1
 8002bac:	817b      	strh	r3, [r7, #10]
        while (len) {
 8002bae:	897b      	ldrh	r3, [r7, #10]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d1ef      	bne.n	8002b94 <fill_buf_p+0x10>
        } 

}
 8002bb4:	bf00      	nop
 8002bb6:	3714      	adds	r7, #20
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bc80      	pop	{r7}
 8002bbc:	4770      	bx	lr
	...

08002bc0 <send_udp_prepare>:
// 2) You just allocate a large enough buffer for you data and you call send_udp and nothing else
// needs to be done.
//
// send_udp sends via gwip, you must call client_set_gwip at startup
void send_udp_prepare(uint8_t *buf,uint16_t sport, uint8_t *dip, uint16_t dport)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b086      	sub	sp, #24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	607a      	str	r2, [r7, #4]
 8002bca:	461a      	mov	r2, r3
 8002bcc:	460b      	mov	r3, r1
 8002bce:	817b      	strh	r3, [r7, #10]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	813b      	strh	r3, [r7, #8]
        uint8_t i=0;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	75fb      	strb	r3, [r7, #23]
        while(i<6){
 8002bd8:	e012      	b.n	8002c00 <send_udp_prepare+0x40>
                buf[ETH_DST_MAC +i]=gwmacaddr[i]; // gw mac in local lan or host mac
 8002bda:	7dfa      	ldrb	r2, [r7, #23]
 8002bdc:	7dfb      	ldrb	r3, [r7, #23]
 8002bde:	68f9      	ldr	r1, [r7, #12]
 8002be0:	440b      	add	r3, r1
 8002be2:	4936      	ldr	r1, [pc, #216]	; (8002cbc <send_udp_prepare+0xfc>)
 8002be4:	5c8a      	ldrb	r2, [r1, r2]
 8002be6:	701a      	strb	r2, [r3, #0]
                buf[ETH_SRC_MAC +i]=macaddr[i];
 8002be8:	7dfa      	ldrb	r2, [r7, #23]
 8002bea:	7dfb      	ldrb	r3, [r7, #23]
 8002bec:	3306      	adds	r3, #6
 8002bee:	4619      	mov	r1, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	440b      	add	r3, r1
 8002bf4:	4932      	ldr	r1, [pc, #200]	; (8002cc0 <send_udp_prepare+0x100>)
 8002bf6:	5c8a      	ldrb	r2, [r1, r2]
 8002bf8:	701a      	strb	r2, [r3, #0]
                i++;
 8002bfa:	7dfb      	ldrb	r3, [r7, #23]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	75fb      	strb	r3, [r7, #23]
        while(i<6){
 8002c00:	7dfb      	ldrb	r3, [r7, #23]
 8002c02:	2b05      	cmp	r3, #5
 8002c04:	d9e9      	bls.n	8002bda <send_udp_prepare+0x1a>
        }
        buf[ETH_TYPE_H_P] = ETHTYPE_IP_H_V;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	330c      	adds	r3, #12
 8002c0a:	2208      	movs	r2, #8
 8002c0c:	701a      	strb	r2, [r3, #0]
        buf[ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	330d      	adds	r3, #13
 8002c12:	2200      	movs	r2, #0
 8002c14:	701a      	strb	r2, [r3, #0]
        fill_buf_p(&buf[IP_P],9,iphdr);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	330e      	adds	r3, #14
 8002c1a:	4a2a      	ldr	r2, [pc, #168]	; (8002cc4 <send_udp_prepare+0x104>)
 8002c1c:	2109      	movs	r1, #9
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7ff ffb0 	bl	8002b84 <fill_buf_p>
        // total length field in the IP header must be set:
        buf[IP_TOTLEN_H_P]=0;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	3310      	adds	r3, #16
 8002c28:	2200      	movs	r2, #0
 8002c2a:	701a      	strb	r2, [r3, #0]
        // done in transmit: buf[IP_TOTLEN_L_P]=IP_HEADER_LEN+UDP_HEADER_LEN+datalen;
        buf[IP_PROTO_P]=IP_PROTO_UDP_V;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	3317      	adds	r3, #23
 8002c30:	2211      	movs	r2, #17
 8002c32:	701a      	strb	r2, [r3, #0]
        i=0;
 8002c34:	2300      	movs	r3, #0
 8002c36:	75fb      	strb	r3, [r7, #23]
        while(i<4){
 8002c38:	e015      	b.n	8002c66 <send_udp_prepare+0xa6>
                buf[IP_DST_P+i]=dip[i];
 8002c3a:	7dfb      	ldrb	r3, [r7, #23]
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	441a      	add	r2, r3
 8002c40:	7dfb      	ldrb	r3, [r7, #23]
 8002c42:	331e      	adds	r3, #30
 8002c44:	4619      	mov	r1, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	440b      	add	r3, r1
 8002c4a:	7812      	ldrb	r2, [r2, #0]
 8002c4c:	701a      	strb	r2, [r3, #0]
                buf[IP_SRC_P+i]=ipaddr[i];
 8002c4e:	7dfa      	ldrb	r2, [r7, #23]
 8002c50:	7dfb      	ldrb	r3, [r7, #23]
 8002c52:	331a      	adds	r3, #26
 8002c54:	4619      	mov	r1, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	440b      	add	r3, r1
 8002c5a:	491b      	ldr	r1, [pc, #108]	; (8002cc8 <send_udp_prepare+0x108>)
 8002c5c:	5c8a      	ldrb	r2, [r1, r2]
 8002c5e:	701a      	strb	r2, [r3, #0]
                i++;
 8002c60:	7dfb      	ldrb	r3, [r7, #23]
 8002c62:	3301      	adds	r3, #1
 8002c64:	75fb      	strb	r3, [r7, #23]
        while(i<4){
 8002c66:	7dfb      	ldrb	r3, [r7, #23]
 8002c68:	2b03      	cmp	r3, #3
 8002c6a:	d9e6      	bls.n	8002c3a <send_udp_prepare+0x7a>
        }
        // done in transmit: fill_ip_hdr_checksum(buf);
        buf[UDP_DST_PORT_H_P]=(dport>>8);
 8002c6c:	893b      	ldrh	r3, [r7, #8]
 8002c6e:	0a1b      	lsrs	r3, r3, #8
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	3324      	adds	r3, #36	; 0x24
 8002c76:	b2d2      	uxtb	r2, r2
 8002c78:	701a      	strb	r2, [r3, #0]
        buf[UDP_DST_PORT_L_P]=0xff&dport; 
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	3325      	adds	r3, #37	; 0x25
 8002c7e:	893a      	ldrh	r2, [r7, #8]
 8002c80:	b2d2      	uxtb	r2, r2
 8002c82:	701a      	strb	r2, [r3, #0]
        buf[UDP_SRC_PORT_H_P]=(sport>>8);
 8002c84:	897b      	ldrh	r3, [r7, #10]
 8002c86:	0a1b      	lsrs	r3, r3, #8
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	3322      	adds	r3, #34	; 0x22
 8002c8e:	b2d2      	uxtb	r2, r2
 8002c90:	701a      	strb	r2, [r3, #0]
        buf[UDP_SRC_PORT_L_P]=sport&0xff; 
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	3323      	adds	r3, #35	; 0x23
 8002c96:	897a      	ldrh	r2, [r7, #10]
 8002c98:	b2d2      	uxtb	r2, r2
 8002c9a:	701a      	strb	r2, [r3, #0]
        buf[UDP_LEN_H_P]=0;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	3326      	adds	r3, #38	; 0x26
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	701a      	strb	r2, [r3, #0]
        // done in transmit: buf[UDP_LEN_L_P]=UDP_HEADER_LEN+datalen;
        // zero the checksum
        buf[UDP_CHECKSUM_H_P]=0;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	3328      	adds	r3, #40	; 0x28
 8002ca8:	2200      	movs	r2, #0
 8002caa:	701a      	strb	r2, [r3, #0]
        buf[UDP_CHECKSUM_L_P]=0;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	3329      	adds	r3, #41	; 0x29
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	701a      	strb	r2, [r3, #0]
        // copy the data:
        // now starting with the first byte at buf[UDP_DATA_P]
}
 8002cb4:	bf00      	nop
 8002cb6:	3718      	adds	r7, #24
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	200000f8 	.word	0x200000f8
 8002cc0:	20000368 	.word	0x20000368
 8002cc4:	0800415c 	.word	0x0800415c
 8002cc8:	20000104 	.word	0x20000104

08002ccc <send_udp_transmit>:

void send_udp_transmit(uint8_t *buf,uint16_t datalen)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	807b      	strh	r3, [r7, #2]
        uint16_t ck;
        buf[IP_TOTLEN_H_P]=(IP_HEADER_LEN+UDP_HEADER_LEN+datalen) >> 8;
 8002cd8:	887b      	ldrh	r3, [r7, #2]
 8002cda:	331c      	adds	r3, #28
 8002cdc:	121a      	asrs	r2, r3, #8
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	3310      	adds	r3, #16
 8002ce2:	b2d2      	uxtb	r2, r2
 8002ce4:	701a      	strb	r2, [r3, #0]
        buf[IP_TOTLEN_L_P]=(IP_HEADER_LEN+UDP_HEADER_LEN+datalen) & 0xff;
 8002ce6:	887b      	ldrh	r3, [r7, #2]
 8002ce8:	b2da      	uxtb	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	3311      	adds	r3, #17
 8002cee:	321c      	adds	r2, #28
 8002cf0:	b2d2      	uxtb	r2, r2
 8002cf2:	701a      	strb	r2, [r3, #0]
        fill_ip_hdr_checksum(buf);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f7ff fc55 	bl	80025a4 <fill_ip_hdr_checksum>
        //buf[UDP_LEN_L_P]=UDP_HEADER_LEN+datalen;
        buf[UDP_LEN_H_P]=(UDP_HEADER_LEN+datalen) >>8;
 8002cfa:	887b      	ldrh	r3, [r7, #2]
 8002cfc:	3308      	adds	r3, #8
 8002cfe:	121a      	asrs	r2, r3, #8
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	3326      	adds	r3, #38	; 0x26
 8002d04:	b2d2      	uxtb	r2, r2
 8002d06:	701a      	strb	r2, [r3, #0]
        buf[UDP_LEN_L_P]=(UDP_HEADER_LEN+datalen) & 0xff;
 8002d08:	887b      	ldrh	r3, [r7, #2]
 8002d0a:	b2da      	uxtb	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	3327      	adds	r3, #39	; 0x27
 8002d10:	3208      	adds	r2, #8
 8002d12:	b2d2      	uxtb	r2, r2
 8002d14:	701a      	strb	r2, [r3, #0]

        //
        ck=checksum(&buf[IP_SRC_P], 16 + datalen,1);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f103 001a 	add.w	r0, r3, #26
 8002d1c:	887b      	ldrh	r3, [r7, #2]
 8002d1e:	3310      	adds	r3, #16
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	2201      	movs	r2, #1
 8002d24:	4619      	mov	r1, r3
 8002d26:	f7ff faf3 	bl	8002310 <checksum>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	81fb      	strh	r3, [r7, #14]
        buf[UDP_CHECKSUM_H_P]=ck>>8;
 8002d2e:	89fb      	ldrh	r3, [r7, #14]
 8002d30:	0a1b      	lsrs	r3, r3, #8
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	3328      	adds	r3, #40	; 0x28
 8002d38:	b2d2      	uxtb	r2, r2
 8002d3a:	701a      	strb	r2, [r3, #0]
        buf[UDP_CHECKSUM_L_P]=ck& 0xff;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	3329      	adds	r3, #41	; 0x29
 8002d40:	89fa      	ldrh	r2, [r7, #14]
 8002d42:	b2d2      	uxtb	r2, r2
 8002d44:	701a      	strb	r2, [r3, #0]
        enc28j60PacketSend(UDP_HEADER_LEN+IP_HEADER_LEN+ETH_HEADER_LEN+datalen,buf);
 8002d46:	887b      	ldrh	r3, [r7, #2]
 8002d48:	332a      	adds	r3, #42	; 0x2a
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	6879      	ldr	r1, [r7, #4]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7ff fa36 	bl	80021c0 <enc28j60PacketSend>
}
 8002d54:	bf00      	nop
 8002d56:	3710      	adds	r7, #16
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <client_arp_whohas>:
#endif // WOL_client

#if defined (NTP_client) || defined (UDP_client) || defined (TCP_client) || defined (PING_client)
// make a arp request
void client_arp_whohas(uint8_t *buf,uint8_t *ip_we_search)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
        uint8_t i=0;
 8002d66:	2300      	movs	r3, #0
 8002d68:	73fb      	strb	r3, [r7, #15]
        //
        while(i<6){
 8002d6a:	e010      	b.n	8002d8e <client_arp_whohas+0x32>
                buf[ETH_DST_MAC +i]=0xff;
 8002d6c:	7bfb      	ldrb	r3, [r7, #15]
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	4413      	add	r3, r2
 8002d72:	22ff      	movs	r2, #255	; 0xff
 8002d74:	701a      	strb	r2, [r3, #0]
                buf[ETH_SRC_MAC +i]=macaddr[i];
 8002d76:	7bfa      	ldrb	r2, [r7, #15]
 8002d78:	7bfb      	ldrb	r3, [r7, #15]
 8002d7a:	3306      	adds	r3, #6
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	440b      	add	r3, r1
 8002d82:	492e      	ldr	r1, [pc, #184]	; (8002e3c <client_arp_whohas+0xe0>)
 8002d84:	5c8a      	ldrb	r2, [r1, r2]
 8002d86:	701a      	strb	r2, [r3, #0]
                i++;
 8002d88:	7bfb      	ldrb	r3, [r7, #15]
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	73fb      	strb	r3, [r7, #15]
        while(i<6){
 8002d8e:	7bfb      	ldrb	r3, [r7, #15]
 8002d90:	2b05      	cmp	r3, #5
 8002d92:	d9eb      	bls.n	8002d6c <client_arp_whohas+0x10>
        }
        buf[ETH_TYPE_H_P] = ETHTYPE_ARP_H_V;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	330c      	adds	r3, #12
 8002d98:	2208      	movs	r2, #8
 8002d9a:	701a      	strb	r2, [r3, #0]
        buf[ETH_TYPE_L_P] = ETHTYPE_ARP_L_V;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	330d      	adds	r3, #13
 8002da0:	2206      	movs	r2, #6
 8002da2:	701a      	strb	r2, [r3, #0]
        fill_buf_p(&buf[ETH_ARP_P],8,arpreqhdr);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	330e      	adds	r3, #14
 8002da8:	4a25      	ldr	r2, [pc, #148]	; (8002e40 <client_arp_whohas+0xe4>)
 8002daa:	2108      	movs	r1, #8
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7ff fee9 	bl	8002b84 <fill_buf_p>
        i=0;
 8002db2:	2300      	movs	r3, #0
 8002db4:	73fb      	strb	r3, [r7, #15]
        while(i<6){
 8002db6:	e012      	b.n	8002dde <client_arp_whohas+0x82>
                buf[ETH_ARP_SRC_MAC_P +i]=macaddr[i];
 8002db8:	7bfa      	ldrb	r2, [r7, #15]
 8002dba:	7bfb      	ldrb	r3, [r7, #15]
 8002dbc:	3316      	adds	r3, #22
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	440b      	add	r3, r1
 8002dc4:	491d      	ldr	r1, [pc, #116]	; (8002e3c <client_arp_whohas+0xe0>)
 8002dc6:	5c8a      	ldrb	r2, [r1, r2]
 8002dc8:	701a      	strb	r2, [r3, #0]
                buf[ETH_ARP_DST_MAC_P+i]=0;
 8002dca:	7bfb      	ldrb	r3, [r7, #15]
 8002dcc:	3320      	adds	r3, #32
 8002dce:	461a      	mov	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	701a      	strb	r2, [r3, #0]
                i++;
 8002dd8:	7bfb      	ldrb	r3, [r7, #15]
 8002dda:	3301      	adds	r3, #1
 8002ddc:	73fb      	strb	r3, [r7, #15]
        while(i<6){
 8002dde:	7bfb      	ldrb	r3, [r7, #15]
 8002de0:	2b05      	cmp	r3, #5
 8002de2:	d9e9      	bls.n	8002db8 <client_arp_whohas+0x5c>
        }
        i=0;
 8002de4:	2300      	movs	r3, #0
 8002de6:	73fb      	strb	r3, [r7, #15]
        while(i<4){
 8002de8:	e015      	b.n	8002e16 <client_arp_whohas+0xba>
                buf[ETH_ARP_DST_IP_P+i]=*(ip_we_search +i);
 8002dea:	7bfb      	ldrb	r3, [r7, #15]
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	441a      	add	r2, r3
 8002df0:	7bfb      	ldrb	r3, [r7, #15]
 8002df2:	3326      	adds	r3, #38	; 0x26
 8002df4:	4619      	mov	r1, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	440b      	add	r3, r1
 8002dfa:	7812      	ldrb	r2, [r2, #0]
 8002dfc:	701a      	strb	r2, [r3, #0]
                buf[ETH_ARP_SRC_IP_P+i]=ipaddr[i];
 8002dfe:	7bfa      	ldrb	r2, [r7, #15]
 8002e00:	7bfb      	ldrb	r3, [r7, #15]
 8002e02:	331c      	adds	r3, #28
 8002e04:	4619      	mov	r1, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	440b      	add	r3, r1
 8002e0a:	490e      	ldr	r1, [pc, #56]	; (8002e44 <client_arp_whohas+0xe8>)
 8002e0c:	5c8a      	ldrb	r2, [r1, r2]
 8002e0e:	701a      	strb	r2, [r3, #0]
                i++;
 8002e10:	7bfb      	ldrb	r3, [r7, #15]
 8002e12:	3301      	adds	r3, #1
 8002e14:	73fb      	strb	r3, [r7, #15]
        while(i<4){
 8002e16:	7bfb      	ldrb	r3, [r7, #15]
 8002e18:	2b03      	cmp	r3, #3
 8002e1a:	d9e6      	bls.n	8002dea <client_arp_whohas+0x8e>
        }
       	waitgwmac|=WGW_ACCEPT_ARP_REPLY;
 8002e1c:	4b0a      	ldr	r3, [pc, #40]	; (8002e48 <client_arp_whohas+0xec>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	f043 0308 	orr.w	r3, r3, #8
 8002e26:	b2da      	uxtb	r2, r3
 8002e28:	4b07      	ldr	r3, [pc, #28]	; (8002e48 <client_arp_whohas+0xec>)
 8002e2a:	701a      	strb	r2, [r3, #0]

        // 0x2a=42=len of packet
        enc28j60PacketSend(0x2a,buf);
 8002e2c:	6879      	ldr	r1, [r7, #4]
 8002e2e:	202a      	movs	r0, #42	; 0x2a
 8002e30:	f7ff f9c6 	bl	80021c0 <enc28j60PacketSend>
}
 8002e34:	bf00      	nop
 8002e36:	3710      	adds	r7, #16
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	20000368 	.word	0x20000368
 8002e40:	08004154 	.word	0x08004154
 8002e44:	20000104 	.word	0x20000104
 8002e48:	2000001c 	.word	0x2000001c

08002e4c <client_store_gw_mac>:


// store the mac addr from an arp reply
// no len check here, you must first call eth_type_is_arp_and_my_ip
uint8_t client_store_gw_mac(uint8_t *buf)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b085      	sub	sp, #20
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
        uint8_t i=0;
 8002e54:	2300      	movs	r3, #0
 8002e56:	73fb      	strb	r3, [r7, #15]
        while(i<4){
 8002e58:	e00f      	b.n	8002e7a <client_store_gw_mac+0x2e>
                if(buf[ETH_ARP_SRC_IP_P+i]!=gwip[i]){
 8002e5a:	7bfb      	ldrb	r3, [r7, #15]
 8002e5c:	331c      	adds	r3, #28
 8002e5e:	461a      	mov	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4413      	add	r3, r2
 8002e64:	781a      	ldrb	r2, [r3, #0]
 8002e66:	7bfb      	ldrb	r3, [r7, #15]
 8002e68:	4911      	ldr	r1, [pc, #68]	; (8002eb0 <client_store_gw_mac+0x64>)
 8002e6a:	5ccb      	ldrb	r3, [r1, r3]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d001      	beq.n	8002e74 <client_store_gw_mac+0x28>
                        return(0);
 8002e70:	2300      	movs	r3, #0
 8002e72:	e018      	b.n	8002ea6 <client_store_gw_mac+0x5a>
                }
                i++;
 8002e74:	7bfb      	ldrb	r3, [r7, #15]
 8002e76:	3301      	adds	r3, #1
 8002e78:	73fb      	strb	r3, [r7, #15]
        while(i<4){
 8002e7a:	7bfb      	ldrb	r3, [r7, #15]
 8002e7c:	2b03      	cmp	r3, #3
 8002e7e:	d9ec      	bls.n	8002e5a <client_store_gw_mac+0xe>
        }
        i=0;
 8002e80:	2300      	movs	r3, #0
 8002e82:	73fb      	strb	r3, [r7, #15]
        while(i<6){
 8002e84:	e00b      	b.n	8002e9e <client_store_gw_mac+0x52>
                gwmacaddr[i]=buf[ETH_ARP_SRC_MAC_P +i];
 8002e86:	7bfb      	ldrb	r3, [r7, #15]
 8002e88:	3316      	adds	r3, #22
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	441a      	add	r2, r3
 8002e90:	7bfb      	ldrb	r3, [r7, #15]
 8002e92:	7811      	ldrb	r1, [r2, #0]
 8002e94:	4a07      	ldr	r2, [pc, #28]	; (8002eb4 <client_store_gw_mac+0x68>)
 8002e96:	54d1      	strb	r1, [r2, r3]
                i++;
 8002e98:	7bfb      	ldrb	r3, [r7, #15]
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	73fb      	strb	r3, [r7, #15]
        while(i<6){
 8002e9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ea0:	2b05      	cmp	r3, #5
 8002ea2:	d9f0      	bls.n	8002e86 <client_store_gw_mac+0x3a>
        }
        return(1);
 8002ea4:	2301      	movs	r3, #1
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3714      	adds	r7, #20
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bc80      	pop	{r7}
 8002eae:	4770      	bx	lr
 8002eb0:	200000f4 	.word	0x200000f4
 8002eb4:	200000f8 	.word	0x200000f8

08002eb8 <client_set_gwip>:
        }
}
*/

void client_set_gwip(uint8_t *gwipaddr)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
        uint8_t i=0;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	73fb      	strb	r3, [r7, #15]
        waitgwmac=WGW_INITIAL_ARP; // causes an arp request in the packet loop
 8002ec4:	4b0a      	ldr	r3, [pc, #40]	; (8002ef0 <client_set_gwip+0x38>)
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	701a      	strb	r2, [r3, #0]
        while(i<4){
 8002eca:	e009      	b.n	8002ee0 <client_set_gwip+0x28>
                gwip[i]=gwipaddr[i];
 8002ecc:	7bfb      	ldrb	r3, [r7, #15]
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	441a      	add	r2, r3
 8002ed2:	7bfb      	ldrb	r3, [r7, #15]
 8002ed4:	7811      	ldrb	r1, [r2, #0]
 8002ed6:	4a07      	ldr	r2, [pc, #28]	; (8002ef4 <client_set_gwip+0x3c>)
 8002ed8:	54d1      	strb	r1, [r2, r3]
                i++;
 8002eda:	7bfb      	ldrb	r3, [r7, #15]
 8002edc:	3301      	adds	r3, #1
 8002ede:	73fb      	strb	r3, [r7, #15]
        while(i<4){
 8002ee0:	7bfb      	ldrb	r3, [r7, #15]
 8002ee2:	2b03      	cmp	r3, #3
 8002ee4:	d9f2      	bls.n	8002ecc <client_set_gwip+0x14>
        }
}
 8002ee6:	bf00      	nop
 8002ee8:	3714      	adds	r7, #20
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bc80      	pop	{r7}
 8002eee:	4770      	bx	lr
 8002ef0:	2000001c 	.word	0x2000001c
 8002ef4:	200000f4 	.word	0x200000f4

08002ef8 <client_syn>:
}

#if defined (TCP_client)
// Make a tcp syn packet
void client_syn(uint8_t *buf,uint8_t srcport,uint8_t dstport_h,uint8_t dstport_l)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	4608      	mov	r0, r1
 8002f02:	4611      	mov	r1, r2
 8002f04:	461a      	mov	r2, r3
 8002f06:	4603      	mov	r3, r0
 8002f08:	70fb      	strb	r3, [r7, #3]
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	70bb      	strb	r3, [r7, #2]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	707b      	strb	r3, [r7, #1]
        uint16_t ck;
        uint8_t i=0;
 8002f12:	2300      	movs	r3, #0
 8002f14:	73fb      	strb	r3, [r7, #15]
        // -- make the main part of the eth/IP/tcp header:
        while(i<6){
 8002f16:	e012      	b.n	8002f3e <client_syn+0x46>
                buf[ETH_DST_MAC +i]=gwmacaddr[i]; // gw mac in local lan or host mac
 8002f18:	7bfa      	ldrb	r2, [r7, #15]
 8002f1a:	7bfb      	ldrb	r3, [r7, #15]
 8002f1c:	6879      	ldr	r1, [r7, #4]
 8002f1e:	440b      	add	r3, r1
 8002f20:	495f      	ldr	r1, [pc, #380]	; (80030a0 <client_syn+0x1a8>)
 8002f22:	5c8a      	ldrb	r2, [r1, r2]
 8002f24:	701a      	strb	r2, [r3, #0]
                buf[ETH_SRC_MAC +i]=macaddr[i];
 8002f26:	7bfa      	ldrb	r2, [r7, #15]
 8002f28:	7bfb      	ldrb	r3, [r7, #15]
 8002f2a:	3306      	adds	r3, #6
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	440b      	add	r3, r1
 8002f32:	495c      	ldr	r1, [pc, #368]	; (80030a4 <client_syn+0x1ac>)
 8002f34:	5c8a      	ldrb	r2, [r1, r2]
 8002f36:	701a      	strb	r2, [r3, #0]
                i++;
 8002f38:	7bfb      	ldrb	r3, [r7, #15]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	73fb      	strb	r3, [r7, #15]
        while(i<6){
 8002f3e:	7bfb      	ldrb	r3, [r7, #15]
 8002f40:	2b05      	cmp	r3, #5
 8002f42:	d9e9      	bls.n	8002f18 <client_syn+0x20>
        }
        buf[ETH_TYPE_H_P] = ETHTYPE_IP_H_V;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	330c      	adds	r3, #12
 8002f48:	2208      	movs	r2, #8
 8002f4a:	701a      	strb	r2, [r3, #0]
        buf[ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	330d      	adds	r3, #13
 8002f50:	2200      	movs	r2, #0
 8002f52:	701a      	strb	r2, [r3, #0]
        fill_buf_p(&buf[IP_P],9,iphdr);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	330e      	adds	r3, #14
 8002f58:	4a53      	ldr	r2, [pc, #332]	; (80030a8 <client_syn+0x1b0>)
 8002f5a:	2109      	movs	r1, #9
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7ff fe11 	bl	8002b84 <fill_buf_p>
        buf[IP_TOTLEN_L_P]=44; // good for syn
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	3311      	adds	r3, #17
 8002f66:	222c      	movs	r2, #44	; 0x2c
 8002f68:	701a      	strb	r2, [r3, #0]
        buf[IP_PROTO_P]=IP_PROTO_TCP_V;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	3317      	adds	r3, #23
 8002f6e:	2206      	movs	r2, #6
 8002f70:	701a      	strb	r2, [r3, #0]
        i=0;
 8002f72:	2300      	movs	r3, #0
 8002f74:	73fb      	strb	r3, [r7, #15]
        while(i<4){
 8002f76:	e014      	b.n	8002fa2 <client_syn+0xaa>
                buf[IP_DST_P+i]=tcpsrvip[i];
 8002f78:	7bfa      	ldrb	r2, [r7, #15]
 8002f7a:	7bfb      	ldrb	r3, [r7, #15]
 8002f7c:	331e      	adds	r3, #30
 8002f7e:	4619      	mov	r1, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	440b      	add	r3, r1
 8002f84:	4949      	ldr	r1, [pc, #292]	; (80030ac <client_syn+0x1b4>)
 8002f86:	5c8a      	ldrb	r2, [r1, r2]
 8002f88:	701a      	strb	r2, [r3, #0]
                buf[IP_SRC_P+i]=ipaddr[i];
 8002f8a:	7bfa      	ldrb	r2, [r7, #15]
 8002f8c:	7bfb      	ldrb	r3, [r7, #15]
 8002f8e:	331a      	adds	r3, #26
 8002f90:	4619      	mov	r1, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	440b      	add	r3, r1
 8002f96:	4946      	ldr	r1, [pc, #280]	; (80030b0 <client_syn+0x1b8>)
 8002f98:	5c8a      	ldrb	r2, [r1, r2]
 8002f9a:	701a      	strb	r2, [r3, #0]
                i++;
 8002f9c:	7bfb      	ldrb	r3, [r7, #15]
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	73fb      	strb	r3, [r7, #15]
        while(i<4){
 8002fa2:	7bfb      	ldrb	r3, [r7, #15]
 8002fa4:	2b03      	cmp	r3, #3
 8002fa6:	d9e7      	bls.n	8002f78 <client_syn+0x80>
        }
        fill_ip_hdr_checksum(buf);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f7ff fafb 	bl	80025a4 <fill_ip_hdr_checksum>
        buf[TCP_DST_PORT_H_P]=dstport_h;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	3324      	adds	r3, #36	; 0x24
 8002fb2:	78ba      	ldrb	r2, [r7, #2]
 8002fb4:	701a      	strb	r2, [r3, #0]
        buf[TCP_DST_PORT_L_P]=dstport_l;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	3325      	adds	r3, #37	; 0x25
 8002fba:	787a      	ldrb	r2, [r7, #1]
 8002fbc:	701a      	strb	r2, [r3, #0]
        buf[TCP_SRC_PORT_H_P]=TCPCLIENT_SRC_PORT_H;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	3322      	adds	r3, #34	; 0x22
 8002fc2:	220b      	movs	r2, #11
 8002fc4:	701a      	strb	r2, [r3, #0]
        buf[TCP_SRC_PORT_L_P]=srcport; // lower 8 bit of src port
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	3323      	adds	r3, #35	; 0x23
 8002fca:	78fa      	ldrb	r2, [r7, #3]
 8002fcc:	701a      	strb	r2, [r3, #0]
        i=0;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	73fb      	strb	r3, [r7, #15]
        // zero out sequence number and acknowledgement number
        while(i<8){
 8002fd2:	e009      	b.n	8002fe8 <client_syn+0xf0>
                buf[TCP_SEQ_H_P+i]=0;
 8002fd4:	7bfb      	ldrb	r3, [r7, #15]
 8002fd6:	3326      	adds	r3, #38	; 0x26
 8002fd8:	461a      	mov	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4413      	add	r3, r2
 8002fde:	2200      	movs	r2, #0
 8002fe0:	701a      	strb	r2, [r3, #0]
                i++;
 8002fe2:	7bfb      	ldrb	r3, [r7, #15]
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	73fb      	strb	r3, [r7, #15]
        while(i<8){
 8002fe8:	7bfb      	ldrb	r3, [r7, #15]
 8002fea:	2b07      	cmp	r3, #7
 8002fec:	d9f2      	bls.n	8002fd4 <client_syn+0xdc>
        // -- header ready 
        // put inital seq number
        // we step only the second byte, this allows us to send packts 
        // with 255 bytes 512 (if we step the initial seqnum by 2)
        // or 765 (step by 3)
        buf[TCP_SEQ_H_P+2]= seqnum; 
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	3328      	adds	r3, #40	; 0x28
 8002ff2:	4a30      	ldr	r2, [pc, #192]	; (80030b4 <client_syn+0x1bc>)
 8002ff4:	7812      	ldrb	r2, [r2, #0]
 8002ff6:	701a      	strb	r2, [r3, #0]
        // step the inititial seq num by something we will not use
        // during this tcp session:
        seqnum+=3;
 8002ff8:	4b2e      	ldr	r3, [pc, #184]	; (80030b4 <client_syn+0x1bc>)
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	3303      	adds	r3, #3
 8002ffe:	b2da      	uxtb	r2, r3
 8003000:	4b2c      	ldr	r3, [pc, #176]	; (80030b4 <client_syn+0x1bc>)
 8003002:	701a      	strb	r2, [r3, #0]
        buf[TCP_HEADER_LEN_P]=0x60; // 0x60=24 len: (0x60>>4) * 4
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	332e      	adds	r3, #46	; 0x2e
 8003008:	2260      	movs	r2, #96	; 0x60
 800300a:	701a      	strb	r2, [r3, #0]
        buf[TCP_FLAGS_P]=TCP_FLAGS_SYN_V;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	332f      	adds	r3, #47	; 0x2f
 8003010:	2202      	movs	r2, #2
 8003012:	701a      	strb	r2, [r3, #0]
        // use a low window size otherwise we have to have
        // timers and can not just react on every packet.
        buf[TCP_WIN_SIZE]=0x4; // 1024=0x400, 768 = 0x300, initial window
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	3330      	adds	r3, #48	; 0x30
 8003018:	2204      	movs	r2, #4
 800301a:	701a      	strb	r2, [r3, #0]
        buf[TCP_WIN_SIZE+1]=0x0;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	3331      	adds	r3, #49	; 0x31
 8003020:	2200      	movs	r2, #0
 8003022:	701a      	strb	r2, [r3, #0]
        // zero the checksum
        buf[TCP_CHECKSUM_H_P]=0;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3332      	adds	r3, #50	; 0x32
 8003028:	2200      	movs	r2, #0
 800302a:	701a      	strb	r2, [r3, #0]
        buf[TCP_CHECKSUM_L_P]=0;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	3333      	adds	r3, #51	; 0x33
 8003030:	2200      	movs	r2, #0
 8003032:	701a      	strb	r2, [r3, #0]
        // urgent pointer
        buf[TCP_CHECKSUM_L_P+1]=0;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	3334      	adds	r3, #52	; 0x34
 8003038:	2200      	movs	r2, #0
 800303a:	701a      	strb	r2, [r3, #0]
        buf[TCP_CHECKSUM_L_P+2]=0;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	3335      	adds	r3, #53	; 0x35
 8003040:	2200      	movs	r2, #0
 8003042:	701a      	strb	r2, [r3, #0]
        // MSS=768, must be more than 50% of the window size we use
        // 768 in hex is 0x300
        buf[TCP_OPTIONS_P]=2;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	3336      	adds	r3, #54	; 0x36
 8003048:	2202      	movs	r2, #2
 800304a:	701a      	strb	r2, [r3, #0]
        buf[TCP_OPTIONS_P+1]=4;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	3337      	adds	r3, #55	; 0x37
 8003050:	2204      	movs	r2, #4
 8003052:	701a      	strb	r2, [r3, #0]
        buf[TCP_OPTIONS_P+2]=(CLIENTMSS>>8);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	3338      	adds	r3, #56	; 0x38
 8003058:	2202      	movs	r2, #2
 800305a:	701a      	strb	r2, [r3, #0]
        buf[TCP_OPTIONS_P+3]=CLIENTMSS & 0xff;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	3339      	adds	r3, #57	; 0x39
 8003060:	2226      	movs	r2, #38	; 0x26
 8003062:	701a      	strb	r2, [r3, #0]
        ck=checksum(&buf[IP_SRC_P], 8 +TCP_HEADER_LEN_PLAIN+4,2);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	331a      	adds	r3, #26
 8003068:	2202      	movs	r2, #2
 800306a:	2120      	movs	r1, #32
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff f94f 	bl	8002310 <checksum>
 8003072:	4603      	mov	r3, r0
 8003074:	81bb      	strh	r3, [r7, #12]
        buf[TCP_CHECKSUM_H_P]=ck>>8;
 8003076:	89bb      	ldrh	r3, [r7, #12]
 8003078:	0a1b      	lsrs	r3, r3, #8
 800307a:	b29a      	uxth	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	3332      	adds	r3, #50	; 0x32
 8003080:	b2d2      	uxtb	r2, r2
 8003082:	701a      	strb	r2, [r3, #0]
        buf[TCP_CHECKSUM_L_P]=ck& 0xff;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	3333      	adds	r3, #51	; 0x33
 8003088:	89ba      	ldrh	r2, [r7, #12]
 800308a:	b2d2      	uxtb	r2, r2
 800308c:	701a      	strb	r2, [r3, #0]
        // 4 is the tcp mss option:
        enc28j60PacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+ETH_HEADER_LEN+4,buf);
 800308e:	6879      	ldr	r1, [r7, #4]
 8003090:	203a      	movs	r0, #58	; 0x3a
 8003092:	f7ff f895 	bl	80021c0 <enc28j60PacketSend>
#ifdef ETHERSHIELD_DEBUG
        ethershieldDebug( "Sent TCP Syn\n");
#endif
}
 8003096:	bf00      	nop
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	200000f8 	.word	0x200000f8
 80030a4:	20000368 	.word	0x20000368
 80030a8:	0800415c 	.word	0x0800415c
 80030ac:	20000100 	.word	0x20000100
 80030b0:	20000104 	.word	0x20000104
 80030b4:	2000001d 	.word	0x2000001d

080030b8 <packetloop_icmp_tcp>:
#endif // PING_client

// return 0 to just continue in the packet loop and return the position 
// of the tcp/udp data if there is tcp/udp data part
uint16_t packetloop_icmp_tcp(uint8_t *buf,uint16_t plen)
{
 80030b8:	b590      	push	{r4, r7, lr}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	460b      	mov	r3, r1
 80030c2:	807b      	strh	r3, [r7, #2]
        uint16_t len;
#if defined (TCP_client)
        uint8_t send_fin=0;
 80030c4:	2300      	movs	r3, #0
 80030c6:	737b      	strb	r3, [r7, #13]
#endif

        //plen will be unequal to zero if there is a valid 
        // packet (without crc error):
#if defined (NTP_client) ||  defined (UDP_client) || defined (TCP_client) || defined (PING_client)
        if(plen==0){
 80030c8:	887b      	ldrh	r3, [r7, #2]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d14e      	bne.n	800316c <packetloop_icmp_tcp+0xb4>
                if ((waitgwmac & WGW_INITIAL_ARP||waitgwmac & WGW_REFRESHING) && delaycnt==0 && enc28j60linkup()){
 80030ce:	4b9c      	ldr	r3, [pc, #624]	; (8003340 <packetloop_icmp_tcp+0x288>)
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	f003 0301 	and.w	r3, r3, #1
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d106      	bne.n	80030ea <packetloop_icmp_tcp+0x32>
 80030dc:	4b98      	ldr	r3, [pc, #608]	; (8003340 <packetloop_icmp_tcp+0x288>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	f003 0304 	and.w	r3, r3, #4
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00d      	beq.n	8003106 <packetloop_icmp_tcp+0x4e>
 80030ea:	4b96      	ldr	r3, [pc, #600]	; (8003344 <packetloop_icmp_tcp+0x28c>)
 80030ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d108      	bne.n	8003106 <packetloop_icmp_tcp+0x4e>
 80030f4:	f7ff f858 	bl	80021a8 <enc28j60linkup>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d003      	beq.n	8003106 <packetloop_icmp_tcp+0x4e>
                        client_arp_whohas(buf,gwip);
 80030fe:	4992      	ldr	r1, [pc, #584]	; (8003348 <packetloop_icmp_tcp+0x290>)
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f7ff fe2b 	bl	8002d5c <client_arp_whohas>
                }
                delaycnt++;
 8003106:	4b8f      	ldr	r3, [pc, #572]	; (8003344 <packetloop_icmp_tcp+0x28c>)
 8003108:	f9b3 3000 	ldrsh.w	r3, [r3]
 800310c:	b29b      	uxth	r3, r3
 800310e:	3301      	adds	r3, #1
 8003110:	b29b      	uxth	r3, r3
 8003112:	b21a      	sxth	r2, r3
 8003114:	4b8b      	ldr	r3, [pc, #556]	; (8003344 <packetloop_icmp_tcp+0x28c>)
 8003116:	801a      	strh	r2, [r3, #0]
#if defined (TCP_client)
                if (tcp_client_state==1  && (waitgwmac & WGW_HAVE_GW_MAC)){ // send a syn
 8003118:	4b8c      	ldr	r3, [pc, #560]	; (800334c <packetloop_icmp_tcp+0x294>)
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d123      	bne.n	8003168 <packetloop_icmp_tcp+0xb0>
 8003120:	4b87      	ldr	r3, [pc, #540]	; (8003340 <packetloop_icmp_tcp+0x288>)
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	b2db      	uxtb	r3, r3
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d01c      	beq.n	8003168 <packetloop_icmp_tcp+0xb0>
                        tcp_client_state= 2;
 800312e:	4b87      	ldr	r3, [pc, #540]	; (800334c <packetloop_icmp_tcp+0x294>)
 8003130:	2202      	movs	r2, #2
 8003132:	701a      	strb	r2, [r3, #0]
                        tcpclient_src_port_l++; // allocate a new port
 8003134:	4b86      	ldr	r3, [pc, #536]	; (8003350 <packetloop_icmp_tcp+0x298>)
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	3301      	adds	r3, #1
 800313a:	b2da      	uxtb	r2, r3
 800313c:	4b84      	ldr	r3, [pc, #528]	; (8003350 <packetloop_icmp_tcp+0x298>)
 800313e:	701a      	strb	r2, [r3, #0]
                        // we encode our 3 bit fd into the src port this
                        // way we get it back in every message that comes
                        // from the server:
                        client_syn(buf,((tcp_fd<<5) | (0x1f & tcpclient_src_port_l)),tcp_client_port_h,tcp_client_port_l);
 8003140:	4b84      	ldr	r3, [pc, #528]	; (8003354 <packetloop_icmp_tcp+0x29c>)
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	015b      	lsls	r3, r3, #5
 8003146:	b25a      	sxtb	r2, r3
 8003148:	4b81      	ldr	r3, [pc, #516]	; (8003350 <packetloop_icmp_tcp+0x298>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	b25b      	sxtb	r3, r3
 800314e:	f003 031f 	and.w	r3, r3, #31
 8003152:	b25b      	sxtb	r3, r3
 8003154:	4313      	orrs	r3, r2
 8003156:	b25b      	sxtb	r3, r3
 8003158:	b2d9      	uxtb	r1, r3
 800315a:	4b7f      	ldr	r3, [pc, #508]	; (8003358 <packetloop_icmp_tcp+0x2a0>)
 800315c:	781a      	ldrb	r2, [r3, #0]
 800315e:	4b7f      	ldr	r3, [pc, #508]	; (800335c <packetloop_icmp_tcp+0x2a4>)
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7ff fec8 	bl	8002ef8 <client_syn>
                }
#endif
                return(0);
 8003168:	2300      	movs	r3, #0
 800316a:	e211      	b.n	8003590 <packetloop_icmp_tcp+0x4d8>
        }
#endif // NTP_client||UDP_client||TCP_client||PING_client
        // arp is broadcast if unknown but a host may also
        // verify the mac address by sending it to 
        // a unicast address.
        if(eth_type_is_arp_and_my_ip(buf,plen)){
 800316c:	887b      	ldrh	r3, [r7, #2]
 800316e:	4619      	mov	r1, r3
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f7ff f97f 	bl	8002474 <eth_type_is_arp_and_my_ip>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d01e      	beq.n	80031ba <packetloop_icmp_tcp+0x102>
                if (buf[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REQ_L_V){
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	3315      	adds	r3, #21
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d102      	bne.n	800318c <packetloop_icmp_tcp+0xd4>
                        // is it an arp request 
                        make_arp_answer_from_request(buf);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7ff fae4 	bl	8002754 <make_arp_answer_from_request>
                }
#if defined (NTP_client) || defined (UDP_client) || defined (TCP_client) || defined (PING_client)
                if (waitgwmac & WGW_ACCEPT_ARP_REPLY && (buf[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REPLY_L_V)){
 800318c:	4b6c      	ldr	r3, [pc, #432]	; (8003340 <packetloop_icmp_tcp+0x288>)
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	b2db      	uxtb	r3, r3
 8003192:	f003 0308 	and.w	r3, r3, #8
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00d      	beq.n	80031b6 <packetloop_icmp_tcp+0xfe>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	3315      	adds	r3, #21
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d108      	bne.n	80031b6 <packetloop_icmp_tcp+0xfe>
                        // is it an arp reply 
                        if (client_store_gw_mac(buf)){
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f7ff fe51 	bl	8002e4c <client_store_gw_mac>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d002      	beq.n	80031b6 <packetloop_icmp_tcp+0xfe>
                                waitgwmac=WGW_HAVE_GW_MAC;
 80031b0:	4b63      	ldr	r3, [pc, #396]	; (8003340 <packetloop_icmp_tcp+0x288>)
 80031b2:	2202      	movs	r2, #2
 80031b4:	701a      	strb	r2, [r3, #0]
                        }
                }
#endif // NTP_client||UDP_client||TCP_client||PING_client
                return(0);
 80031b6:	2300      	movs	r3, #0
 80031b8:	e1ea      	b.n	8003590 <packetloop_icmp_tcp+0x4d8>

        }
        // check if ip packets are for us:
        if(eth_type_is_ip_and_my_ip(buf,plen)==0){
 80031ba:	887b      	ldrh	r3, [r7, #2]
 80031bc:	4619      	mov	r1, r3
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7ff f98c 	bl	80024dc <eth_type_is_ip_and_my_ip>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <packetloop_icmp_tcp+0x116>
                return(0);
 80031ca:	2300      	movs	r3, #0
 80031cc:	e1e0      	b.n	8003590 <packetloop_icmp_tcp+0x4d8>
        }
#endif // NTP_client
#ifdef DNS_client
        // TODO - does this work?
        // If DNS response, drop out to have it processed elsewhere
        if(buf[IP_PROTO_P] == IP_PROTO_UDP_V && buf[UDP_SRC_PORT_H_P]==0 && buf[UDP_SRC_PORT_L_P]== 53 ) {
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	3317      	adds	r3, #23
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	2b11      	cmp	r3, #17
 80031d6:	d10b      	bne.n	80031f0 <packetloop_icmp_tcp+0x138>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	3322      	adds	r3, #34	; 0x22
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d106      	bne.n	80031f0 <packetloop_icmp_tcp+0x138>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	3323      	adds	r3, #35	; 0x23
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	2b35      	cmp	r3, #53	; 0x35
 80031ea:	d101      	bne.n	80031f0 <packetloop_icmp_tcp+0x138>
                return( UDP_DATA_P );
 80031ec:	232a      	movs	r3, #42	; 0x2a
 80031ee:	e1cf      	b.n	8003590 <packetloop_icmp_tcp+0x4d8>
        }
#endif

        if(buf[IP_PROTO_P]==IP_PROTO_ICMP_V && buf[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V){
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	3317      	adds	r3, #23
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d117      	bne.n	800322a <packetloop_icmp_tcp+0x172>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	3322      	adds	r3, #34	; 0x22
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	2b08      	cmp	r3, #8
 8003202:	d112      	bne.n	800322a <packetloop_icmp_tcp+0x172>
                if (icmp_callback){
 8003204:	4b56      	ldr	r3, [pc, #344]	; (8003360 <packetloop_icmp_tcp+0x2a8>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d005      	beq.n	8003218 <packetloop_icmp_tcp+0x160>
                        (*icmp_callback)(&(buf[IP_SRC_P]));
 800320c:	4b54      	ldr	r3, [pc, #336]	; (8003360 <packetloop_icmp_tcp+0x2a8>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	321a      	adds	r2, #26
 8003214:	4610      	mov	r0, r2
 8003216:	4798      	blx	r3
                }
                // a ping packet, let's send pong
                make_echo_reply_from_request(buf,plen);
 8003218:	887b      	ldrh	r3, [r7, #2]
 800321a:	4619      	mov	r1, r3
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f7ff faf1 	bl	8002804 <make_echo_reply_from_request>
                ES_PingCallback();
 8003222:	f000 fc01 	bl	8003a28 <ES_PingCallback>
                return(0);
 8003226:	2300      	movs	r3, #0
 8003228:	e1b2      	b.n	8003590 <packetloop_icmp_tcp+0x4d8>
        }
        if (plen<54 && buf[IP_PROTO_P]!=IP_PROTO_TCP_V ){
 800322a:	887b      	ldrh	r3, [r7, #2]
 800322c:	2b35      	cmp	r3, #53	; 0x35
 800322e:	d806      	bhi.n	800323e <packetloop_icmp_tcp+0x186>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	3317      	adds	r3, #23
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	2b06      	cmp	r3, #6
 8003238:	d001      	beq.n	800323e <packetloop_icmp_tcp+0x186>
                // smaller than the smallest TCP packet and not tcp port
                return(0);
 800323a:	2300      	movs	r3, #0
 800323c:	e1a8      	b.n	8003590 <packetloop_icmp_tcp+0x4d8>
        }
#if  defined (TCP_client) 
        // a message for the tcp client, client_state is zero if client was never used
        if ( buf[TCP_DST_PORT_H_P]==TCPCLIENT_SRC_PORT_H){
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	3324      	adds	r3, #36	; 0x24
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	2b0b      	cmp	r3, #11
 8003246:	f040 8155 	bne.w	80034f4 <packetloop_icmp_tcp+0x43c>
#if defined (WWW_client)
                // workaround to pass pointer to www_client_internal..
                bufptr=buf; 
 800324a:	4a46      	ldr	r2, [pc, #280]	; (8003364 <packetloop_icmp_tcp+0x2ac>)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6013      	str	r3, [r2, #0]
#endif // WWW_client
                if (check_ip_message_is_from(buf,tcpsrvip)==0){
 8003250:	4945      	ldr	r1, [pc, #276]	; (8003368 <packetloop_icmp_tcp+0x2b0>)
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f7ff f8ec 	bl	8002430 <check_ip_message_is_from>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d101      	bne.n	8003262 <packetloop_icmp_tcp+0x1aa>
                        return(0);
 800325e:	2300      	movs	r3, #0
 8003260:	e196      	b.n	8003590 <packetloop_icmp_tcp+0x4d8>
                }
                // if we get a reset:
                if (buf[TCP_FLAGS_P] & TCP_FLAGS_RST_V){
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	332f      	adds	r3, #47	; 0x2f
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	f003 0304 	and.w	r3, r3, #4
 800326c:	2b00      	cmp	r3, #0
 800326e:	d013      	beq.n	8003298 <packetloop_icmp_tcp+0x1e0>
                        if (client_tcp_result_callback){
 8003270:	4b3e      	ldr	r3, [pc, #248]	; (800336c <packetloop_icmp_tcp+0x2b4>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d00a      	beq.n	800328e <packetloop_icmp_tcp+0x1d6>
#ifdef ETHERSHIELD_DEBUG
                                ethershieldDebug( "RST: Calling tcp client callback\n");
#endif
                                // parameters in client_tcp_result_callback: fd, status, buf_start, len
                                (*client_tcp_result_callback)((buf[TCP_DST_PORT_L_P]>>5)&0x7,3,0,0);
 8003278:	4b3c      	ldr	r3, [pc, #240]	; (800336c <packetloop_icmp_tcp+0x2b4>)
 800327a:	681c      	ldr	r4, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	3325      	adds	r3, #37	; 0x25
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	095b      	lsrs	r3, r3, #5
 8003284:	b2d8      	uxtb	r0, r3
 8003286:	2300      	movs	r3, #0
 8003288:	2200      	movs	r2, #0
 800328a:	2103      	movs	r1, #3
 800328c:	47a0      	blx	r4
                        }
                        tcp_client_state=5;
 800328e:	4b2f      	ldr	r3, [pc, #188]	; (800334c <packetloop_icmp_tcp+0x294>)
 8003290:	2205      	movs	r2, #5
 8003292:	701a      	strb	r2, [r3, #0]
                        return(0);
 8003294:	2300      	movs	r3, #0
 8003296:	e17b      	b.n	8003590 <packetloop_icmp_tcp+0x4d8>
                }


                // Determine what to do with packed depending on state
 
                len=get_tcp_data_len(buf);
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f7ff fb4d 	bl	8002938 <get_tcp_data_len>
 800329e:	4603      	mov	r3, r0
 80032a0:	81fb      	strh	r3, [r7, #14]
                if (tcp_client_state== 2){
 80032a2:	4b2a      	ldr	r3, [pc, #168]	; (800334c <packetloop_icmp_tcp+0x294>)
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d164      	bne.n	8003374 <packetloop_icmp_tcp+0x2bc>
                        if ((buf[TCP_FLAGS_P] & TCP_FLAGS_SYN_V) && (buf[TCP_FLAGS_P] &TCP_FLAGS_ACK_V)){
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	332f      	adds	r3, #47	; 0x2f
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	f003 0302 	and.w	r3, r3, #2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d02b      	beq.n	8003310 <packetloop_icmp_tcp+0x258>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	332f      	adds	r3, #47	; 0x2f
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	f003 0310 	and.w	r3, r3, #16
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d024      	beq.n	8003310 <packetloop_icmp_tcp+0x258>
#ifdef ETHERSHIELD_DEBUG
                                ethershieldDebug( "Got SYNACK\n");
#endif
                                // synack, answer with ack
                                make_tcp_ack_from_any(buf,0,0);
 80032c6:	2200      	movs	r2, #0
 80032c8:	2100      	movs	r1, #0
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f7ff fb9a 	bl	8002a04 <make_tcp_ack_from_any>
                                buf[TCP_FLAGS_P]=TCP_FLAGS_ACK_V|TCP_FLAGS_PUSH_V;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	332f      	adds	r3, #47	; 0x2f
 80032d4:	2218      	movs	r2, #24
 80032d6:	701a      	strb	r2, [r3, #0]

                                // Make a tcp message with data. When calling this function we must
                                // still have a valid tcp-ack in the buffer. In other words
                                // you have just called make_tcp_ack_from_any(buf,0).
                                if (client_tcp_datafill_callback){
 80032d8:	4b25      	ldr	r3, [pc, #148]	; (8003370 <packetloop_icmp_tcp+0x2b8>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00b      	beq.n	80032f8 <packetloop_icmp_tcp+0x240>
#ifdef ETHERSHIELD_DEBUG
                                        ethershieldDebug( "Datafil Callback\n");
#endif
                                        // in this case it is src port because the above 
                                        // make_tcp_ack_from_any swaps the dst and src port:
                                        len=(*client_tcp_datafill_callback)((buf[TCP_SRC_PORT_L_P]>>5)&0x7);
 80032e0:	4b23      	ldr	r3, [pc, #140]	; (8003370 <packetloop_icmp_tcp+0x2b8>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	3223      	adds	r2, #35	; 0x23
 80032e8:	7812      	ldrb	r2, [r2, #0]
 80032ea:	0952      	lsrs	r2, r2, #5
 80032ec:	b2d2      	uxtb	r2, r2
 80032ee:	4610      	mov	r0, r2
 80032f0:	4798      	blx	r3
 80032f2:	4603      	mov	r3, r0
 80032f4:	81fb      	strh	r3, [r7, #14]
 80032f6:	e001      	b.n	80032fc <packetloop_icmp_tcp+0x244>
                                }else{
                                        // this is just to prevent a crash
                                        len=0;
 80032f8:	2300      	movs	r3, #0
 80032fa:	81fb      	strh	r3, [r7, #14]
                                }
                                tcp_client_state=3;
 80032fc:	4b13      	ldr	r3, [pc, #76]	; (800334c <packetloop_icmp_tcp+0x294>)
 80032fe:	2203      	movs	r2, #3
 8003300:	701a      	strb	r2, [r3, #0]
                                make_tcp_ack_with_data_noflags(buf,len);
 8003302:	89fb      	ldrh	r3, [r7, #14]
 8003304:	4619      	mov	r1, r3
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f7ff fbda 	bl	8002ac0 <make_tcp_ack_with_data_noflags>
#ifdef ETHERSHIELD_DEBUG
                                ethershieldDebug( "Send ACK\n");
#endif
                                return(0);
 800330c:	2300      	movs	r3, #0
 800330e:	e13f      	b.n	8003590 <packetloop_icmp_tcp+0x4d8>
                        }else{
                                // reset only if we have sent a syn and don't get syn-ack back.
                                // If we connect to a non listen port then we get a RST
                                // which will be handeled above. In other words there is
                                // normally no danger for an endless loop.
                                tcp_client_state=1; // retry
 8003310:	4b0e      	ldr	r3, [pc, #56]	; (800334c <packetloop_icmp_tcp+0x294>)
 8003312:	2201      	movs	r2, #1
 8003314:	701a      	strb	r2, [r3, #0]
                                // do not inform application layer as we retry.
                                len++;
 8003316:	89fb      	ldrh	r3, [r7, #14]
 8003318:	3301      	adds	r3, #1
 800331a:	81fb      	strh	r3, [r7, #14]
                                if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V){
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	332f      	adds	r3, #47	; 0x2f
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	f003 0310 	and.w	r3, r3, #16
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <packetloop_icmp_tcp+0x276>
                                        // if packet was an ack then do not step the ack number
                                        len=0;
 800332a:	2300      	movs	r3, #0
 800332c:	81fb      	strh	r3, [r7, #14]
                                }
                                // refuse and reset the connection
                                make_tcp_ack_from_any(buf,len,TCP_FLAGS_RST_V);
 800332e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003332:	2204      	movs	r2, #4
 8003334:	4619      	mov	r1, r3
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f7ff fb64 	bl	8002a04 <make_tcp_ack_from_any>
                                return(0);
 800333c:	2300      	movs	r3, #0
 800333e:	e127      	b.n	8003590 <packetloop_icmp_tcp+0x4d8>
 8003340:	2000001c 	.word	0x2000001c
 8003344:	2000001a 	.word	0x2000001a
 8003348:	200000f4 	.word	0x200000f4
 800334c:	200000de 	.word	0x200000de
 8003350:	20000019 	.word	0x20000019
 8003354:	200000dd 	.word	0x200000dd
 8003358:	200000df 	.word	0x200000df
 800335c:	200000e0 	.word	0x200000e0
 8003360:	200000f0 	.word	0x200000f0
 8003364:	200000ec 	.word	0x200000ec
 8003368:	20000100 	.word	0x20000100
 800336c:	200000e4 	.word	0x200000e4
 8003370:	200000e8 	.word	0x200000e8
                        }
                } 
                // in tcp_client_state==3 we will normally first get an empty
                // ack-packet and then a ack-packet with data.
                if (tcp_client_state==4 ) {     //&& len>0){ 
 8003374:	4b88      	ldr	r3, [pc, #544]	; (8003598 <packetloop_icmp_tcp+0x4e0>)
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	2b04      	cmp	r3, #4
 800337a:	d146      	bne.n	800340a <packetloop_icmp_tcp+0x352>
//                        ethershieldDebug( "First Data Packet\n");
#endif
                        // Removed this as there is no code to handle state 4. Only 1st packet will be available.
                        //tcp_client_state=4;
                        // return the data we received
                        if (client_tcp_result_callback){
 800337c:	4b87      	ldr	r3, [pc, #540]	; (800359c <packetloop_icmp_tcp+0x4e4>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d02a      	beq.n	80033da <packetloop_icmp_tcp+0x322>
                                tcpstart=TCP_DATA_START; // TCP_DATA_START is a formula
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	332e      	adds	r3, #46	; 0x2e
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	091b      	lsrs	r3, r3, #4
 800338c:	b2db      	uxtb	r3, r3
 800338e:	b29b      	uxth	r3, r3
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	b29b      	uxth	r3, r3
 8003394:	3322      	adds	r3, #34	; 0x22
 8003396:	817b      	strh	r3, [r7, #10]
                                // out of buffer bounds check, needed in case of fragmented IP packets
                                if (tcpstart>plen-8){
 8003398:	897a      	ldrh	r2, [r7, #10]
 800339a:	887b      	ldrh	r3, [r7, #2]
 800339c:	3b08      	subs	r3, #8
 800339e:	429a      	cmp	r2, r3
 80033a0:	dd02      	ble.n	80033a8 <packetloop_icmp_tcp+0x2f0>
                                        tcpstart=plen-8; // dummy but save
 80033a2:	887b      	ldrh	r3, [r7, #2]
 80033a4:	3b08      	subs	r3, #8
 80033a6:	817b      	strh	r3, [r7, #10]
                                }
                                save_len=len;
 80033a8:	89fb      	ldrh	r3, [r7, #14]
 80033aa:	813b      	strh	r3, [r7, #8]
                                if (tcpstart+len>plen){
 80033ac:	897a      	ldrh	r2, [r7, #10]
 80033ae:	89fb      	ldrh	r3, [r7, #14]
 80033b0:	441a      	add	r2, r3
 80033b2:	887b      	ldrh	r3, [r7, #2]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	dd03      	ble.n	80033c0 <packetloop_icmp_tcp+0x308>
                                        save_len=plen-tcpstart;
 80033b8:	887a      	ldrh	r2, [r7, #2]
 80033ba:	897b      	ldrh	r3, [r7, #10]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	813b      	strh	r3, [r7, #8]
                                }
#ifdef ETHERSHIELD_DEBUG
                                ethershieldDebug( "Calling Result callback\n");
#endif
                                send_fin=(*client_tcp_result_callback)((buf[TCP_DST_PORT_L_P]>>5)&0x7,0,tcpstart,save_len);
 80033c0:	4b76      	ldr	r3, [pc, #472]	; (800359c <packetloop_icmp_tcp+0x4e4>)
 80033c2:	681c      	ldr	r4, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	3325      	adds	r3, #37	; 0x25
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	095b      	lsrs	r3, r3, #5
 80033cc:	b2d8      	uxtb	r0, r3
 80033ce:	893b      	ldrh	r3, [r7, #8]
 80033d0:	897a      	ldrh	r2, [r7, #10]
 80033d2:	2100      	movs	r1, #0
 80033d4:	47a0      	blx	r4
 80033d6:	4603      	mov	r3, r0
 80033d8:	737b      	strb	r3, [r7, #13]

                        }
                        if (send_fin){
 80033da:	7b7b      	ldrb	r3, [r7, #13]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00b      	beq.n	80033f8 <packetloop_icmp_tcp+0x340>
#ifdef ETHERSHIELD_DEBUG
                                ethershieldDebug( "Send FIN\n");
#endif
                                make_tcp_ack_from_any(buf,len,TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V);
 80033e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80033e4:	2209      	movs	r2, #9
 80033e6:	4619      	mov	r1, r3
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f7ff fb0b 	bl	8002a04 <make_tcp_ack_from_any>
                                tcp_client_state=5;
 80033ee:	4b6a      	ldr	r3, [pc, #424]	; (8003598 <packetloop_icmp_tcp+0x4e0>)
 80033f0:	2205      	movs	r2, #5
 80033f2:	701a      	strb	r2, [r3, #0]
                                return(0);
 80033f4:	2300      	movs	r3, #0
 80033f6:	e0cb      	b.n	8003590 <packetloop_icmp_tcp+0x4d8>
                        }
                        make_tcp_ack_from_any(buf,len,0);
 80033f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80033fc:	2200      	movs	r2, #0
 80033fe:	4619      	mov	r1, r3
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f7ff faff 	bl	8002a04 <make_tcp_ack_from_any>
                        return(0);
 8003406:	2300      	movs	r3, #0
 8003408:	e0c2      	b.n	8003590 <packetloop_icmp_tcp+0x4d8>
                } 
                if (tcp_client_state==3) {      // && len>0){ 
 800340a:	4b63      	ldr	r3, [pc, #396]	; (8003598 <packetloop_icmp_tcp+0x4e0>)
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	2b03      	cmp	r3, #3
 8003410:	d149      	bne.n	80034a6 <packetloop_icmp_tcp+0x3ee>
                        // our first real data packet
#ifdef ETHERSHIELD_DEBUG
//                        ethershieldDebug( "First Data Packet\n");
#endif
                        // Removed this as there is no code to handle state 4. Only 1st packet will be available.
                        tcp_client_state=4;
 8003412:	4b61      	ldr	r3, [pc, #388]	; (8003598 <packetloop_icmp_tcp+0x4e0>)
 8003414:	2204      	movs	r2, #4
 8003416:	701a      	strb	r2, [r3, #0]
                        // return the data we received
                        if (client_tcp_result_callback){
 8003418:	4b60      	ldr	r3, [pc, #384]	; (800359c <packetloop_icmp_tcp+0x4e4>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d02a      	beq.n	8003476 <packetloop_icmp_tcp+0x3be>
                                tcpstart=TCP_DATA_START; // TCP_DATA_START is a formula
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	332e      	adds	r3, #46	; 0x2e
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	091b      	lsrs	r3, r3, #4
 8003428:	b2db      	uxtb	r3, r3
 800342a:	b29b      	uxth	r3, r3
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	b29b      	uxth	r3, r3
 8003430:	3322      	adds	r3, #34	; 0x22
 8003432:	817b      	strh	r3, [r7, #10]
                                // out of buffer bounds check, needed in case of fragmented IP packets
                                if (tcpstart>plen-8){
 8003434:	897a      	ldrh	r2, [r7, #10]
 8003436:	887b      	ldrh	r3, [r7, #2]
 8003438:	3b08      	subs	r3, #8
 800343a:	429a      	cmp	r2, r3
 800343c:	dd02      	ble.n	8003444 <packetloop_icmp_tcp+0x38c>
                                        tcpstart=plen-8; // dummy but save
 800343e:	887b      	ldrh	r3, [r7, #2]
 8003440:	3b08      	subs	r3, #8
 8003442:	817b      	strh	r3, [r7, #10]
                                }
                                save_len=len;
 8003444:	89fb      	ldrh	r3, [r7, #14]
 8003446:	813b      	strh	r3, [r7, #8]
                                if (tcpstart+len>plen){
 8003448:	897a      	ldrh	r2, [r7, #10]
 800344a:	89fb      	ldrh	r3, [r7, #14]
 800344c:	441a      	add	r2, r3
 800344e:	887b      	ldrh	r3, [r7, #2]
 8003450:	429a      	cmp	r2, r3
 8003452:	dd03      	ble.n	800345c <packetloop_icmp_tcp+0x3a4>
                                        save_len=plen-tcpstart;
 8003454:	887a      	ldrh	r2, [r7, #2]
 8003456:	897b      	ldrh	r3, [r7, #10]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	813b      	strh	r3, [r7, #8]
                                }
#ifdef ETHERSHIELD_DEBUG
                                ethershieldDebug( "Calling Result callback\n");
#endif
                                send_fin=(*client_tcp_result_callback)((buf[TCP_DST_PORT_L_P]>>5)&0x7,0,tcpstart,save_len);
 800345c:	4b4f      	ldr	r3, [pc, #316]	; (800359c <packetloop_icmp_tcp+0x4e4>)
 800345e:	681c      	ldr	r4, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3325      	adds	r3, #37	; 0x25
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	095b      	lsrs	r3, r3, #5
 8003468:	b2d8      	uxtb	r0, r3
 800346a:	893b      	ldrh	r3, [r7, #8]
 800346c:	897a      	ldrh	r2, [r7, #10]
 800346e:	2100      	movs	r1, #0
 8003470:	47a0      	blx	r4
 8003472:	4603      	mov	r3, r0
 8003474:	737b      	strb	r3, [r7, #13]

                        }
                        if (send_fin){
 8003476:	7b7b      	ldrb	r3, [r7, #13]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00b      	beq.n	8003494 <packetloop_icmp_tcp+0x3dc>
#ifdef ETHERSHIELD_DEBUG
                                ethershieldDebug( "Send FIN\n");
#endif
                                make_tcp_ack_from_any(buf,len,TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V);
 800347c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003480:	2209      	movs	r2, #9
 8003482:	4619      	mov	r1, r3
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f7ff fabd 	bl	8002a04 <make_tcp_ack_from_any>
                                tcp_client_state=5;
 800348a:	4b43      	ldr	r3, [pc, #268]	; (8003598 <packetloop_icmp_tcp+0x4e0>)
 800348c:	2205      	movs	r2, #5
 800348e:	701a      	strb	r2, [r3, #0]
                                return(0);
 8003490:	2300      	movs	r3, #0
 8003492:	e07d      	b.n	8003590 <packetloop_icmp_tcp+0x4d8>
                        }
                        make_tcp_ack_from_any(buf,len,0);
 8003494:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003498:	2200      	movs	r2, #0
 800349a:	4619      	mov	r1, r3
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f7ff fab1 	bl	8002a04 <make_tcp_ack_from_any>
                        return(0);
 80034a2:	2300      	movs	r3, #0
 80034a4:	e074      	b.n	8003590 <packetloop_icmp_tcp+0x4d8>
                }
                if(tcp_client_state==5){
 80034a6:	4b3c      	ldr	r3, [pc, #240]	; (8003598 <packetloop_icmp_tcp+0x4e0>)
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	2b05      	cmp	r3, #5
 80034ac:	d101      	bne.n	80034b2 <packetloop_icmp_tcp+0x3fa>
                        // no more ack
#ifdef ETHERSHIELD_DEBUG
                        ethershieldDebug( "No more ACK\n");
#endif
                        return(0);
 80034ae:	2300      	movs	r3, #0
 80034b0:	e06e      	b.n	8003590 <packetloop_icmp_tcp+0x4d8>
                }
                if (buf[TCP_FLAGS_P] & TCP_FLAGS_FIN_V){
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	332f      	adds	r3, #47	; 0x2f
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00d      	beq.n	80034dc <packetloop_icmp_tcp+0x424>
#ifdef ETHERSHIELD_DEBUG
                        ethershieldDebug( "Terminated\n");
#endif
                        make_tcp_ack_from_any(buf,len+1,TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V);
 80034c0:	89fb      	ldrh	r3, [r7, #14]
 80034c2:	3301      	adds	r3, #1
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	b21b      	sxth	r3, r3
 80034c8:	2209      	movs	r2, #9
 80034ca:	4619      	mov	r1, r3
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f7ff fa99 	bl	8002a04 <make_tcp_ack_from_any>
                        tcp_client_state=5; // connection terminated
 80034d2:	4b31      	ldr	r3, [pc, #196]	; (8003598 <packetloop_icmp_tcp+0x4e0>)
 80034d4:	2205      	movs	r2, #5
 80034d6:	701a      	strb	r2, [r3, #0]
                        return(0);
 80034d8:	2300      	movs	r3, #0
 80034da:	e059      	b.n	8003590 <packetloop_icmp_tcp+0x4d8>
                }
                // ack all data (the web page may be long):
                // if we just get a fragment then len will be zero
                // and we ack only once we have the full packet
                if (len>0){
 80034dc:	89fb      	ldrh	r3, [r7, #14]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d006      	beq.n	80034f0 <packetloop_icmp_tcp+0x438>
                        make_tcp_ack_from_any(buf,len,0);
 80034e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80034e6:	2200      	movs	r2, #0
 80034e8:	4619      	mov	r1, r3
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f7ff fa8a 	bl	8002a04 <make_tcp_ack_from_any>
#ifdef ETHERSHIELD_DEBUG
                        ethershieldDebug( "Send ACK\n");
#endif
                }
                return(0);
 80034f0:	2300      	movs	r3, #0
 80034f2:	e04d      	b.n	8003590 <packetloop_icmp_tcp+0x4d8>
        }
#endif // WWW_client||TCP_client
        //
        // tcp port web server start
        if (buf[TCP_DST_PORT_H_P]==wwwport_h && buf[TCP_DST_PORT_L_P]==wwwport_l){
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	3324      	adds	r3, #36	; 0x24
 80034f8:	781a      	ldrb	r2, [r3, #0]
 80034fa:	4b29      	ldr	r3, [pc, #164]	; (80035a0 <packetloop_icmp_tcp+0x4e8>)
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d145      	bne.n	800358e <packetloop_icmp_tcp+0x4d6>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	3325      	adds	r3, #37	; 0x25
 8003506:	781a      	ldrb	r2, [r3, #0]
 8003508:	4b26      	ldr	r3, [pc, #152]	; (80035a4 <packetloop_icmp_tcp+0x4ec>)
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	429a      	cmp	r2, r3
 800350e:	d13e      	bne.n	800358e <packetloop_icmp_tcp+0x4d6>
                if (buf[TCP_FLAGS_P] & TCP_FLAGS_SYN_V){
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	332f      	adds	r3, #47	; 0x2f
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d004      	beq.n	8003528 <packetloop_icmp_tcp+0x470>
                        make_tcp_synack_from_syn(buf);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7ff f99c 	bl	800285c <make_tcp_synack_from_syn>
                        // make_tcp_synack_from_syn does already send the syn,ack
                        return(0);
 8003524:	2300      	movs	r3, #0
 8003526:	e033      	b.n	8003590 <packetloop_icmp_tcp+0x4d8>
                }
                if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V){
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	332f      	adds	r3, #47	; 0x2f
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	f003 0310 	and.w	r3, r3, #16
 8003532:	2b00      	cmp	r3, #0
 8003534:	d02b      	beq.n	800358e <packetloop_icmp_tcp+0x4d6>
                        info_data_len=get_tcp_data_len(buf);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f7ff f9fe 	bl	8002938 <get_tcp_data_len>
 800353c:	4603      	mov	r3, r0
 800353e:	461a      	mov	r2, r3
 8003540:	4b19      	ldr	r3, [pc, #100]	; (80035a8 <packetloop_icmp_tcp+0x4f0>)
 8003542:	801a      	strh	r2, [r3, #0]
                        // we can possibly have no data, just ack:
                        // Here we misuse plen for something else to save a variable.
                        // plen is now the position of start of the tcp user data.
                        if (info_data_len==0){
 8003544:	4b18      	ldr	r3, [pc, #96]	; (80035a8 <packetloop_icmp_tcp+0x4f0>)
 8003546:	881b      	ldrh	r3, [r3, #0]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d10d      	bne.n	8003568 <packetloop_icmp_tcp+0x4b0>
                                if (buf[TCP_FLAGS_P] & TCP_FLAGS_FIN_V){
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	332f      	adds	r3, #47	; 0x2f
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b00      	cmp	r3, #0
 8003558:	d004      	beq.n	8003564 <packetloop_icmp_tcp+0x4ac>
                                        // finack, answer with ack
                                        make_tcp_ack_from_any(buf,0,0);
 800355a:	2200      	movs	r2, #0
 800355c:	2100      	movs	r1, #0
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f7ff fa50 	bl	8002a04 <make_tcp_ack_from_any>
                                }
                                // just an ack with no data, wait for next packet
                                return(0);
 8003564:	2300      	movs	r3, #0
 8003566:	e013      	b.n	8003590 <packetloop_icmp_tcp+0x4d8>
                        }
                        // Here we misuse len for something else to save a variable
                        len=TCP_DATA_START; // TCP_DATA_START is a formula
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	332e      	adds	r3, #46	; 0x2e
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	091b      	lsrs	r3, r3, #4
 8003570:	b2db      	uxtb	r3, r3
 8003572:	b29b      	uxth	r3, r3
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	b29b      	uxth	r3, r3
 8003578:	3322      	adds	r3, #34	; 0x22
 800357a:	81fb      	strh	r3, [r7, #14]
                        // check for data corruption
                        if (len>plen-8){
 800357c:	89fa      	ldrh	r2, [r7, #14]
 800357e:	887b      	ldrh	r3, [r7, #2]
 8003580:	3b08      	subs	r3, #8
 8003582:	429a      	cmp	r2, r3
 8003584:	dd01      	ble.n	800358a <packetloop_icmp_tcp+0x4d2>
                                return(0);
 8003586:	2300      	movs	r3, #0
 8003588:	e002      	b.n	8003590 <packetloop_icmp_tcp+0x4d8>
                        }
                        return(len);
 800358a:	89fb      	ldrh	r3, [r7, #14]
 800358c:	e000      	b.n	8003590 <packetloop_icmp_tcp+0x4d8>
                }
        }
        return(0);
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	3714      	adds	r7, #20
 8003594:	46bd      	mov	sp, r7
 8003596:	bd90      	pop	{r4, r7, pc}
 8003598:	200000de 	.word	0x200000de
 800359c:	200000e4 	.word	0x200000e4
 80035a0:	200000dc 	.word	0x200000dc
 80035a4:	20000018 	.word	0x20000018
 80035a8:	20000108 	.word	0x20000108

080035ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af06      	add	r7, sp, #24
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80035b2:	f7fc fdd3 	bl	800015c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80035b6:	f000 f8af 	bl	8003718 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80035ba:	f000 f929 	bl	8003810 <MX_GPIO_Init>
  MX_SPI1_Init();
 80035be:	f000 f8f1 	bl	80037a4 <MX_SPI1_Init>
  /* SysTick end of count event each 1ms */
  //RCC_GetClocksFreq(&RCC_Clocks);
  //SysTick_Config(RCC_Clocks.SYSCLK_Frequency / 1000);

  // Initialise SPI interface
  ES_enc28j60SpiInit(&hspi1);
 80035c2:	4847      	ldr	r0, [pc, #284]	; (80036e0 <main+0x134>)
 80035c4:	f7fd ff19 	bl	80013fa <ES_enc28j60SpiInit>

  // initialize enc28j60
  ES_enc28j60Init(mymac);
 80035c8:	4846      	ldr	r0, [pc, #280]	; (80036e4 <main+0x138>)
 80035ca:	f7fd ff21 	bl	8001410 <ES_enc28j60Init>

  // init the ethernet/ip layer:
  //ES_init_ip_arp_udp_tcp(mymac,myip, MYWWWPORT);

  if(ES_enc28j60Revision() <= 0)
 80035ce:	f7fd ff53 	bl	8001478 <ES_enc28j60Revision>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d100      	bne.n	80035da <main+0x2e>
  {
	// Failed to access ENC28J60
	while (1)
 80035d8:	e7fe      	b.n	80035d8 <main+0x2c>
		;    // Just loop here
  }

  // Get IP Address details
  if (allocateIPAddress(buf, BUFFER_SIZE, mymac, 80, myip, mynetmask, gwip, dhcpsvrip, dnsip) > 0)
 80035da:	4b43      	ldr	r3, [pc, #268]	; (80036e8 <main+0x13c>)
 80035dc:	9304      	str	r3, [sp, #16]
 80035de:	4b43      	ldr	r3, [pc, #268]	; (80036ec <main+0x140>)
 80035e0:	9303      	str	r3, [sp, #12]
 80035e2:	4b43      	ldr	r3, [pc, #268]	; (80036f0 <main+0x144>)
 80035e4:	9302      	str	r3, [sp, #8]
 80035e6:	4b43      	ldr	r3, [pc, #268]	; (80036f4 <main+0x148>)
 80035e8:	9301      	str	r3, [sp, #4]
 80035ea:	4b43      	ldr	r3, [pc, #268]	; (80036f8 <main+0x14c>)
 80035ec:	9300      	str	r3, [sp, #0]
 80035ee:	2350      	movs	r3, #80	; 0x50
 80035f0:	4a3c      	ldr	r2, [pc, #240]	; (80036e4 <main+0x138>)
 80035f2:	f240 2126 	movw	r1, #550	; 0x226
 80035f6:	4841      	ldr	r0, [pc, #260]	; (80036fc <main+0x150>)
 80035f8:	f7fd ff86 	bl	8001508 <allocateIPAddress>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d100      	bne.n	8003604 <main+0x58>
		// Display the results:
  }
  else
  {
	// Failed to get IP address"
	while (1)
 8003602:	e7fe      	b.n	8003602 <main+0x56>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	// read packet, handle ping and wait for a tcp packet:
	dat_p = ES_packetloop_icmp_tcp(buf, ES_enc28j60PacketReceive(BUFFER_SIZE, buf));
 8003604:	493d      	ldr	r1, [pc, #244]	; (80036fc <main+0x150>)
 8003606:	f240 2026 	movw	r0, #550	; 0x226
 800360a:	f7fd ff3c 	bl	8001486 <ES_enc28j60PacketReceive>
 800360e:	4603      	mov	r3, r0
 8003610:	4619      	mov	r1, r3
 8003612:	483a      	ldr	r0, [pc, #232]	; (80036fc <main+0x150>)
 8003614:	f7fd ff47 	bl	80014a6 <ES_packetloop_icmp_tcp>
 8003618:	4603      	mov	r3, r0
 800361a:	461a      	mov	r2, r3
 800361c:	4b38      	ldr	r3, [pc, #224]	; (8003700 <main+0x154>)
 800361e:	801a      	strh	r2, [r3, #0]

	/* dat_p will be unequal to zero if there is a valid
	 * http get */
	if (dat_p == 0)
 8003620:	4b37      	ldr	r3, [pc, #220]	; (8003700 <main+0x154>)
 8003622:	881b      	ldrh	r3, [r3, #0]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d059      	beq.n	80036dc <main+0x130>
		// no http request
		continue;
	}

	// tcp port 80 begin
	if (strncmp("GET ", (char *) &(buf[dat_p]), 4) != 0)
 8003628:	4b35      	ldr	r3, [pc, #212]	; (8003700 <main+0x154>)
 800362a:	881b      	ldrh	r3, [r3, #0]
 800362c:	461a      	mov	r2, r3
 800362e:	4b33      	ldr	r3, [pc, #204]	; (80036fc <main+0x150>)
 8003630:	4413      	add	r3, r2
 8003632:	2204      	movs	r2, #4
 8003634:	4619      	mov	r1, r3
 8003636:	4833      	ldr	r0, [pc, #204]	; (8003704 <main+0x158>)
 8003638:	f000 fbd2 	bl	8003de0 <strncmp>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d011      	beq.n	8003666 <main+0xba>
	{
		// head, post and other methods:
		dat_p = http200ok();
 8003642:	f000 f945 	bl	80038d0 <http200ok>
 8003646:	4603      	mov	r3, r0
 8003648:	461a      	mov	r2, r3
 800364a:	4b2d      	ldr	r3, [pc, #180]	; (8003700 <main+0x154>)
 800364c:	801a      	strh	r2, [r3, #0]
		dat_p = ES_fill_tcp_data(buf, dat_p, "<h1>200 OK</h1>");
 800364e:	4b2c      	ldr	r3, [pc, #176]	; (8003700 <main+0x154>)
 8003650:	881b      	ldrh	r3, [r3, #0]
 8003652:	4a2d      	ldr	r2, [pc, #180]	; (8003708 <main+0x15c>)
 8003654:	4619      	mov	r1, r3
 8003656:	4829      	ldr	r0, [pc, #164]	; (80036fc <main+0x150>)
 8003658:	f7fd ff35 	bl	80014c6 <ES_fill_tcp_data>
 800365c:	4603      	mov	r3, r0
 800365e:	461a      	mov	r2, r3
 8003660:	4b27      	ldr	r3, [pc, #156]	; (8003700 <main+0x154>)
 8003662:	801a      	strh	r2, [r3, #0]
		goto SENDTCP;
 8003664:	e033      	b.n	80036ce <main+0x122>
	}

	// just one web page in the "root directory" of the web server
	if (strncmp("/ ", (char *) &(buf[dat_p + 4]), 2) == 0)
 8003666:	4b26      	ldr	r3, [pc, #152]	; (8003700 <main+0x154>)
 8003668:	881b      	ldrh	r3, [r3, #0]
 800366a:	3304      	adds	r3, #4
 800366c:	4a23      	ldr	r2, [pc, #140]	; (80036fc <main+0x150>)
 800366e:	4413      	add	r3, r2
 8003670:	2202      	movs	r2, #2
 8003672:	4619      	mov	r1, r3
 8003674:	4825      	ldr	r0, [pc, #148]	; (800370c <main+0x160>)
 8003676:	f000 fbb3 	bl	8003de0 <strncmp>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d107      	bne.n	8003690 <main+0xe4>
	{
		dat_p = print_webpage(buf);
 8003680:	481e      	ldr	r0, [pc, #120]	; (80036fc <main+0x150>)
 8003682:	f000 f933 	bl	80038ec <print_webpage>
 8003686:	4603      	mov	r3, r0
 8003688:	461a      	mov	r2, r3
 800368a:	4b1d      	ldr	r3, [pc, #116]	; (8003700 <main+0x154>)
 800368c:	801a      	strh	r2, [r3, #0]
		goto SENDTCP;
 800368e:	e01e      	b.n	80036ce <main+0x122>
	}
	else if (strncmp("/test ", (char *) &(buf[dat_p + 4]), 2) == 0)
 8003690:	4b1b      	ldr	r3, [pc, #108]	; (8003700 <main+0x154>)
 8003692:	881b      	ldrh	r3, [r3, #0]
 8003694:	3304      	adds	r3, #4
 8003696:	4a19      	ldr	r2, [pc, #100]	; (80036fc <main+0x150>)
 8003698:	4413      	add	r3, r2
 800369a:	2202      	movs	r2, #2
 800369c:	4619      	mov	r1, r3
 800369e:	481c      	ldr	r0, [pc, #112]	; (8003710 <main+0x164>)
 80036a0:	f000 fb9e 	bl	8003de0 <strncmp>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d107      	bne.n	80036ba <main+0x10e>
	{
		dat_p = print_webpage2(buf);
 80036aa:	4814      	ldr	r0, [pc, #80]	; (80036fc <main+0x150>)
 80036ac:	f000 f972 	bl	8003994 <print_webpage2>
 80036b0:	4603      	mov	r3, r0
 80036b2:	461a      	mov	r2, r3
 80036b4:	4b12      	ldr	r3, [pc, #72]	; (8003700 <main+0x154>)
 80036b6:	801a      	strh	r2, [r3, #0]
		goto SENDTCP;
 80036b8:	e009      	b.n	80036ce <main+0x122>
	}
	else
	{
		dat_p = ES_fill_tcp_data(buf, 0, "HTTP/1.0 401 Unauthorized\r\nContent-Type: text/html\r\n\r\n<h1>401 Unauthorized</h1>");
 80036ba:	4a16      	ldr	r2, [pc, #88]	; (8003714 <main+0x168>)
 80036bc:	2100      	movs	r1, #0
 80036be:	480f      	ldr	r0, [pc, #60]	; (80036fc <main+0x150>)
 80036c0:	f7fd ff01 	bl	80014c6 <ES_fill_tcp_data>
 80036c4:	4603      	mov	r3, r0
 80036c6:	461a      	mov	r2, r3
 80036c8:	4b0d      	ldr	r3, [pc, #52]	; (8003700 <main+0x154>)
 80036ca:	801a      	strh	r2, [r3, #0]
		goto SENDTCP;
 80036cc:	bf00      	nop
	}
	SENDTCP: ES_www_server_reply(buf, dat_p); // send web page data
 80036ce:	4b0c      	ldr	r3, [pc, #48]	; (8003700 <main+0x154>)
 80036d0:	881b      	ldrh	r3, [r3, #0]
 80036d2:	4619      	mov	r1, r3
 80036d4:	4809      	ldr	r0, [pc, #36]	; (80036fc <main+0x150>)
 80036d6:	f7fd ff08 	bl	80014ea <ES_www_server_reply>
 80036da:	e793      	b.n	8003604 <main+0x58>
		continue;
 80036dc:	bf00      	nop
	dat_p = ES_packetloop_icmp_tcp(buf, ES_enc28j60PacketReceive(BUFFER_SIZE, buf));
 80036de:	e791      	b.n	8003604 <main+0x58>
 80036e0:	20000374 	.word	0x20000374
 80036e4:	20000020 	.word	0x20000020
 80036e8:	2000033c 	.word	0x2000033c
 80036ec:	20000340 	.word	0x20000340
 80036f0:	20000028 	.word	0x20000028
 80036f4:	20000338 	.word	0x20000338
 80036f8:	20000334 	.word	0x20000334
 80036fc:	2000010c 	.word	0x2000010c
 8003700:	20000372 	.word	0x20000372
 8003704:	08003f18 	.word	0x08003f18
 8003708:	08003f20 	.word	0x08003f20
 800370c:	08003f30 	.word	0x08003f30
 8003710:	08003f34 	.word	0x08003f34
 8003714:	08003f3c 	.word	0x08003f3c

08003718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b090      	sub	sp, #64	; 0x40
 800371c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800371e:	f107 0318 	add.w	r3, r7, #24
 8003722:	2228      	movs	r2, #40	; 0x28
 8003724:	2100      	movs	r1, #0
 8003726:	4618      	mov	r0, r3
 8003728:	f000 fafa 	bl	8003d20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800372c:	1d3b      	adds	r3, r7, #4
 800372e:	2200      	movs	r2, #0
 8003730:	601a      	str	r2, [r3, #0]
 8003732:	605a      	str	r2, [r3, #4]
 8003734:	609a      	str	r2, [r3, #8]
 8003736:	60da      	str	r2, [r3, #12]
 8003738:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800373a:	2301      	movs	r3, #1
 800373c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800373e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003742:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003744:	2300      	movs	r3, #0
 8003746:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003748:	2301      	movs	r3, #1
 800374a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800374c:	2302      	movs	r3, #2
 800374e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003750:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003754:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003756:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800375a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800375c:	f107 0318 	add.w	r3, r7, #24
 8003760:	4618      	mov	r0, r3
 8003762:	f7fc ffd5 	bl	8000710 <HAL_RCC_OscConfig>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d001      	beq.n	8003770 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800376c:	f000 f962 	bl	8003a34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003770:	230f      	movs	r3, #15
 8003772:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003774:	2302      	movs	r3, #2
 8003776:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003778:	2300      	movs	r3, #0
 800377a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800377c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003780:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003782:	2300      	movs	r3, #0
 8003784:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003786:	1d3b      	adds	r3, r7, #4
 8003788:	2102      	movs	r1, #2
 800378a:	4618      	mov	r0, r3
 800378c:	f7fd fa40 	bl	8000c10 <HAL_RCC_ClockConfig>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d001      	beq.n	800379a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8003796:	f000 f94d 	bl	8003a34 <Error_Handler>
  }
}
 800379a:	bf00      	nop
 800379c:	3740      	adds	r7, #64	; 0x40
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
	...

080037a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80037a8:	4b17      	ldr	r3, [pc, #92]	; (8003808 <MX_SPI1_Init+0x64>)
 80037aa:	4a18      	ldr	r2, [pc, #96]	; (800380c <MX_SPI1_Init+0x68>)
 80037ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80037ae:	4b16      	ldr	r3, [pc, #88]	; (8003808 <MX_SPI1_Init+0x64>)
 80037b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80037b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80037b6:	4b14      	ldr	r3, [pc, #80]	; (8003808 <MX_SPI1_Init+0x64>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80037bc:	4b12      	ldr	r3, [pc, #72]	; (8003808 <MX_SPI1_Init+0x64>)
 80037be:	2200      	movs	r2, #0
 80037c0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80037c2:	4b11      	ldr	r3, [pc, #68]	; (8003808 <MX_SPI1_Init+0x64>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80037c8:	4b0f      	ldr	r3, [pc, #60]	; (8003808 <MX_SPI1_Init+0x64>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80037ce:	4b0e      	ldr	r3, [pc, #56]	; (8003808 <MX_SPI1_Init+0x64>)
 80037d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037d4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80037d6:	4b0c      	ldr	r3, [pc, #48]	; (8003808 <MX_SPI1_Init+0x64>)
 80037d8:	2228      	movs	r2, #40	; 0x28
 80037da:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80037dc:	4b0a      	ldr	r3, [pc, #40]	; (8003808 <MX_SPI1_Init+0x64>)
 80037de:	2200      	movs	r2, #0
 80037e0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80037e2:	4b09      	ldr	r3, [pc, #36]	; (8003808 <MX_SPI1_Init+0x64>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037e8:	4b07      	ldr	r3, [pc, #28]	; (8003808 <MX_SPI1_Init+0x64>)
 80037ea:	2200      	movs	r2, #0
 80037ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80037ee:	4b06      	ldr	r3, [pc, #24]	; (8003808 <MX_SPI1_Init+0x64>)
 80037f0:	220a      	movs	r2, #10
 80037f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80037f4:	4804      	ldr	r0, [pc, #16]	; (8003808 <MX_SPI1_Init+0x64>)
 80037f6:	f7fd fb75 	bl	8000ee4 <HAL_SPI_Init>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d001      	beq.n	8003804 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003800:	f000 f918 	bl	8003a34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003804:	bf00      	nop
 8003806:	bd80      	pop	{r7, pc}
 8003808:	20000374 	.word	0x20000374
 800380c:	40013000 	.word	0x40013000

08003810 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b088      	sub	sp, #32
 8003814:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003816:	f107 0310 	add.w	r3, r7, #16
 800381a:	2200      	movs	r2, #0
 800381c:	601a      	str	r2, [r3, #0]
 800381e:	605a      	str	r2, [r3, #4]
 8003820:	609a      	str	r2, [r3, #8]
 8003822:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003824:	4b27      	ldr	r3, [pc, #156]	; (80038c4 <MX_GPIO_Init+0xb4>)
 8003826:	699b      	ldr	r3, [r3, #24]
 8003828:	4a26      	ldr	r2, [pc, #152]	; (80038c4 <MX_GPIO_Init+0xb4>)
 800382a:	f043 0310 	orr.w	r3, r3, #16
 800382e:	6193      	str	r3, [r2, #24]
 8003830:	4b24      	ldr	r3, [pc, #144]	; (80038c4 <MX_GPIO_Init+0xb4>)
 8003832:	699b      	ldr	r3, [r3, #24]
 8003834:	f003 0310 	and.w	r3, r3, #16
 8003838:	60fb      	str	r3, [r7, #12]
 800383a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800383c:	4b21      	ldr	r3, [pc, #132]	; (80038c4 <MX_GPIO_Init+0xb4>)
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	4a20      	ldr	r2, [pc, #128]	; (80038c4 <MX_GPIO_Init+0xb4>)
 8003842:	f043 0320 	orr.w	r3, r3, #32
 8003846:	6193      	str	r3, [r2, #24]
 8003848:	4b1e      	ldr	r3, [pc, #120]	; (80038c4 <MX_GPIO_Init+0xb4>)
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	f003 0320 	and.w	r3, r3, #32
 8003850:	60bb      	str	r3, [r7, #8]
 8003852:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003854:	4b1b      	ldr	r3, [pc, #108]	; (80038c4 <MX_GPIO_Init+0xb4>)
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	4a1a      	ldr	r2, [pc, #104]	; (80038c4 <MX_GPIO_Init+0xb4>)
 800385a:	f043 0304 	orr.w	r3, r3, #4
 800385e:	6193      	str	r3, [r2, #24]
 8003860:	4b18      	ldr	r3, [pc, #96]	; (80038c4 <MX_GPIO_Init+0xb4>)
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	f003 0304 	and.w	r3, r3, #4
 8003868:	607b      	str	r3, [r7, #4]
 800386a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800386c:	2200      	movs	r2, #0
 800386e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003872:	4815      	ldr	r0, [pc, #84]	; (80038c8 <MX_GPIO_Init+0xb8>)
 8003874:	f7fc ff34 	bl	80006e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8003878:	2200      	movs	r2, #0
 800387a:	2110      	movs	r1, #16
 800387c:	4813      	ldr	r0, [pc, #76]	; (80038cc <MX_GPIO_Init+0xbc>)
 800387e:	f7fc ff2f 	bl	80006e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8003882:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003886:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003888:	2301      	movs	r3, #1
 800388a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800388c:	2300      	movs	r3, #0
 800388e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003890:	2302      	movs	r3, #2
 8003892:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8003894:	f107 0310 	add.w	r3, r7, #16
 8003898:	4619      	mov	r1, r3
 800389a:	480b      	ldr	r0, [pc, #44]	; (80038c8 <MX_GPIO_Init+0xb8>)
 800389c:	f7fc fdc6 	bl	800042c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80038a0:	2310      	movs	r3, #16
 80038a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038a4:	2301      	movs	r3, #1
 80038a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a8:	2300      	movs	r3, #0
 80038aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ac:	2302      	movs	r3, #2
 80038ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80038b0:	f107 0310 	add.w	r3, r7, #16
 80038b4:	4619      	mov	r1, r3
 80038b6:	4805      	ldr	r0, [pc, #20]	; (80038cc <MX_GPIO_Init+0xbc>)
 80038b8:	f7fc fdb8 	bl	800042c <HAL_GPIO_Init>

}
 80038bc:	bf00      	nop
 80038be:	3720      	adds	r7, #32
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	40021000 	.word	0x40021000
 80038c8:	40011000 	.word	0x40011000
 80038cc:	40010800 	.word	0x40010800

080038d0 <http200ok>:

/* USER CODE BEGIN 4 */
uint16_t http200ok(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
	return (ES_fill_tcp_data(buf, 0, "HTTP/1.0 200 OK\r\nContent-Type: text/html\r\nPragma: no-cache\r\n\r\n"));
 80038d4:	4a03      	ldr	r2, [pc, #12]	; (80038e4 <http200ok+0x14>)
 80038d6:	2100      	movs	r1, #0
 80038d8:	4803      	ldr	r0, [pc, #12]	; (80038e8 <http200ok+0x18>)
 80038da:	f7fd fdf4 	bl	80014c6 <ES_fill_tcp_data>
 80038de:	4603      	mov	r3, r0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	08003f8c 	.word	0x08003f8c
 80038e8:	2000010c 	.word	0x2000010c

080038ec <print_webpage>:

// prepare the webpage by writing the data to the tcp send buffer
uint16_t print_webpage(uint8_t *buf)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
	uint16_t plen;

	plen = http200ok();
 80038f4:	f7ff ffec 	bl	80038d0 <http200ok>
 80038f8:	4603      	mov	r3, r0
 80038fa:	81fb      	strh	r3, [r7, #14]
	plen = ES_fill_tcp_data(buf, plen, "<html><head><title>STM32F1 ENC28J60 Ethernet Demo</title></head><body>");
 80038fc:	89fb      	ldrh	r3, [r7, #14]
 80038fe:	4a1e      	ldr	r2, [pc, #120]	; (8003978 <print_webpage+0x8c>)
 8003900:	4619      	mov	r1, r3
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f7fd fddf 	bl	80014c6 <ES_fill_tcp_data>
 8003908:	4603      	mov	r3, r0
 800390a:	81fb      	strh	r3, [r7, #14]
	plen = ES_fill_tcp_data(buf, plen, "<center><h1>Welcome to STM32F1 ENC28J60 Ethernet Demo</h1>");
 800390c:	89fb      	ldrh	r3, [r7, #14]
 800390e:	4a1b      	ldr	r2, [pc, #108]	; (800397c <print_webpage+0x90>)
 8003910:	4619      	mov	r1, r3
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f7fd fdd7 	bl	80014c6 <ES_fill_tcp_data>
 8003918:	4603      	mov	r3, r0
 800391a:	81fb      	strh	r3, [r7, #14]
	plen = ES_fill_tcp_data(buf, plen, "<br> Control digital outputs (not implemented yet)");
 800391c:	89fb      	ldrh	r3, [r7, #14]
 800391e:	4a18      	ldr	r2, [pc, #96]	; (8003980 <print_webpage+0x94>)
 8003920:	4619      	mov	r1, r3
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f7fd fdcf 	bl	80014c6 <ES_fill_tcp_data>
 8003928:	4603      	mov	r3, r0
 800392a:	81fb      	strh	r3, [r7, #14]
	plen = ES_fill_tcp_data(buf, plen, "<br> Read digital analog inputs (not implemented yet)");
 800392c:	89fb      	ldrh	r3, [r7, #14]
 800392e:	4a15      	ldr	r2, [pc, #84]	; (8003984 <print_webpage+0x98>)
 8003930:	4619      	mov	r1, r3
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f7fd fdc7 	bl	80014c6 <ES_fill_tcp_data>
 8003938:	4603      	mov	r3, r0
 800393a:	81fb      	strh	r3, [r7, #14]
	plen = ES_fill_tcp_data(buf, plen, "<br></font></h2>");
 800393c:	89fb      	ldrh	r3, [r7, #14]
 800393e:	4a12      	ldr	r2, [pc, #72]	; (8003988 <print_webpage+0x9c>)
 8003940:	4619      	mov	r1, r3
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7fd fdbf 	bl	80014c6 <ES_fill_tcp_data>
 8003948:	4603      	mov	r3, r0
 800394a:	81fb      	strh	r3, [r7, #14]
	plen = ES_fill_tcp_data(buf, plen, "</center><hr>");
 800394c:	89fb      	ldrh	r3, [r7, #14]
 800394e:	4a0f      	ldr	r2, [pc, #60]	; (800398c <print_webpage+0xa0>)
 8003950:	4619      	mov	r1, r3
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f7fd fdb7 	bl	80014c6 <ES_fill_tcp_data>
 8003958:	4603      	mov	r3, r0
 800395a:	81fb      	strh	r3, [r7, #14]
	plen = ES_fill_tcp_data(buf, plen, "</body></html>");
 800395c:	89fb      	ldrh	r3, [r7, #14]
 800395e:	4a0c      	ldr	r2, [pc, #48]	; (8003990 <print_webpage+0xa4>)
 8003960:	4619      	mov	r1, r3
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f7fd fdaf 	bl	80014c6 <ES_fill_tcp_data>
 8003968:	4603      	mov	r3, r0
 800396a:	81fb      	strh	r3, [r7, #14]

	return (plen);
 800396c:	89fb      	ldrh	r3, [r7, #14]
}
 800396e:	4618      	mov	r0, r3
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	08003fcc 	.word	0x08003fcc
 800397c:	08004014 	.word	0x08004014
 8003980:	08004050 	.word	0x08004050
 8003984:	08004084 	.word	0x08004084
 8003988:	080040bc 	.word	0x080040bc
 800398c:	080040d0 	.word	0x080040d0
 8003990:	080040e0 	.word	0x080040e0

08003994 <print_webpage2>:

// prepare the webpage by writing the data to the tcp send buffer
uint16_t print_webpage2(uint8_t *buf)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
	uint16_t plen;

	plen = http200ok();
 800399c:	f7ff ff98 	bl	80038d0 <http200ok>
 80039a0:	4603      	mov	r3, r0
 80039a2:	81fb      	strh	r3, [r7, #14]
	plen = ES_fill_tcp_data(buf, plen, "<html><head><title>Test page</title></head><body>");
 80039a4:	89fb      	ldrh	r3, [r7, #14]
 80039a6:	4a1a      	ldr	r2, [pc, #104]	; (8003a10 <print_webpage2+0x7c>)
 80039a8:	4619      	mov	r1, r3
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f7fd fd8b 	bl	80014c6 <ES_fill_tcp_data>
 80039b0:	4603      	mov	r3, r0
 80039b2:	81fb      	strh	r3, [r7, #14]
	plen = ES_fill_tcp_data(buf, plen, "<center><h1>Second page</h1>");
 80039b4:	89fb      	ldrh	r3, [r7, #14]
 80039b6:	4a17      	ldr	r2, [pc, #92]	; (8003a14 <print_webpage2+0x80>)
 80039b8:	4619      	mov	r1, r3
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f7fd fd83 	bl	80014c6 <ES_fill_tcp_data>
 80039c0:	4603      	mov	r3, r0
 80039c2:	81fb      	strh	r3, [r7, #14]
	plen = ES_fill_tcp_data(buf, plen, "<br>Hello World");
 80039c4:	89fb      	ldrh	r3, [r7, #14]
 80039c6:	4a14      	ldr	r2, [pc, #80]	; (8003a18 <print_webpage2+0x84>)
 80039c8:	4619      	mov	r1, r3
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f7fd fd7b 	bl	80014c6 <ES_fill_tcp_data>
 80039d0:	4603      	mov	r3, r0
 80039d2:	81fb      	strh	r3, [r7, #14]
	plen = ES_fill_tcp_data(buf, plen, "<br></font></h2>");
 80039d4:	89fb      	ldrh	r3, [r7, #14]
 80039d6:	4a11      	ldr	r2, [pc, #68]	; (8003a1c <print_webpage2+0x88>)
 80039d8:	4619      	mov	r1, r3
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f7fd fd73 	bl	80014c6 <ES_fill_tcp_data>
 80039e0:	4603      	mov	r3, r0
 80039e2:	81fb      	strh	r3, [r7, #14]
	plen = ES_fill_tcp_data(buf, plen, "</center><hr>");
 80039e4:	89fb      	ldrh	r3, [r7, #14]
 80039e6:	4a0e      	ldr	r2, [pc, #56]	; (8003a20 <print_webpage2+0x8c>)
 80039e8:	4619      	mov	r1, r3
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f7fd fd6b 	bl	80014c6 <ES_fill_tcp_data>
 80039f0:	4603      	mov	r3, r0
 80039f2:	81fb      	strh	r3, [r7, #14]
	plen = ES_fill_tcp_data(buf, plen, "</body></html>");
 80039f4:	89fb      	ldrh	r3, [r7, #14]
 80039f6:	4a0b      	ldr	r2, [pc, #44]	; (8003a24 <print_webpage2+0x90>)
 80039f8:	4619      	mov	r1, r3
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f7fd fd63 	bl	80014c6 <ES_fill_tcp_data>
 8003a00:	4603      	mov	r3, r0
 8003a02:	81fb      	strh	r3, [r7, #14]

	return (plen);
 8003a04:	89fb      	ldrh	r3, [r7, #14]
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3710      	adds	r7, #16
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	080040f0 	.word	0x080040f0
 8003a14:	08004124 	.word	0x08004124
 8003a18:	08004144 	.word	0x08004144
 8003a1c:	080040bc 	.word	0x080040bc
 8003a20:	080040d0 	.word	0x080040d0
 8003a24:	080040e0 	.word	0x080040e0

08003a28 <ES_PingCallback>:

void ES_PingCallback(void)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	af00      	add	r7, sp, #0
	//STM_EVAL_LEDToggle(LED4);
}
 8003a2c:	bf00      	nop
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bc80      	pop	{r7}
 8003a32:	4770      	bx	lr

08003a34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a34:	b480      	push	{r7}
 8003a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003a38:	bf00      	nop
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bc80      	pop	{r7}
 8003a3e:	4770      	bx	lr

08003a40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b085      	sub	sp, #20
 8003a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003a46:	4b15      	ldr	r3, [pc, #84]	; (8003a9c <HAL_MspInit+0x5c>)
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	4a14      	ldr	r2, [pc, #80]	; (8003a9c <HAL_MspInit+0x5c>)
 8003a4c:	f043 0301 	orr.w	r3, r3, #1
 8003a50:	6193      	str	r3, [r2, #24]
 8003a52:	4b12      	ldr	r3, [pc, #72]	; (8003a9c <HAL_MspInit+0x5c>)
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	60bb      	str	r3, [r7, #8]
 8003a5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a5e:	4b0f      	ldr	r3, [pc, #60]	; (8003a9c <HAL_MspInit+0x5c>)
 8003a60:	69db      	ldr	r3, [r3, #28]
 8003a62:	4a0e      	ldr	r2, [pc, #56]	; (8003a9c <HAL_MspInit+0x5c>)
 8003a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a68:	61d3      	str	r3, [r2, #28]
 8003a6a:	4b0c      	ldr	r3, [pc, #48]	; (8003a9c <HAL_MspInit+0x5c>)
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a72:	607b      	str	r3, [r7, #4]
 8003a74:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003a76:	4b0a      	ldr	r3, [pc, #40]	; (8003aa0 <HAL_MspInit+0x60>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	60fb      	str	r3, [r7, #12]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003a82:	60fb      	str	r3, [r7, #12]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a8a:	60fb      	str	r3, [r7, #12]
 8003a8c:	4a04      	ldr	r2, [pc, #16]	; (8003aa0 <HAL_MspInit+0x60>)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a92:	bf00      	nop
 8003a94:	3714      	adds	r7, #20
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bc80      	pop	{r7}
 8003a9a:	4770      	bx	lr
 8003a9c:	40021000 	.word	0x40021000
 8003aa0:	40010000 	.word	0x40010000

08003aa4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b088      	sub	sp, #32
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003aac:	f107 0310 	add.w	r3, r7, #16
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	601a      	str	r2, [r3, #0]
 8003ab4:	605a      	str	r2, [r3, #4]
 8003ab6:	609a      	str	r2, [r3, #8]
 8003ab8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a1b      	ldr	r2, [pc, #108]	; (8003b2c <HAL_SPI_MspInit+0x88>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d12f      	bne.n	8003b24 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003ac4:	4b1a      	ldr	r3, [pc, #104]	; (8003b30 <HAL_SPI_MspInit+0x8c>)
 8003ac6:	699b      	ldr	r3, [r3, #24]
 8003ac8:	4a19      	ldr	r2, [pc, #100]	; (8003b30 <HAL_SPI_MspInit+0x8c>)
 8003aca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003ace:	6193      	str	r3, [r2, #24]
 8003ad0:	4b17      	ldr	r3, [pc, #92]	; (8003b30 <HAL_SPI_MspInit+0x8c>)
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ad8:	60fb      	str	r3, [r7, #12]
 8003ada:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003adc:	4b14      	ldr	r3, [pc, #80]	; (8003b30 <HAL_SPI_MspInit+0x8c>)
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	4a13      	ldr	r2, [pc, #76]	; (8003b30 <HAL_SPI_MspInit+0x8c>)
 8003ae2:	f043 0304 	orr.w	r3, r3, #4
 8003ae6:	6193      	str	r3, [r2, #24]
 8003ae8:	4b11      	ldr	r3, [pc, #68]	; (8003b30 <HAL_SPI_MspInit+0x8c>)
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	f003 0304 	and.w	r3, r3, #4
 8003af0:	60bb      	str	r3, [r7, #8]
 8003af2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003af4:	23a0      	movs	r3, #160	; 0xa0
 8003af6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003af8:	2302      	movs	r3, #2
 8003afa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003afc:	2303      	movs	r3, #3
 8003afe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b00:	f107 0310 	add.w	r3, r7, #16
 8003b04:	4619      	mov	r1, r3
 8003b06:	480b      	ldr	r0, [pc, #44]	; (8003b34 <HAL_SPI_MspInit+0x90>)
 8003b08:	f7fc fc90 	bl	800042c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003b0c:	2340      	movs	r3, #64	; 0x40
 8003b0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b10:	2300      	movs	r3, #0
 8003b12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b14:	2300      	movs	r3, #0
 8003b16:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b18:	f107 0310 	add.w	r3, r7, #16
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	4805      	ldr	r0, [pc, #20]	; (8003b34 <HAL_SPI_MspInit+0x90>)
 8003b20:	f7fc fc84 	bl	800042c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003b24:	bf00      	nop
 8003b26:	3720      	adds	r7, #32
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	40013000 	.word	0x40013000
 8003b30:	40021000 	.word	0x40021000
 8003b34:	40010800 	.word	0x40010800

08003b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003b3c:	bf00      	nop
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bc80      	pop	{r7}
 8003b42:	4770      	bx	lr

08003b44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b44:	b480      	push	{r7}
 8003b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b48:	e7fe      	b.n	8003b48 <HardFault_Handler+0x4>

08003b4a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b4e:	e7fe      	b.n	8003b4e <MemManage_Handler+0x4>

08003b50 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b50:	b480      	push	{r7}
 8003b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b54:	e7fe      	b.n	8003b54 <BusFault_Handler+0x4>

08003b56 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b56:	b480      	push	{r7}
 8003b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b5a:	e7fe      	b.n	8003b5a <UsageFault_Handler+0x4>

08003b5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b60:	bf00      	nop
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bc80      	pop	{r7}
 8003b66:	4770      	bx	lr

08003b68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b6c:	bf00      	nop
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bc80      	pop	{r7}
 8003b72:	4770      	bx	lr

08003b74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b74:	b480      	push	{r7}
 8003b76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b78:	bf00      	nop
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bc80      	pop	{r7}
 8003b7e:	4770      	bx	lr

08003b80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b84:	f7fc fb30 	bl	80001e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b88:	bf00      	nop
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003b94:	4b11      	ldr	r3, [pc, #68]	; (8003bdc <_sbrk+0x50>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d102      	bne.n	8003ba2 <_sbrk+0x16>
		heap_end = &end;
 8003b9c:	4b0f      	ldr	r3, [pc, #60]	; (8003bdc <_sbrk+0x50>)
 8003b9e:	4a10      	ldr	r2, [pc, #64]	; (8003be0 <_sbrk+0x54>)
 8003ba0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003ba2:	4b0e      	ldr	r3, [pc, #56]	; (8003bdc <_sbrk+0x50>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003ba8:	4b0c      	ldr	r3, [pc, #48]	; (8003bdc <_sbrk+0x50>)
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4413      	add	r3, r2
 8003bb0:	466a      	mov	r2, sp
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d907      	bls.n	8003bc6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003bb6:	f000 f86f 	bl	8003c98 <__errno>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	230c      	movs	r3, #12
 8003bbe:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003bc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003bc4:	e006      	b.n	8003bd4 <_sbrk+0x48>
	}

	heap_end += incr;
 8003bc6:	4b05      	ldr	r3, [pc, #20]	; (8003bdc <_sbrk+0x50>)
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4413      	add	r3, r2
 8003bce:	4a03      	ldr	r2, [pc, #12]	; (8003bdc <_sbrk+0x50>)
 8003bd0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	20000344 	.word	0x20000344
 8003be0:	200003d0 	.word	0x200003d0

08003be4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003be4:	b480      	push	{r7}
 8003be6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003be8:	4b15      	ldr	r3, [pc, #84]	; (8003c40 <SystemInit+0x5c>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a14      	ldr	r2, [pc, #80]	; (8003c40 <SystemInit+0x5c>)
 8003bee:	f043 0301 	orr.w	r3, r3, #1
 8003bf2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8003bf4:	4b12      	ldr	r3, [pc, #72]	; (8003c40 <SystemInit+0x5c>)
 8003bf6:	685a      	ldr	r2, [r3, #4]
 8003bf8:	4911      	ldr	r1, [pc, #68]	; (8003c40 <SystemInit+0x5c>)
 8003bfa:	4b12      	ldr	r3, [pc, #72]	; (8003c44 <SystemInit+0x60>)
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003c00:	4b0f      	ldr	r3, [pc, #60]	; (8003c40 <SystemInit+0x5c>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a0e      	ldr	r2, [pc, #56]	; (8003c40 <SystemInit+0x5c>)
 8003c06:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003c0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c0e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003c10:	4b0b      	ldr	r3, [pc, #44]	; (8003c40 <SystemInit+0x5c>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a0a      	ldr	r2, [pc, #40]	; (8003c40 <SystemInit+0x5c>)
 8003c16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c1a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003c1c:	4b08      	ldr	r3, [pc, #32]	; (8003c40 <SystemInit+0x5c>)
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	4a07      	ldr	r2, [pc, #28]	; (8003c40 <SystemInit+0x5c>)
 8003c22:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003c26:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003c28:	4b05      	ldr	r3, [pc, #20]	; (8003c40 <SystemInit+0x5c>)
 8003c2a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003c2e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003c30:	4b05      	ldr	r3, [pc, #20]	; (8003c48 <SystemInit+0x64>)
 8003c32:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003c36:	609a      	str	r2, [r3, #8]
#endif 
}
 8003c38:	bf00      	nop
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bc80      	pop	{r7}
 8003c3e:	4770      	bx	lr
 8003c40:	40021000 	.word	0x40021000
 8003c44:	f8ff0000 	.word	0xf8ff0000
 8003c48:	e000ed00 	.word	0xe000ed00

08003c4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003c4c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003c4e:	e003      	b.n	8003c58 <LoopCopyDataInit>

08003c50 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003c50:	4b0b      	ldr	r3, [pc, #44]	; (8003c80 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003c52:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003c54:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003c56:	3104      	adds	r1, #4

08003c58 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003c58:	480a      	ldr	r0, [pc, #40]	; (8003c84 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003c5a:	4b0b      	ldr	r3, [pc, #44]	; (8003c88 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003c5c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003c5e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003c60:	d3f6      	bcc.n	8003c50 <CopyDataInit>
  ldr r2, =_sbss
 8003c62:	4a0a      	ldr	r2, [pc, #40]	; (8003c8c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003c64:	e002      	b.n	8003c6c <LoopFillZerobss>

08003c66 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003c66:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003c68:	f842 3b04 	str.w	r3, [r2], #4

08003c6c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003c6c:	4b08      	ldr	r3, [pc, #32]	; (8003c90 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003c6e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003c70:	d3f9      	bcc.n	8003c66 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003c72:	f7ff ffb7 	bl	8003be4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c76:	f000 f815 	bl	8003ca4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003c7a:	f7ff fc97 	bl	80035ac <main>
  bx lr
 8003c7e:	4770      	bx	lr
  ldr r3, =_sidata
 8003c80:	08004180 	.word	0x08004180
  ldr r0, =_sdata
 8003c84:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003c88:	20000094 	.word	0x20000094
  ldr r2, =_sbss
 8003c8c:	20000094 	.word	0x20000094
  ldr r3, = _ebss
 8003c90:	200003d0 	.word	0x200003d0

08003c94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003c94:	e7fe      	b.n	8003c94 <ADC1_2_IRQHandler>
	...

08003c98 <__errno>:
 8003c98:	4b01      	ldr	r3, [pc, #4]	; (8003ca0 <__errno+0x8>)
 8003c9a:	6818      	ldr	r0, [r3, #0]
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	20000030 	.word	0x20000030

08003ca4 <__libc_init_array>:
 8003ca4:	b570      	push	{r4, r5, r6, lr}
 8003ca6:	2500      	movs	r5, #0
 8003ca8:	4e0c      	ldr	r6, [pc, #48]	; (8003cdc <__libc_init_array+0x38>)
 8003caa:	4c0d      	ldr	r4, [pc, #52]	; (8003ce0 <__libc_init_array+0x3c>)
 8003cac:	1ba4      	subs	r4, r4, r6
 8003cae:	10a4      	asrs	r4, r4, #2
 8003cb0:	42a5      	cmp	r5, r4
 8003cb2:	d109      	bne.n	8003cc8 <__libc_init_array+0x24>
 8003cb4:	f000 f91a 	bl	8003eec <_init>
 8003cb8:	2500      	movs	r5, #0
 8003cba:	4e0a      	ldr	r6, [pc, #40]	; (8003ce4 <__libc_init_array+0x40>)
 8003cbc:	4c0a      	ldr	r4, [pc, #40]	; (8003ce8 <__libc_init_array+0x44>)
 8003cbe:	1ba4      	subs	r4, r4, r6
 8003cc0:	10a4      	asrs	r4, r4, #2
 8003cc2:	42a5      	cmp	r5, r4
 8003cc4:	d105      	bne.n	8003cd2 <__libc_init_array+0x2e>
 8003cc6:	bd70      	pop	{r4, r5, r6, pc}
 8003cc8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ccc:	4798      	blx	r3
 8003cce:	3501      	adds	r5, #1
 8003cd0:	e7ee      	b.n	8003cb0 <__libc_init_array+0xc>
 8003cd2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003cd6:	4798      	blx	r3
 8003cd8:	3501      	adds	r5, #1
 8003cda:	e7f2      	b.n	8003cc2 <__libc_init_array+0x1e>
 8003cdc:	08004178 	.word	0x08004178
 8003ce0:	08004178 	.word	0x08004178
 8003ce4:	08004178 	.word	0x08004178
 8003ce8:	0800417c 	.word	0x0800417c

08003cec <memcmp>:
 8003cec:	b530      	push	{r4, r5, lr}
 8003cee:	2400      	movs	r4, #0
 8003cf0:	42a2      	cmp	r2, r4
 8003cf2:	d101      	bne.n	8003cf8 <memcmp+0xc>
 8003cf4:	2000      	movs	r0, #0
 8003cf6:	e007      	b.n	8003d08 <memcmp+0x1c>
 8003cf8:	5d03      	ldrb	r3, [r0, r4]
 8003cfa:	3401      	adds	r4, #1
 8003cfc:	190d      	adds	r5, r1, r4
 8003cfe:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8003d02:	42ab      	cmp	r3, r5
 8003d04:	d0f4      	beq.n	8003cf0 <memcmp+0x4>
 8003d06:	1b58      	subs	r0, r3, r5
 8003d08:	bd30      	pop	{r4, r5, pc}

08003d0a <memcpy>:
 8003d0a:	b510      	push	{r4, lr}
 8003d0c:	1e43      	subs	r3, r0, #1
 8003d0e:	440a      	add	r2, r1
 8003d10:	4291      	cmp	r1, r2
 8003d12:	d100      	bne.n	8003d16 <memcpy+0xc>
 8003d14:	bd10      	pop	{r4, pc}
 8003d16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d1e:	e7f7      	b.n	8003d10 <memcpy+0x6>

08003d20 <memset>:
 8003d20:	4603      	mov	r3, r0
 8003d22:	4402      	add	r2, r0
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d100      	bne.n	8003d2a <memset+0xa>
 8003d28:	4770      	bx	lr
 8003d2a:	f803 1b01 	strb.w	r1, [r3], #1
 8003d2e:	e7f9      	b.n	8003d24 <memset+0x4>

08003d30 <srand>:
 8003d30:	b538      	push	{r3, r4, r5, lr}
 8003d32:	4b0d      	ldr	r3, [pc, #52]	; (8003d68 <srand+0x38>)
 8003d34:	4605      	mov	r5, r0
 8003d36:	681c      	ldr	r4, [r3, #0]
 8003d38:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003d3a:	b97b      	cbnz	r3, 8003d5c <srand+0x2c>
 8003d3c:	2018      	movs	r0, #24
 8003d3e:	f000 f861 	bl	8003e04 <malloc>
 8003d42:	4a0a      	ldr	r2, [pc, #40]	; (8003d6c <srand+0x3c>)
 8003d44:	4b0a      	ldr	r3, [pc, #40]	; (8003d70 <srand+0x40>)
 8003d46:	63a0      	str	r0, [r4, #56]	; 0x38
 8003d48:	e9c0 2300 	strd	r2, r3, [r0]
 8003d4c:	4b09      	ldr	r3, [pc, #36]	; (8003d74 <srand+0x44>)
 8003d4e:	2201      	movs	r2, #1
 8003d50:	6083      	str	r3, [r0, #8]
 8003d52:	230b      	movs	r3, #11
 8003d54:	8183      	strh	r3, [r0, #12]
 8003d56:	2300      	movs	r3, #0
 8003d58:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003d60:	611d      	str	r5, [r3, #16]
 8003d62:	615a      	str	r2, [r3, #20]
 8003d64:	bd38      	pop	{r3, r4, r5, pc}
 8003d66:	bf00      	nop
 8003d68:	20000030 	.word	0x20000030
 8003d6c:	abcd330e 	.word	0xabcd330e
 8003d70:	e66d1234 	.word	0xe66d1234
 8003d74:	0005deec 	.word	0x0005deec

08003d78 <rand>:
 8003d78:	b538      	push	{r3, r4, r5, lr}
 8003d7a:	4b13      	ldr	r3, [pc, #76]	; (8003dc8 <rand+0x50>)
 8003d7c:	681c      	ldr	r4, [r3, #0]
 8003d7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003d80:	b97b      	cbnz	r3, 8003da2 <rand+0x2a>
 8003d82:	2018      	movs	r0, #24
 8003d84:	f000 f83e 	bl	8003e04 <malloc>
 8003d88:	4a10      	ldr	r2, [pc, #64]	; (8003dcc <rand+0x54>)
 8003d8a:	4b11      	ldr	r3, [pc, #68]	; (8003dd0 <rand+0x58>)
 8003d8c:	63a0      	str	r0, [r4, #56]	; 0x38
 8003d8e:	e9c0 2300 	strd	r2, r3, [r0]
 8003d92:	4b10      	ldr	r3, [pc, #64]	; (8003dd4 <rand+0x5c>)
 8003d94:	2201      	movs	r2, #1
 8003d96:	6083      	str	r3, [r0, #8]
 8003d98:	230b      	movs	r3, #11
 8003d9a:	8183      	strh	r3, [r0, #12]
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8003da2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003da4:	480c      	ldr	r0, [pc, #48]	; (8003dd8 <rand+0x60>)
 8003da6:	690a      	ldr	r2, [r1, #16]
 8003da8:	694b      	ldr	r3, [r1, #20]
 8003daa:	4350      	muls	r0, r2
 8003dac:	4c0b      	ldr	r4, [pc, #44]	; (8003ddc <rand+0x64>)
 8003dae:	fb04 0003 	mla	r0, r4, r3, r0
 8003db2:	fba2 2304 	umull	r2, r3, r2, r4
 8003db6:	4403      	add	r3, r0
 8003db8:	1c54      	adds	r4, r2, #1
 8003dba:	f143 0500 	adc.w	r5, r3, #0
 8003dbe:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8003dc2:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8003dc6:	bd38      	pop	{r3, r4, r5, pc}
 8003dc8:	20000030 	.word	0x20000030
 8003dcc:	abcd330e 	.word	0xabcd330e
 8003dd0:	e66d1234 	.word	0xe66d1234
 8003dd4:	0005deec 	.word	0x0005deec
 8003dd8:	5851f42d 	.word	0x5851f42d
 8003ddc:	4c957f2d 	.word	0x4c957f2d

08003de0 <strncmp>:
 8003de0:	b510      	push	{r4, lr}
 8003de2:	b16a      	cbz	r2, 8003e00 <strncmp+0x20>
 8003de4:	3901      	subs	r1, #1
 8003de6:	1884      	adds	r4, r0, r2
 8003de8:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003dec:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d103      	bne.n	8003dfc <strncmp+0x1c>
 8003df4:	42a0      	cmp	r0, r4
 8003df6:	d001      	beq.n	8003dfc <strncmp+0x1c>
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1f5      	bne.n	8003de8 <strncmp+0x8>
 8003dfc:	1a98      	subs	r0, r3, r2
 8003dfe:	bd10      	pop	{r4, pc}
 8003e00:	4610      	mov	r0, r2
 8003e02:	e7fc      	b.n	8003dfe <strncmp+0x1e>

08003e04 <malloc>:
 8003e04:	4b02      	ldr	r3, [pc, #8]	; (8003e10 <malloc+0xc>)
 8003e06:	4601      	mov	r1, r0
 8003e08:	6818      	ldr	r0, [r3, #0]
 8003e0a:	f000 b803 	b.w	8003e14 <_malloc_r>
 8003e0e:	bf00      	nop
 8003e10:	20000030 	.word	0x20000030

08003e14 <_malloc_r>:
 8003e14:	b570      	push	{r4, r5, r6, lr}
 8003e16:	1ccd      	adds	r5, r1, #3
 8003e18:	f025 0503 	bic.w	r5, r5, #3
 8003e1c:	3508      	adds	r5, #8
 8003e1e:	2d0c      	cmp	r5, #12
 8003e20:	bf38      	it	cc
 8003e22:	250c      	movcc	r5, #12
 8003e24:	2d00      	cmp	r5, #0
 8003e26:	4606      	mov	r6, r0
 8003e28:	db01      	blt.n	8003e2e <_malloc_r+0x1a>
 8003e2a:	42a9      	cmp	r1, r5
 8003e2c:	d903      	bls.n	8003e36 <_malloc_r+0x22>
 8003e2e:	230c      	movs	r3, #12
 8003e30:	6033      	str	r3, [r6, #0]
 8003e32:	2000      	movs	r0, #0
 8003e34:	bd70      	pop	{r4, r5, r6, pc}
 8003e36:	f000 f857 	bl	8003ee8 <__malloc_lock>
 8003e3a:	4a21      	ldr	r2, [pc, #132]	; (8003ec0 <_malloc_r+0xac>)
 8003e3c:	6814      	ldr	r4, [r2, #0]
 8003e3e:	4621      	mov	r1, r4
 8003e40:	b991      	cbnz	r1, 8003e68 <_malloc_r+0x54>
 8003e42:	4c20      	ldr	r4, [pc, #128]	; (8003ec4 <_malloc_r+0xb0>)
 8003e44:	6823      	ldr	r3, [r4, #0]
 8003e46:	b91b      	cbnz	r3, 8003e50 <_malloc_r+0x3c>
 8003e48:	4630      	mov	r0, r6
 8003e4a:	f000 f83d 	bl	8003ec8 <_sbrk_r>
 8003e4e:	6020      	str	r0, [r4, #0]
 8003e50:	4629      	mov	r1, r5
 8003e52:	4630      	mov	r0, r6
 8003e54:	f000 f838 	bl	8003ec8 <_sbrk_r>
 8003e58:	1c43      	adds	r3, r0, #1
 8003e5a:	d124      	bne.n	8003ea6 <_malloc_r+0x92>
 8003e5c:	230c      	movs	r3, #12
 8003e5e:	4630      	mov	r0, r6
 8003e60:	6033      	str	r3, [r6, #0]
 8003e62:	f000 f842 	bl	8003eea <__malloc_unlock>
 8003e66:	e7e4      	b.n	8003e32 <_malloc_r+0x1e>
 8003e68:	680b      	ldr	r3, [r1, #0]
 8003e6a:	1b5b      	subs	r3, r3, r5
 8003e6c:	d418      	bmi.n	8003ea0 <_malloc_r+0x8c>
 8003e6e:	2b0b      	cmp	r3, #11
 8003e70:	d90f      	bls.n	8003e92 <_malloc_r+0x7e>
 8003e72:	600b      	str	r3, [r1, #0]
 8003e74:	18cc      	adds	r4, r1, r3
 8003e76:	50cd      	str	r5, [r1, r3]
 8003e78:	4630      	mov	r0, r6
 8003e7a:	f000 f836 	bl	8003eea <__malloc_unlock>
 8003e7e:	f104 000b 	add.w	r0, r4, #11
 8003e82:	1d23      	adds	r3, r4, #4
 8003e84:	f020 0007 	bic.w	r0, r0, #7
 8003e88:	1ac3      	subs	r3, r0, r3
 8003e8a:	d0d3      	beq.n	8003e34 <_malloc_r+0x20>
 8003e8c:	425a      	negs	r2, r3
 8003e8e:	50e2      	str	r2, [r4, r3]
 8003e90:	e7d0      	b.n	8003e34 <_malloc_r+0x20>
 8003e92:	684b      	ldr	r3, [r1, #4]
 8003e94:	428c      	cmp	r4, r1
 8003e96:	bf16      	itet	ne
 8003e98:	6063      	strne	r3, [r4, #4]
 8003e9a:	6013      	streq	r3, [r2, #0]
 8003e9c:	460c      	movne	r4, r1
 8003e9e:	e7eb      	b.n	8003e78 <_malloc_r+0x64>
 8003ea0:	460c      	mov	r4, r1
 8003ea2:	6849      	ldr	r1, [r1, #4]
 8003ea4:	e7cc      	b.n	8003e40 <_malloc_r+0x2c>
 8003ea6:	1cc4      	adds	r4, r0, #3
 8003ea8:	f024 0403 	bic.w	r4, r4, #3
 8003eac:	42a0      	cmp	r0, r4
 8003eae:	d005      	beq.n	8003ebc <_malloc_r+0xa8>
 8003eb0:	1a21      	subs	r1, r4, r0
 8003eb2:	4630      	mov	r0, r6
 8003eb4:	f000 f808 	bl	8003ec8 <_sbrk_r>
 8003eb8:	3001      	adds	r0, #1
 8003eba:	d0cf      	beq.n	8003e5c <_malloc_r+0x48>
 8003ebc:	6025      	str	r5, [r4, #0]
 8003ebe:	e7db      	b.n	8003e78 <_malloc_r+0x64>
 8003ec0:	20000348 	.word	0x20000348
 8003ec4:	2000034c 	.word	0x2000034c

08003ec8 <_sbrk_r>:
 8003ec8:	b538      	push	{r3, r4, r5, lr}
 8003eca:	2300      	movs	r3, #0
 8003ecc:	4c05      	ldr	r4, [pc, #20]	; (8003ee4 <_sbrk_r+0x1c>)
 8003ece:	4605      	mov	r5, r0
 8003ed0:	4608      	mov	r0, r1
 8003ed2:	6023      	str	r3, [r4, #0]
 8003ed4:	f7ff fe5a 	bl	8003b8c <_sbrk>
 8003ed8:	1c43      	adds	r3, r0, #1
 8003eda:	d102      	bne.n	8003ee2 <_sbrk_r+0x1a>
 8003edc:	6823      	ldr	r3, [r4, #0]
 8003ede:	b103      	cbz	r3, 8003ee2 <_sbrk_r+0x1a>
 8003ee0:	602b      	str	r3, [r5, #0]
 8003ee2:	bd38      	pop	{r3, r4, r5, pc}
 8003ee4:	200003cc 	.word	0x200003cc

08003ee8 <__malloc_lock>:
 8003ee8:	4770      	bx	lr

08003eea <__malloc_unlock>:
 8003eea:	4770      	bx	lr

08003eec <_init>:
 8003eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eee:	bf00      	nop
 8003ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ef2:	bc08      	pop	{r3}
 8003ef4:	469e      	mov	lr, r3
 8003ef6:	4770      	bx	lr

08003ef8 <_fini>:
 8003ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003efa:	bf00      	nop
 8003efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003efe:	bc08      	pop	{r3}
 8003f00:	469e      	mov	lr, r3
 8003f02:	4770      	bx	lr
